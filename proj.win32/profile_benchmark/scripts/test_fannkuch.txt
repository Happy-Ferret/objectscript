
[FILE] scripts/test_fannkuch.os
[1] print arg

begin function
  begin locals 9, stack 18
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    4 fannkuch
    5 n
    6 start_time
    7 sum
    8 flips
  end locals
  begin call method
    move: # (9) = var _E (2)
    move: # (10) = const string "print" (-10)
    get property: # (11) = var _E (2) [const string "arg" (-11)]
  end call method: start 9, params 3, ret values 0


[2] var fannkuch = function(n)

  begin function
    begin locals 21, stack 27
      0 _F (param)
      1 this (param)
      2 n (param)
      3 _E
      4 _G
      5 p
      6 q
      7 s
      8 sign
      9 maxflips
      10 sum
      11 i
    end locals

[4] var p, q, s, sign, maxflips, sum = [], [], [], 1, 0, 0

    new array 0: # (21)
    new array 0: # (22)
    new array 0: # (23)
    move: # (24) = const number 1 (-4)
    move: # (25) = const number 0 (-5)
    move: var sum (10) = const number 0 (-5)
    move: var maxflips (9) = # (25)
    move: var sign (8) = # (24)
    move: var s (7) = # (23)
    move: var q (6) = # (22)
    move: var p (5) = # (21)

[5] var i


[6] for(i=1; i<=n; i++) p[i], q[i], s[i] = i, i, i

    begin scope
      move: var i (11) = const number 1 (-4)

      begin loop
        begin if
          begin bool exp
            move: # (21) = var i (11)
            move: # (22) = param n (2)
            # (21) = # (21) [logic <=] # (22)
            # (21) = [logic not] # (21)
          end bool exp
          begin then
            break
          end then
        end if ret values 0

        move: # (21) = var i (11)
        move: # (22) = var i (11)
        move: # (23) = var i (11)
        set property: var s (7) [var i (11)] = # (23)
        set property: var q (6) [var i (11)] = # (22)
        set property: var p (5) [var i (11)] = # (21)

        var i (11) = var i (11) [operator +] const number 1 (-4)
      end loop ret values 0
    end scope ret values 0

[7] for(;;){

    begin scope

      begin loop

[9] var q1 = p[1]				// Cache 1st element.

        begin scope
          begin locals 1
            12 q1
          end locals
          get property: var q1 (12) = var p (5) [const number 1 (-4)]


[10] if(q1 != 1){

          begin if
            begin bool exp
              move: # (21) = var q1 (12)
              move: # (22) = const number 1 (-4)
              # (21) = # (21) [logic !=] # (22)
            end bool exp
            begin then

[11] for(i=2; i<=n; i++) q[i] = p[i]		// Work on a copy.

              begin scope
                begin locals 1
                  13 flips
                end locals
                begin scope
                  move: var i (11) = const number 2 (-6)

                  begin loop
                    begin if
                      begin bool exp
                        move: # (21) = var i (11)
                        move: # (22) = param n (2)
                        # (21) = # (21) [logic <=] # (22)
                        # (21) = [logic not] # (21)
                      end bool exp
                      begin then
                        break
                      end then
                    end if ret values 0

                    get property: # (21) = var p (5) [var i (11)]
                    set property: var q (6) [var i (11)] = # (21)

                    var i (11) = var i (11) [operator +] const number 1 (-4)
                  end loop ret values 0
                end scope ret values 0


[12] var flips = 1

                move: var flips (13) = const number 1 (-4)


[13] for(;;){

                begin scope

                  begin loop

[14] var qq = q[q1]

                    begin scope
                      begin locals 2
                        14 qq
                        20 #temp
                      end locals
                      begin pop
                        get property: var qq (14) = var q (6) [var q1 (12)]

[15] if(qq == 1){				// ... until 1st element is 1.

                        begin if
                          begin bool exp
                            move: # (21) = var qq (14)
                            move: # (22) = const number 1 (-4)
                            # (21) = # (21) [logic ==] # (22)
                          end bool exp
                          begin then

[16] sum = sum + sign*flips

                            begin scope
                              # (22) = var sign (8) [operator *] var flips (13)
                              var sum (10) = var sum (10) [operator +] # (22)


[17] if(flips > maxflips){

                              begin if
                                begin bool exp
                                  move: # (21) = var flips (13)
                                  move: # (22) = var maxflips (9)
                                  # (21) = # (21) [logic >] # (22)
                                end bool exp
                                begin then

[18] maxflips = flips

                                  begin scope
                                    move: var maxflips (9) = var flips (13)
                                  end scope ret values 0
                                end then
                              end if ret values 0


[20] break

                              break
                            end scope ret values 0
                          end then
                        end if ret values 0

[22] q[q1] = q1

                        set property: var q (6) [var q1 (12)] = var q1 (12)

[23] if(q1 >= 4){

                        begin if
                          begin bool exp
                            move: # (21) = var q1 (12)
                            move: # (22) = const number 4 (-7)
                            # (21) = # (21) [logic >=] # (22)
                          end bool exp
                          begin then

[24] var i, j = 2, q1 - 1

                            begin scope
                              begin locals 2
                                15 i
                                16 j
                              end locals
                              move: # (21) = const number 2 (-6)
                              var j (16) = var q1 (12) [operator -] const number 1 (-4)
                              move: var i (15) = # (21)


[25] for(;;){ q[i], q[j] = q[j], q[i]; if(++i >= --j) break }

                              begin scope

                                begin loop
                                  begin scope
                                    get property: # (21) = var q (6) [var j (16)]
                                    get property: # (22) = var q (6) [var i (15)]
                                    set property: var q (6) [var j (16)] = # (22)
                                    set property: var q (6) [var i (15)] = # (21)

                                    begin if
                                      begin bool exp
                                        var i (15) = var i (15) [operator +] const number 1 (-4)
                                        move: # (21) = var i (15)
                                        var j (16) = var j (16) [operator -] const number 1 (-4)
                                        move: # (22) = var j (16)
                                        # (21) = # (21) [logic >=] # (22)
                                      end bool exp
                                      begin then
                                        break
                                      end then
                                    end if ret values 0
                                  end scope ret values 0

                                end loop ret values 0
                              end scope ret values 0
                            end scope ret values 0
                          end then
                        end if ret values 0

[27] q1 = qq; flips++

                        move: var q1 (12) = var qq (14)
                        move: var #temp (20) = var flips (13)
                        var flips (13) = var flips (13) [operator +] const number 1 (-4)
                        move: # (21) = var #temp (20)
                      end pop ret values 0
                    end scope ret values 0


[13] for(;;){

                  end loop ret values 0
                end scope ret values 0
              end scope ret values 0
            end then
          end if ret values 0


[31] if(sign == 1){

          begin if
            begin bool exp
              move: # (21) = var sign (8)
              move: # (22) = const number 1 (-4)
              # (21) = # (21) [logic ==] # (22)
            end bool exp
            begin then

[32] p[2], p[1] = p[1], p[2] sign = -1	// Rotate 1<-2.

              begin scope
                get property: # (21) = var p (5) [const number 1 (-4)]
                get property: # (22) = var p (5) [const number 2 (-6)]
                set property: var p (5) [const number 1 (-4)] = # (22)
                set property: var p (5) [const number 2 (-6)] = # (21)

                # (21) = [neg] const number 1 (-4)
                move: var sign (8) = # (21)
              end scope ret values 0
            end then
            begin else

[34] p[2], p[3] = p[3], p[2] sign = 1	// Rotate 1<-2 and 1<-2<-3.

              begin scope
                get property: # (21) = var p (5) [const number 3 (-8)]
                get property: # (22) = var p (5) [const number 2 (-6)]
                set property: var p (5) [const number 3 (-8)] = # (22)
                set property: var p (5) [const number 2 (-6)] = # (21)

                move: var sign (8) = const number 1 (-4)


[35] for(i = 3;; i++){

                begin scope
                  move: var i (11) = const number 3 (-8)

                  begin loop

[37] var sx = s[i]

                    begin scope
                      begin locals 2
                        17 sx
                        18 t
                      end locals
                      get property: var sx (17) = var s (7) [var i (11)]


[38] if(sx != 1){ s[i] = sx-1 break }

                      begin if
                        begin bool exp
                          move: # (21) = var sx (17)
                          move: # (22) = const number 1 (-4)
                          # (21) = # (21) [logic !=] # (22)
                        end bool exp
                        begin then
                          begin scope
                            # (21) = var sx (17) [operator -] const number 1 (-4)
                            set property: var s (7) [var i (11)] = # (21)

                            break
                          end scope ret values 0
                        end then
                      end if ret values 0


[39] if(i == n) return sum, maxflips;	// Out of permutations.

                      begin if
                        begin bool exp
                          move: # (21) = var i (11)
                          move: # (22) = param n (2)
                          # (21) = # (21) [logic ==] # (22)
                        end bool exp
                        begin then
                            move: # (21) = var sum (10)
                            move: # (22) = var maxflips (9)
                          return: # (21), count 2
                        end then
                      end if ret values 0


[40] s[i] = i

                      set property: var s (7) [var i (11)] = var i (11)


[42] var t = p[1] for(var j = 1; j <= i; j++){ p[j] = p[j+1] } p[i+1] = t

                      get property: var t (18) = var p (5) [const number 1 (-4)]

                      begin scope
                        begin locals 1
                          19 j
                        end locals
                        move: var j (19) = const number 1 (-4)

                        begin loop
                          begin if
                            begin bool exp
                              move: # (21) = var j (19)
                              move: # (22) = var i (11)
                              # (21) = # (21) [logic <=] # (22)
                              # (21) = [logic not] # (21)
                            end bool exp
                            begin then
                              break
                            end then
                          end if ret values 0

                          begin scope
                            # (22) = var j (19) [operator +] const number 1 (-4)
                            get property: # (21) = var p (5) [# (22)]
                            set property: var p (5) [var j (19)] = # (21)
                          end scope ret values 0

                          var j (19) = var j (19) [operator +] const number 1 (-4)
                        end loop ret values 0
                      end scope ret values 0

                      # (23) = var i (11) [operator +] const number 1 (-4)
                      set property: var p (5) [# (23)] = var t (18)
                    end scope ret values 0


[35] for(i = 3;; i++){

                    var i (11) = var i (11) [operator +] const number 1 (-4)
                  end loop ret values 0
                end scope ret values 0
              end scope ret values 0
            end else
          end if ret values 0
        end scope ret values 0


[7] for(;;){

      end loop ret values 0
    end scope ret values 0
  end function: var fannkuch (4), index 1


[47] var n = numberOf(arg && arg[1]) || 5

  begin call method
    move: # (9) = var _E (2)
    move: # (10) = const string "numberOf" (-12)
    get property: # (11) = var _E (2) [const string "arg" (-11)]
    logic &&: # (11)
      get property: # (11) = var _E (2) [const string "arg" (-11)]
      get property: # (11) = # (11) [const number 1 (-4)]
  end call method: start 9, params 3, ret values 1
  logic ||: # (9)
    move: # (9) = const number 5 (-9)
  move: var n (5) = # (9)


[48] var start_time = getTimeSec()

  begin call method
    move: # (9) = var _E (2)
    move: # (10) = const string "getTimeSec" (-13)
  end call method: start 9, params 2, ret values 1
  move: var start_time (6) = # (9)


[49] var sum, flips = fannkuch(n)

  begin call
    move: # (9) = var fannkuch (4)
    move: # (10) = const null (-1)
    move: # (11) = var n (5)
  end call: start 9, params 3, ret values 2
  move: var flips (8) = # (10)
  move: var sum (7) = # (9)


[50] echo(

  begin call method
    move: # (9) = var _E (2)
    move: # (10) = const string "echo" (-14)

[51] sum"\n"

    move: # (11) = var sum (7)
    move: # (12) = const string "
" (-15)

[52] "Pfannkuchen("n") = "flips"\n"

    move: # (13) = const string "Pfannkuchen(" (-16)
    move: # (14) = var n (5)
    move: # (15) = const string ") = " (-17)
    move: # (16) = var flips (8)
    move: # (17) = const string "
" (-15)
  end call method: start 9, params 9, ret values 0


[54] printf("time: %.3f\n", getTimeSec() - start_time)

  begin call method
    move: # (9) = var _E (2)
    move: # (10) = const string "printf" (-18)
    move: # (11) = const string "time: %.3f
" (-19)
    begin call method
      move: # (12) = var _E (2)
      move: # (13) = const string "getTimeSec" (-13)
    end call method: start 12, params 2, ret values 1
    # (12) = # (12) [operator -] var start_time (6)
  end call method: start 9, params 4, ret values 0

  return: var _E (2), count 1
end function: <<->> (0), index 0
