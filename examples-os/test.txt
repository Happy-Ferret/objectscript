
[FILE] ../../examples-os/test.os
[1] try{

begin function
  begin locals 56, stack 67
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    38 Person
    39 p
    40 IvanPerson
    41 p
    42 vec3
    43 v1
    44 v2
    45 v3
    49 a
    50 transform
    51 core
    52 __planet
    53 testFunc
  end locals

[2] var a, b = 2, 0

  begin try catch
    begin scope
      begin locals 3
        4 a
        5 b
        6 c
      end locals
      move: # (56) = const number 2 (-4)
      move: var b (5) = const number 0 (-5)
      move: var a (4) = # (56)


[3] var c = a / b

      var c (6) = var a (4) [operator /] var b (5)
    end scope ret values 0
  catch

[4] }catch(e){

    begin scope
      begin locals 1
        7 e
      end locals

[5] print "exception: "..e

      begin scope
        begin call method
          move: # (56) = var _E (2)
          move: # (57) = const string "print" (-31)
          begin call method
            move: # (58) = var _G (3)
            move: # (59) = const string "concat" (-32)
            move: # (60) = const string "exception: " (-33)
            move: # (61) = var e (7)
          end call method: start 58, params 4, ret values 1
        end call method: start 56, params 3, ret values 0
      end scope ret values 0
    end scope ret values 0
  end try catch


[9] echo("file: "__FILE__", line: "__LINE__"\n")

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "echo" (-34)
    move: # (58) = const string "file: " (-35)
    begin call method
      move: # (59) = var _G (3)
      move: # (60) = const string "__getfilename" (-36)
    end call method: start 59, params 2, ret values 1
    move: # (60) = const string ", line: " (-37)
    move: # (61) = const number 9 (-6)
    move: # (62) = const string "
" (-38)
  end call method: start 56, params 7, ret values 0


[12] print(5 " differences")

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const number 5 (-7)
    move: # (59) = const string " differences" (-39)
  end call method: start 56, params 4, ret values 0


[15] var i = 4

  begin scope
    begin locals 4
      8 i
      9 name
      10 count
      11 time
    end locals
    move: var i (8) = const number 4 (-8)


[17] var name, count, time = "Smith", 3 + 2/i, 1.23

    move: # (56) = const string "Smith" (-40)
    # (58) = const number 2 (-4) [operator /] var i (8)
    # (57) = const number 3 (-9) [operator +] # (58)
    move: var time (11) = const number 1.23 (-10)
    move: var count (10) = # (57)
    move: var name (9) = # (56)


[19] print concat("name: " name ", count: " count ", time: " time)

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _E (2)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "name: " (-41)
        move: # (61) = var name (9)
        move: # (62) = const string ", count: " (-42)
        move: # (63) = var count (10)
        move: # (64) = const string ", time: " (-43)
        move: # (65) = var time (11)
      end call method: start 58, params 8, ret values 1
    end call method: start 56, params 3, ret values 0
  end scope ret values 0


[23] print {firstname="Ivan" lastname="Petrov"}

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    new object 2: # (58)
    init property: # (58) [const string "firstname" (-44)] = const string "Ivan" (-45)
    init property: # (58) [const string "lastname" (-46)] = const string "Petrov" (-47)
  end call method: start 56, params 3, ret values 0


[27] var a = {x=1, y=3; "zero" "one", "two" last:7,}

  begin scope
    begin locals 11
      12 a
      13 b
      14 i
      15 j
      16 k
      17 test
      18 a
      19 b
      20 a
      21 b
      22 c
    end locals
    new object 6: # (56)
    init property: # (56) [const string "x" (-48)] = const number 1 (-11)
    init property: # (56) [const string "y" (-49)] = const number 3 (-9)
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const string "zero" (-51)
    end call method: start 57, params 3, ret values 0
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const string "one" (-52)
    end call method: start 57, params 3, ret values 0
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const string "two" (-53)
    end call method: start 57, params 3, ret values 0
    init property: # (56) [const string "last" (-54)] = const number 7 (-12)
    move: var a (12) = # (56)


[28] print a[1]

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      get property: # (58) = var a (12) [const number 1 (-11)]
    end call method: start 56, params 3, ret values 0


[29] print a

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = var a (12)
    end call method: start 56, params 3, ret values 0


[32] a = {[2+3]="five" y=3}

    new object 2: # (56)
    init property: # (56) [const number 5 (-7)] = const string "five" (-55)
    init property: # (56) [const string "y" (-49)] = const number 3 (-9)
    move: var a (12) = # (56)


[33] print a[5]

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      get property: # (58) = var a (12) [const number 5 (-7)]
    end call method: start 56, params 3, ret values 0


[34] print a

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = var a (12)
    end call method: start 56, params 3, ret values 0


[36] a = {x=1 y=2}

    new object 2: # (56)
    init property: # (56) [const string "x" (-48)] = const number 1 (-11)
    init property: # (56) [const string "y" (-49)] = const number 2 (-4)
    move: var a (12) = # (56)


[38] var b = {[a]="powerful" 7="greate"}

    new object 2: # (56)
    init property: # (56) [var a (12)] = const string "powerful" (-56)
    init property: # (56) [const number 7 (-12)] = const string "greate" (-57)
    move: var b (13) = # (56)


[39] print b[a]

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      get property: # (58) = var b (13) [var a (12)]
    end call method: start 56, params 3, ret values 0


[41] print([10, 20, 30, 40])

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      new array 4: # (58)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 10 (-13)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 20 (-14)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 30 (-15)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 40 (-16)
      end call method: start 59, params 3, ret values 0
    end call method: start 56, params 3, ret values 0


[43] print([10 20 30 40])

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      new array 4: # (58)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 10 (-13)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 20 (-14)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 30 (-15)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 40 (-16)
      end call method: start 59, params 3, ret values 0
    end call method: start 56, params 3, ret values 0


[46] var i, j, k = 0, 1, 3

    move: # (56) = const number 0 (-5)
    move: # (57) = const number 1 (-11)
    move: var k (16) = const number 3 (-9)
    move: var j (15) = # (57)
    move: var i (14) = # (56)


[47] echo("i="i", j="j", k="k"\n")

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "echo" (-34)
      move: # (58) = const string "i=" (-58)
      move: # (59) = var i (14)
      move: # (60) = const string ", j=" (-59)
      move: # (61) = var j (15)
      move: # (62) = const string ", k=" (-60)
      move: # (63) = var k (16)
      move: # (64) = const string "
" (-38)
    end call method: start 56, params 9, ret values 0


[50] i, j = j, i

    move: # (56) = var j (15)
    move: var j (15) = var i (14)
    move: var i (14) = # (56)


[51] echo("after swap: i="i", j="j"\n")

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "echo" (-34)
      move: # (58) = const string "after swap: i=" (-61)
      move: # (59) = var i (14)
      move: # (60) = const string ", j=" (-59)
      move: # (61) = var j (15)
      move: # (62) = const string "
" (-38)
    end call method: start 56, params 7, ret values 0


[54] var test = function(){ return 1, 2 }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        move: # (4) = const number 1 (-11)
        move: # (5) = const number 2 (-4)
      return: # (4), count 2
    end function: var test (17), index 1


[55] var a, b = test()

    begin call
      move: # (56) = var test (17)
      move: # (57) = const null (-1)
    end call: start 56, params 2, ret values 2
    move: var b (19) = # (57)
    move: var a (18) = # (56)


[56] print("results from function" "a="..a "b="..b)

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "results from function" (-62)
      begin call method
        move: # (59) = var _G (3)
        move: # (60) = const string "concat" (-32)
        move: # (61) = const string "a=" (-63)
        move: # (62) = var a (18)
      end call method: start 59, params 4, ret values 1
      begin call method
        move: # (60) = var _G (3)
        move: # (61) = const string "concat" (-32)
        move: # (62) = const string "b=" (-64)
        move: # (63) = var b (19)
      end call method: start 60, params 4, ret values 1
    end call method: start 56, params 5, ret values 0


[59] var a, b, c = test()

    begin call
      move: # (56) = var test (17)
      move: # (57) = const null (-1)
    end call: start 56, params 2, ret values 3
    move: var c (22) = # (58)
    move: var b (21) = # (57)
    move: var a (20) = # (56)


[60] print("results from function" "a="..a "b="..b "c="..c)

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "results from function" (-62)
      begin call method
        move: # (59) = var _G (3)
        move: # (60) = const string "concat" (-32)
        move: # (61) = const string "a=" (-63)
        move: # (62) = var a (20)
      end call method: start 59, params 4, ret values 1
      begin call method
        move: # (60) = var _G (3)
        move: # (61) = const string "concat" (-32)
        move: # (62) = const string "b=" (-64)
        move: # (63) = var b (21)
      end call method: start 60, params 4, ret values 1
      begin call method
        move: # (61) = var _G (3)
        move: # (62) = const string "concat" (-32)
        move: # (63) = const string "c=" (-65)
        move: # (64) = var c (22)
      end call method: start 61, params 4, ret values 1
    end call method: start 56, params 6, ret values 0
  end scope ret values 0


[64] print "Object iterator test"

  begin scope
    begin locals 2
      23 obj
      32 range
    end locals
    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Object iterator test" (-66)
    end call method: start 56, params 3, ret values 0


[65] var obj = { null awesome=true 12 "excellent" }

    new object 4: # (56)
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const null (-1)
    end call method: start 57, params 3, ret values 0
    init property: # (56) [const string "awesome" (-67)] = const true (-2)
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const number 12 (-17)
    end call method: start 57, params 3, ret values 0
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const string "excellent" (-68)
    end call method: start 57, params 3, ret values 0
    move: var obj (23) = # (56)


[66] for(var k, v in obj){

    begin scope
      begin locals 4
        24 k
        25 v
        26 #func
        27 #valid
      end locals




      begin call method
        move: # (56) = var obj (23)
        move: # (57) = const string "__iter" (-69)
      end call method: start 56, params 2, ret values 1
      move: var #func (26) = # (56)
      begin loop
        begin call
          move: # (56) = var #func (26)
          move: # (57) = const null (-1)
        end call: start 56, params 2, ret values 3
        move: var v (25) = # (58)
        move: var k (24) = # (57)
        move: var #valid (27) = # (56)

        begin if
          begin bool exp
            move: # (56) = var #valid (27)
            # (56) = [logic not] # (56)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[67] print( k " --> " v )

        begin scope
          begin call method
            move: # (56) = var _E (2)
            move: # (57) = const string "print" (-31)
            move: # (58) = var k (24)
            move: # (59) = const string " --> " (-70)
            move: # (60) = var v (25)
          end call method: start 56, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[70] print "Object iterator test, only keys"

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Object iterator test, only keys" (-71)
    end call method: start 56, params 3, ret values 0


[71] for(k in obj){

    begin scope
      begin locals 2
        28 #func
        29 #valid
      end locals



      begin call method
        move: # (56) = var obj (23)
        move: # (57) = const string "__iter" (-69)
      end call method: start 56, params 2, ret values 1
      move: var #func (28) = # (56)
      begin loop
        begin call
          move: # (56) = var #func (28)
          move: # (57) = const null (-1)
        end call: start 56, params 2, ret values 2
        set property: var _E (2) [const string "k" (-72)] = # (57)
        move: var #valid (29) = # (56)

        begin if
          begin bool exp
            move: # (56) = var #valid (29)
            # (56) = [logic not] # (56)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[72] print k

        begin scope
          begin call method
            move: # (56) = var _E (2)
            move: # (57) = const string "print" (-31)
            get property: # (58) = var _E (2) [const string "k" (-72)]
          end call method: start 56, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[75] print "Array iterator test"

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Array iterator test" (-73)
    end call method: start 56, params 3, ret values 0


[76] Array.__iter = function(){

    begin function
      begin locals 6, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
        4 i
        5 self
      end locals

[77] var i, self = 0, this

      move: # (6) = const number 0 (-5)
      move: var self (5) = param this (1)
      move: var i (4) = # (6)


[78] return function(){

        begin function
          begin locals 5, stack 11
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[79] if(i < #self){

          begin if
            begin bool exp
              get upvalue: # (5) = var i (4 1)
              begin call method
                get upvalue: # (6) = var self (5 1)
                move: # (7) = const string "__len" (-74)
              end call method: start 6, params 2, ret values 1
              # (5) = # (5) [logic <] # (6)
            end bool exp
            begin then

[80] print("... inside of array iter func: " i self[i])

              begin scope
                begin locals 1
                  4 #temp
                end locals
                begin call method
                  move: # (5) = var _E (2)
                  move: # (6) = const string "print" (-31)
                  move: # (7) = const string "... inside of array iter func: " (-75)
                  get upvalue: # (8) = var i (4 1)
                  get upvalue: # (9) = var self (5 1)
                  get upvalue: # (10) = var i (4 1)
                  get property: # (9) = # (9) [# (10)]
                end call method: start 5, params 5, ret values 0


[81] return true, i, self[i++]

                  move: # (5) = const true (-2)
                  get upvalue: # (6) = var i (4 1)
                  get upvalue: # (7) = var self (5 1)
                  get upvalue: var #temp (4) = var i (4 1)
                  get upvalue: # (8) = var i (4 1)
                  # (8) = # (8) [operator +] const number 1 (-11)
                  set upvalue: var i (4 1) = # (8)
                  move: # (8) = var #temp (4)
                  get property: # (7) = # (7) [# (8)]
                return: # (5), count 3
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 3
      return: # (6), count 1
    end function: # (56), index 2

[76] Array.__iter = function(){

    get property: # (57) = var _E (2) [const string "Array" (-76)]
    set property: # (57) [const string "__iter" (-69)] = # (56)


[85] for(k, v in [10 20 30 40 50]){

    begin scope
      begin locals 2
        30 #func
        31 #valid
      end locals




      begin call method
        new array 5: # (56)
        begin call method
          move: # (57) = # (56)
          move: # (58) = const string "push" (-50)
          move: # (59) = const number 10 (-13)
        end call method: start 57, params 3, ret values 0
        begin call method
          move: # (57) = # (56)
          move: # (58) = const string "push" (-50)
          move: # (59) = const number 20 (-14)
        end call method: start 57, params 3, ret values 0
        begin call method
          move: # (57) = # (56)
          move: # (58) = const string "push" (-50)
          move: # (59) = const number 30 (-15)
        end call method: start 57, params 3, ret values 0
        begin call method
          move: # (57) = # (56)
          move: # (58) = const string "push" (-50)
          move: # (59) = const number 40 (-16)
        end call method: start 57, params 3, ret values 0
        begin call method
          move: # (57) = # (56)
          move: # (58) = const string "push" (-50)
          move: # (59) = const number 50 (-18)
        end call method: start 57, params 3, ret values 0
        move: # (57) = const string "__iter" (-69)
      end call method: start 56, params 2, ret values 1
      move: var #func (30) = # (56)
      begin loop
        begin call
          move: # (56) = var #func (30)
          move: # (57) = const null (-1)
        end call: start 56, params 2, ret values 3
        set property: var _E (2) [const string "v" (-77)] = # (58)
        set property: var _E (2) [const string "k" (-72)] = # (57)
        move: var #valid (31) = # (56)

        begin if
          begin bool exp
            move: # (56) = var #valid (31)
            # (56) = [logic not] # (56)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[86] print( k " --> " v )

        begin scope
          begin call method
            move: # (56) = var _E (2)
            move: # (57) = const string "print" (-31)
            get property: # (58) = var _E (2) [const string "k" (-72)]
            move: # (59) = const string " --> " (-70)
            get property: # (60) = var _E (2) [const string "v" (-77)]
          end call method: start 56, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[89] print("Test array prototype:", [1 2 3].prototype === Array)

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Test array prototype:" (-78)
      new array 3: # (59)
      begin call method
        move: # (60) = # (59)
        move: # (61) = const string "push" (-50)
        move: # (62) = const number 1 (-11)
      end call method: start 60, params 3, ret values 0
      begin call method
        move: # (60) = # (59)
        move: # (61) = const string "push" (-50)
        move: # (62) = const number 2 (-4)
      end call method: start 60, params 3, ret values 0
      begin call method
        move: # (60) = # (59)
        move: # (61) = const string "push" (-50)
        move: # (62) = const number 3 (-9)
      end call method: start 60, params 3, ret values 0
      get property: # (59) = # (59) [const string "prototype" (-79)]
      get property: # (60) = var _E (2) [const string "Array" (-76)]
      # (59) = # (59) [logic ===] # (60)
    end call method: start 56, params 4, ret values 0


[91] print "Test range iterator"

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Test range iterator" (-80)
    end call method: start 56, params 3, ret values 0


[92] var range = function(a, b){

    begin function
      begin locals 6, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 b (param)
        4 _E
        5 _G
      end locals

[93] return function(){

        begin function
          begin locals 5, stack 8
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[94] if(a <= b){

          begin if
            begin bool exp
              get upvalue: # (5) = param a (2 1)
              get upvalue: # (6) = param b (3 1)
              # (5) = # (5) [logic <=] # (6)
            end bool exp
            begin then

[95] return true, a++

              begin scope
                begin locals 1
                  4 #temp
                end locals
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = param a (2 1)
                  get upvalue: # (6) = param a (2 1)
                  # (6) = # (6) [operator +] const number 1 (-11)
                  set upvalue: param a (2 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 5
      return: # (6), count 1
    end function: var range (32), index 4


[99] for(var i in range(10, 13)){

    begin scope
      begin locals 3
        33 i
        34 #func
        35 #valid
      end locals



      begin call method
        begin call
          move: # (56) = var range (32)
          move: # (57) = const null (-1)
          move: # (58) = const number 10 (-13)
          move: # (59) = const number 13 (-19)
        end call: start 56, params 4, ret values 1
        move: # (57) = const string "__iter" (-69)
      end call method: start 56, params 2, ret values 1
      move: var #func (34) = # (56)
      begin loop
        begin call
          move: # (56) = var #func (34)
          move: # (57) = const null (-1)
        end call: start 56, params 2, ret values 2
        move: var i (33) = # (57)
        move: var #valid (35) = # (56)

        begin if
          begin bool exp
            move: # (56) = var #valid (35)
            # (56) = [logic not] # (56)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[100] print "i = "..i

        begin scope
          begin call method
            move: # (56) = var _E (2)
            move: # (57) = const string "print" (-31)
            begin call method
              move: # (58) = var _G (3)
              move: # (59) = const string "concat" (-32)
              move: # (60) = const string "i = " (-81)
              move: # (61) = var i (33)
            end call method: start 58, params 4, ret values 1
          end call method: start 56, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end scope ret values 0


[105] print "7 && 9 = "..(7 && 9)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "7 && 9 = " (-82)
      move: # (61) = const number 7 (-12)
      logic &&: # (61)
        move: # (61) = const number 9 (-6)
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[106] print "7 || 9 = "..(7 || 9)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "7 || 9 = " (-83)
      move: # (61) = const number 7 (-12)
      logic ||: # (61)
        move: # (61) = const number 9 (-6)
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[111] var v1 = {x=1 y=2}

  begin scope
    begin locals 2
      36 v1
      37 a
    end locals
    new object 2: # (56)
    init property: # (56) [const string "x" (-48)] = const number 1 (-11)
    init property: # (56) [const string "y" (-49)] = const number 2 (-4)
    move: var v1 (36) = # (56)


[112] var a = {[v1]="vv1" v2="vv2"}

    new object 2: # (56)
    init property: # (56) [var v1 (36)] = const string "vv1" (-84)
    init property: # (56) [const string "v2" (-85)] = const string "vv2" (-86)
    move: var a (37) = # (56)


[113] print( a[v1] a.v2 )

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      get property: # (58) = var a (37) [var v1 (36)]
      get property: # (59) = var a (37) [const string "v2" (-85)]
    end call method: start 56, params 4, ret values 0
  end scope ret values 0


[118] var Person = {

  new object 3: # (56)

[119] __construct = function(firstname, lastname){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 firstname (param)
      3 lastname (param)
      4 _E
      5 _G
    end locals

[120] @firstname = firstname // equal to this.firstname = firstname

    set property: param this (1) [const string "firstname" (-44)] = param firstname (2)

[121] @lastname = lastname // equal to this.lastname = lastname

    set property: param this (1) [const string "lastname" (-46)] = param lastname (3)
  end function: # (58), index 6
  init property: # (56) [const string "__construct" (-87)] = # (58)

[123] walk = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[124] print @fullname .. " is walking!"

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "print" (-31)
        begin call method
          move: # (6) = var _G (3)
          move: # (7) = const string "concat" (-32)
          get property: # (8) = param this (1) [const string "fullname" (-89)]
          move: # (9) = const string " is walking!" (-90)
        end call method: start 6, params 4, ret values 1
      end call method: start 4, params 3, ret values 1
    return: # (4), count 1
  end function: # (58), index 7
  init property: # (56) [const string "walk" (-88)] = # (58)

[126] __get@fullname = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[127] return @firstname .. " " .. @lastname

      begin call method
        move: # (4) = var _G (3)
        move: # (5) = const string "concat" (-32)
        get property: # (6) = param this (1) [const string "firstname" (-44)]
        move: # (7) = const string " " (-92)
        get property: # (8) = param this (1) [const string "lastname" (-46)]
      end call method: start 4, params 5, ret values 1
    return: # (4), count 1
  end function: # (58), index 8
  init property: # (56) [const string "__get@fullname" (-91)] = # (58)
  move: var Person (38) = # (56)


[131] var p = Person("James", "Bond")

  begin call
    move: # (56) = var Person (38)
    move: # (57) = const null (-1)
    move: # (58) = const string "James" (-93)
    move: # (59) = const string "Bond" (-94)
  end call: start 56, params 4, ret values 1
  move: var p (39) = # (56)


[132] p.walk()

  begin call method
    move: # (56) = var p (39)
    move: # (57) = const string "walk" (-88)
  end call method: start 56, params 2, ret values 0


[133] print p

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = var p (39)
  end call method: start 56, params 3, ret values 0


[134] print "p is Person = " .. (p is Person)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "p is Person = " (-95)
      begin call method
        move: # (61) = var _G (3)
        move: # (62) = const string "__is" (-96)
        move: # (63) = var p (39)
        move: # (64) = var Person (38)
      end call method: start 61, params 4, ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[137] var IvanPerson = extends Person {

  begin call method
    move: # (56) = var _G (3)
    move: # (57) = const string "__extends" (-97)
    move: # (58) = var Person (38)
    new object 2: # (59)

[138] __construct = function(){

    begin function
      begin locals 4, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[139] super("Ivan", "Petrov")

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
          move: # (6) = const string "Ivan" (-45)
          move: # (7) = const string "Petrov" (-47)
        end super call: start 4, params 4, ret values 1
      return: # (4), count 1
    end function: # (61), index 9
    init property: # (59) [const string "__construct" (-87)] = # (61)

[141] walk = function(){

    begin function
      begin locals 4, stack 7
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[142] echo "Someone named "

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "echo" (-34)
        move: # (6) = const string "Someone named " (-98)
      end call method: start 4, params 3, ret values 0


[143] super()

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
        end super call: start 4, params 2, ret values 1
      return: # (4), count 1
    end function: # (61), index 10
    init property: # (59) [const string "walk" (-88)] = # (61)
  end call method: start 56, params 4, ret values 1
  move: var IvanPerson (40) = # (56)


[148] var p = IvanPerson()

  begin call
    move: # (56) = var IvanPerson (40)
    move: # (57) = const null (-1)
  end call: start 56, params 2, ret values 1
  move: var p (41) = # (56)


[149] p.walk()

  begin call method
    move: # (56) = var p (41)
    move: # (57) = const string "walk" (-88)
  end call method: start 56, params 2, ret values 0


[150] print p

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = var p (41)
  end call method: start 56, params 3, ret values 0


[152] print "Person.walk.call"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Person.walk.call" (-99)
  end call method: start 56, params 3, ret values 0


[153] Person.walk.call(p)

  begin call method
    get property: # (56) = var Person (38) [const string "walk" (-88)]
    move: # (57) = const string "call" (-100)
    move: # (58) = var p (41)
  end call method: start 56, params 3, ret values 0


[157] function foo(a, b){ return a + b }

  begin function
    begin locals 6, stack 8
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals
      # (6) = param a (2) [operator +] param b (3)
    return: # (6), count 1
  end function: # (56), index 11
  set property: var _E (2) [const string "foo" (-101)] = # (56)


[158] function bar(){ return foo.apply(null, arguments) }

  begin function
    begin locals 4, stack 8
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      begin call method
        get property: # (4) = var _E (2) [const string "foo" (-101)]
        move: # (5) = const string "apply" (-103)
        move: # (6) = const null (-1)
        get arguments: # (7)
      end call method: start 4, params 4, ret values 1
    return: # (4), count 1
  end function: # (56), index 12
  set property: var _E (2) [const string "bar" (-102)] = # (56)


[159] print "should be 5: "..bar(2 3)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "should be 5: " (-104)
      begin call method
        move: # (61) = var _E (2)
        move: # (62) = const string "bar" (-102)
        move: # (63) = const number 2 (-4)
        move: # (64) = const number 3 (-9)
      end call method: start 61, params 4, ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[160] print "should be 9: "..bar(4 5)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "should be 9: " (-105)
      begin call method
        move: # (61) = var _E (2)
        move: # (62) = const string "bar" (-102)
        move: # (63) = const number 4 (-8)
        move: # (64) = const number 5 (-7)
      end call method: start 61, params 4, ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[164] var vec3 = {

  new object 3: # (56)

[165] __construct = function(x, y, z){

  begin function
    begin locals 7, stack 10
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 z (param)
      5 _E
      6 _G
    end locals

[166] this.x = x

    set property: param this (1) [const string "x" (-48)] = param x (2)

[167] this.y = y

    set property: param this (1) [const string "y" (-49)] = param y (3)

[168] this.z = z

    set property: param this (1) [const string "z" (-106)] = param z (4)
  end function: # (58), index 13
  init property: # (56) [const string "__construct" (-87)] = # (58)

[170] __add = {|b| vec3(@x + b.x, @y + b.y, @z + b.z)}

  begin function
    begin locals 5, stack 12
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals
      begin call
        get upvalue: # (5) = var vec3 (42 1)
        move: # (6) = const null (-1)
        get property: # (7) = param this (1) [const string "x" (-48)]
        get property: # (8) = param b (2) [const string "x" (-48)]
        # (7) = # (7) [operator +] # (8)
        get property: # (8) = param this (1) [const string "y" (-49)]
        get property: # (9) = param b (2) [const string "y" (-49)]
        # (8) = # (8) [operator +] # (9)
        get property: # (9) = param this (1) [const string "z" (-106)]
        get property: # (10) = param b (2) [const string "z" (-106)]
        # (9) = # (9) [operator +] # (10)
      end call: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (58), index 14
  init property: # (56) [const string "__add" (-107)] = # (58)

[172] __mul = {|b| vec3(@x * b.x, @y * b.y, @z * b.z)}

  begin function
    begin locals 5, stack 12
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals
      begin call
        get upvalue: # (5) = var vec3 (42 1)
        move: # (6) = const null (-1)
        get property: # (7) = param this (1) [const string "x" (-48)]
        get property: # (8) = param b (2) [const string "x" (-48)]
        # (7) = # (7) [operator *] # (8)
        get property: # (8) = param this (1) [const string "y" (-49)]
        get property: # (9) = param b (2) [const string "y" (-49)]
        # (8) = # (8) [operator *] # (9)
        get property: # (9) = param this (1) [const string "z" (-106)]
        get property: # (10) = param b (2) [const string "z" (-106)]
        # (9) = # (9) [operator *] # (10)
      end call: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (58), index 15
  init property: # (56) [const string "__mul" (-108)] = # (58)
  move: var vec3 (42) = # (56)


[175] var v1 = vec3(10 20 30)

  begin call
    move: # (56) = var vec3 (42)
    move: # (57) = const null (-1)
    move: # (58) = const number 10 (-13)
    move: # (59) = const number 20 (-14)
    move: # (60) = const number 30 (-15)
  end call: start 56, params 5, ret values 1
  move: var v1 (43) = # (56)


[176] var v2 = vec3(1 2 3)

  begin call
    move: # (56) = var vec3 (42)
    move: # (57) = const null (-1)
    move: # (58) = const number 1 (-11)
    move: # (59) = const number 2 (-4)
    move: # (60) = const number 3 (-9)
  end call: start 56, params 5, ret values 1
  move: var v2 (44) = # (56)


[177] var v3 = v1 + v2 * v2

  # (57) = var v2 (44) [operator *] var v2 (44)
  var v3 (45) = var v1 (43) [operator +] # (57)


[178] print "should be {x:11,y:24,z:39} " .. v3

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "should be {x:11,y:24,z:39} " (-109)
      move: # (61) = var v3 (45)
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[181] print "Test properties"

  begin scope
    begin locals 1
      46 a
    end locals
    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Test properties" (-110)
    end call method: start 56, params 3, ret values 0


[183] var a = {

    new object 3: # (56)

[184] _color = "red"

    init property: # (56) [const string "_color" (-111)] = const string "red" (-112)

[185] __get@color = {|| @_color }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        get property: # (4) = param this (1) [const string "_color" (-111)]
      return: # (4), count 1
    end function: # (58), index 16
    init property: # (56) [const string "__get@color" (-113)] = # (58)

[186] __set@color = {|v| @_color = v }

    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 v (param)
        3 _E
        4 _G
      end locals
      set property: param this (1) [const string "_color" (-111)] = param v (2)
    end function: # (58), index 17
    init property: # (56) [const string "__set@color" (-114)] = # (58)
    move: var a (46) = # (56)


[190] print "should be red: " .. a["color"]

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be red: " (-115)
        get property: # (61) = var a (46) [const string "color" (-116)]
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[192] a.color = "blue"

    set property: var a (46) [const string "color" (-116)] = const string "blue" (-117)


[193] print "should be blue: " .. a.color

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be blue: " (-118)
        get property: # (61) = var a (46) [const string "color" (-116)]
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[195] a = {

    new object 4: # (56)

[196] _color = "white"

    init property: # (56) [const string "_color" (-111)] = const string "white" (-119)

[197] __get = function(name){

    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[198] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-116)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[199] return this._color

            get property: # (5) = param this (1) [const string "_color" (-111)]
          return: # (5), count 1
        end then
      end if ret values 0
    end function: # (58), index 18
    init property: # (56) [const string "__get" (-120)] = # (58)

[201] __set = function(name, v){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 v (param)
        4 _E
        5 _G
      end locals

[202] if(name == "color")

      begin if
        begin bool exp
          move: # (6) = param name (2)
          move: # (7) = const string "color" (-116)
          # (6) = # (6) [logic ==] # (7)
        end bool exp
        begin then

[203] this._color = v

          set property: param this (1) [const string "_color" (-111)] = param v (3)
        end then
      end if ret values 0
    end function: # (58), index 19
    init property: # (56) [const string "__set" (-121)] = # (58)

[205] __del = function(name){

    begin function
      begin locals 5, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[206] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-116)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[207] delete this._color

          begin call method
            move: # (5) = var _G (4)
            move: # (6) = const string "__delete" (-123)
            move: # (7) = param this (1)
            move: # (8) = const string "_color" (-111)
          end call method: start 5, params 4, ret values 0
        end then
      end if ret values 0
    end function: # (58), index 20
    init property: # (56) [const string "__del" (-122)] = # (58)
    move: var a (46) = # (56)


[212] print "should be white: " .. a.color

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be white: " (-124)
        get property: # (61) = var a (46) [const string "color" (-116)]
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[213] print "should be null: " .. a.color2

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be null: " (-125)
        get property: # (61) = var a (46) [const string "color2" (-126)]
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[215] a.color = "green"

    set property: var a (46) [const string "color" (-116)] = const string "green" (-127)


[216] print "should be green: " .. a.color

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be green: " (-128)
        get property: # (61) = var a (46) [const string "color" (-116)]
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[218] delete a.color

    begin call method
      move: # (56) = var _G (3)
      move: # (57) = const string "__delete" (-123)
      move: # (58) = var a (46)
      move: # (59) = const string "color" (-116)
    end call method: start 56, params 4, ret values 0


[220] print "should be null: " .. a.color

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be null: " (-125)
        get property: # (61) = var a (46) [const string "color" (-116)]
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[221] print "Test multi dimensional properties"

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Test multi dimensional properties" (-129)
    end call method: start 56, params 3, ret values 0


[223] a = {

    new object 4: # (56)

[224] _matrix = {}

    new object 0: # (58)
    init property: # (56) [const string "_matrix" (-130)] = # (58)

[225] __getdim = function(x, y){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[226] return this._matrix[y*4 + x]

        get property: # (6) = param this (1) [const string "_matrix" (-130)]
        # (7) = param y (3) [operator *] const number 4 (-8)
        # (7) = # (7) [operator +] param x (2)
        get property: # (6) = # (6) [# (7)]
      return: # (6), count 1
    end function: # (58), index 21
    init property: # (56) [const string "__getdim" (-131)] = # (58)

[228] __setdim = function(value, x, y){

    begin function
      begin locals 7, stack 11
        0 _F (param)
        1 this (param)
        2 value (param)
        3 x (param)
        4 y (param)
        5 _E
        6 _G
      end locals

[229] this._matrix[y*4 + x] = value

      get property: # (8) = param this (1) [const string "_matrix" (-130)]
      # (9) = param y (4) [operator *] const number 4 (-8)
      # (9) = # (9) [operator +] param x (3)
      set property: # (8) [# (9)] = param value (2)
    end function: # (58), index 22
    init property: # (56) [const string "__setdim" (-132)] = # (58)

[231] __deldim = function(x, y){

    begin function
      begin locals 6, stack 11
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[232] delete this._matrix[y*4 + x]

      begin call method
        move: # (6) = var _G (5)
        move: # (7) = const string "__delete" (-123)
        get property: # (8) = param this (1) [const string "_matrix" (-130)]
        # (9) = param y (3) [operator *] const number 4 (-8)
        # (9) = # (9) [operator +] param x (2)
      end call method: start 6, params 4, ret values 0
    end function: # (58), index 23
    init property: # (56) [const string "__deldim" (-133)] = # (58)
    move: var a (46) = # (56)


[236] a[1, 2] = 5		// a.__setdim(5, 1, 2)

    begin call method
      move: # (56) = const number 5 (-7)
      move: # (57) = var a (46)
      move: # (58) = const string "__setdim" (-132)
      move: # (59) = # (56)
      move: # (60) = const number 1 (-11)
      move: # (61) = const number 2 (-4)
    end call method: start 57, params 5, ret values 0


[238] print "should be 5: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be 5: " (-104)
        begin call method
          move: # (61) = var a (46)
          move: # (62) = const string "__getdim" (-131)
          move: # (63) = const number 1 (-11)
          move: # (64) = const number 2 (-4)
        end call method: start 61, params 4, ret values 1
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0


[240] delete a[1, 2]	// a.__deldim(1, 2)

    begin call method
      move: # (56) = var a (46)
      move: # (57) = const string "__deldim" (-133)
      move: # (58) = const number 1 (-11)
      move: # (59) = const number 2 (-4)
    end call method: start 56, params 4, ret values 0


[241] print "should be null: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "concat" (-32)
        move: # (60) = const string "should be null: " (-125)
        begin call method
          move: # (61) = var a (46)
          move: # (62) = const string "__getdim" (-131)
          move: # (63) = const number 1 (-11)
          move: # (64) = const number 2 (-4)
        end call method: start 61, params 4, ret values 1
      end call method: start 58, params 4, ret values 1
    end call method: start 56, params 3, ret values 0
  end scope ret values 0


[245] print "Test function inline call"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Test function inline call" (-134)
  end call method: start 56, params 3, ret values 0


[246] print "should be 7: " .. {|a b c| a + b * c }(1 2 3)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "should be 7: " (-135)
      begin call
        begin function
          begin locals 7, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 b (param)
            4 c (param)
            5 _E
            6 _G
          end locals
            # (8) = param b (3) [operator *] param c (4)
            # (7) = param a (2) [operator +] # (8)
          return: # (7), count 1
        end function: # (61), index 24
        move: # (62) = const null (-1)
        move: # (63) = const number 1 (-11)
        move: # (64) = const number 2 (-4)
        move: # (65) = const number 3 (-9)
      end call: start 61, params 5, ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[249] print "Test local vars scope"

  begin scope
    begin locals 1
      47 i
    end locals
    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Test local vars scope" (-136)
    end call method: start 56, params 3, ret values 0


[250] var i = 1;

    move: var i (47) = const number 1 (-11)


[252] var i = i

    begin scope
      begin locals 1
        48 i
      end locals
      move: var i (48) = var i (47)


[253] i++

      var i (48) = var i (48) [operator +] const number 1 (-11)


[254] print i

      begin call method
        move: # (56) = var _E (2)
        move: # (57) = const string "print" (-31)
        move: # (58) = var i (48)
      end call method: start 56, params 3, ret values 0
    end scope ret values 0


[256] print i

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = var i (47)
    end call method: start 56, params 3, ret values 0
  end scope ret values 0


[259] print "Test debuglocals"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Test debuglocals" (-137)
  end call method: start 56, params 3, ret values 0


[266] }(10)

  begin call

[260] function(a){

    begin function
      begin locals 7, stack 12
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
        5 c
      end locals

[261] var c = a * 2;

      var c (5) = param a (2) [operator *] const number 2 (-4)

[263] var c = a - 1

      begin scope
        begin locals 1
          6 c
        end locals
        var c (6) = param a (2) [operator -] const number 1 (-11)


[264] print debuglocals

        begin call method
          move: # (7) = var _E (3)
          move: # (8) = const string "print" (-31)
          new object 13: # (9)
          get upvalue: # (11) = var Person (38 1)
          init property: # (9) [const string "Person" (-138)] = # (11)
          get upvalue: # (11) = var IvanPerson (40 1)
          init property: # (9) [const string "IvanPerson" (-139)] = # (11)
          get upvalue: # (11) = var p (41 1)
          init property: # (9) [const string "p" (-140)] = # (11)
          get upvalue: # (11) = var vec3 (42 1)
          init property: # (9) [const string "vec3" (-141)] = # (11)
          get upvalue: # (11) = var v1 (43 1)
          init property: # (9) [const string "v1" (-142)] = # (11)
          get upvalue: # (11) = var v2 (44 1)
          init property: # (9) [const string "v2" (-85)] = # (11)
          get upvalue: # (11) = var v3 (45 1)
          init property: # (9) [const string "v3" (-143)] = # (11)
          get upvalue: # (11) = var transform (50 1)
          init property: # (9) [const string "transform" (-144)] = # (11)
          get upvalue: # (11) = var core (51 1)
          init property: # (9) [const string "core" (-145)] = # (11)
          get upvalue: # (11) = var __planet (52 1)
          init property: # (9) [const string "__planet" (-146)] = # (11)
          get upvalue: # (11) = var testFunc (53 1)
          init property: # (9) [const string "testFunc" (-147)] = # (11)
          init property: # (9) [const string "a" (-148)] = param a (2)
          init property: # (9) [const string "c" (-149)] = var c (6)
        end call method: start 7, params 3, ret values 0
      end scope ret values 0
    end function: # (56), index 25

[266] }(10)

    move: # (57) = const null (-1)
    move: # (58) = const number 10 (-13)
  end call: start 56, params 3, ret values 0


[268] print "Script environment"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Script environment" (-150)
  end call method: start 56, params 3, ret values 0


[269] print _E

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = var _E (2)
  end call method: start 56, params 3, ret values 0


[271] print "Math functions"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Math functions" (-151)
  end call method: start 56, params 3, ret values 0


[272] var a = [math.random() math.random() math.random() math.random() math.random() math.random()]

  new array 6: # (56)
  begin call method
    move: # (57) = # (56)
    move: # (58) = const string "push" (-50)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "random" (-153)
    end call method: start 59, params 2, ret values 1
  end call method: start 57, params 3, ret values 0
  begin call method
    move: # (57) = # (56)
    move: # (58) = const string "push" (-50)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "random" (-153)
    end call method: start 59, params 2, ret values 1
  end call method: start 57, params 3, ret values 0
  begin call method
    move: # (57) = # (56)
    move: # (58) = const string "push" (-50)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "random" (-153)
    end call method: start 59, params 2, ret values 1
  end call method: start 57, params 3, ret values 0
  begin call method
    move: # (57) = # (56)
    move: # (58) = const string "push" (-50)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "random" (-153)
    end call method: start 59, params 2, ret values 1
  end call method: start 57, params 3, ret values 0
  begin call method
    move: # (57) = # (56)
    move: # (58) = const string "push" (-50)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "random" (-153)
    end call method: start 59, params 2, ret values 1
  end call method: start 57, params 3, ret values 0
  begin call method
    move: # (57) = # (56)
    move: # (58) = const string "push" (-50)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "random" (-153)
    end call method: start 59, params 2, ret values 1
  end call method: start 57, params 3, ret values 0
  move: var a (49) = # (56)


[273] print("random" a)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "random" (-153)
    move: # (59) = var a (49)
  end call method: start 56, params 4, ret values 0


[276] delete Array.__iter // delete our iterator, use default one

  begin call method
    move: # (56) = var _G (3)
    move: # (57) = const string "__delete" (-123)
    get property: # (58) = var _E (2) [const string "Array" (-76)]
    move: # (59) = const string "__iter" (-69)
  end call method: start 56, params 4, ret values 0


[278] var transform = function(a f){

  begin function
    begin locals 11, stack 14
      0 _F (param)
      1 this (param)
      2 a (param)
      3 f (param)
      4 _E
      5 _G
      6 r
    end locals

[279] var r = arrayOf(a) ? [] : {}

    begin question
      begin bool exp
        begin call method
          move: # (11) = var _E (4)
          move: # (12) = const string "arrayOf" (-154)
          move: # (13) = param a (2)
        end call method: start 11, params 3, ret values 1
      end bool exp
      begin then value
        new array 0: # (11)
      end then value
      begin else value
        new object 0: # (11)
      end else value
    end question ret values 1
    move: var r (6) = # (11)


[280] for(var i, v in a){

    begin scope
      begin locals 4
        7 i
        8 v
        9 #func
        10 #valid
      end locals




      begin call method
        move: # (11) = param a (2)
        move: # (12) = const string "__iter" (-69)
      end call method: start 11, params 2, ret values 1
      move: var #func (9) = # (11)
      begin loop
        begin call
          move: # (11) = var #func (9)
          move: # (12) = const null (-1)
        end call: start 11, params 2, ret values 3
        move: var v (8) = # (13)
        move: var i (7) = # (12)
        move: var #valid (10) = # (11)

        begin if
          begin bool exp
            move: # (11) = var #valid (10)
            # (11) = [logic not] # (11)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[281] r[i] = f(v)

        begin scope
          begin call
            move: # (11) = param f (3)
            move: # (12) = const null (-1)
            move: # (13) = var v (8)
          end call: start 11, params 3, ret values 1
          set property: var r (6) [var i (7)] = # (11)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[283] return r

    return: var r (6), count 1
  end function: var transform (50), index 26


[285] a = transform(a, {|a| a*100})

  begin call
    move: # (56) = var transform (50)
    move: # (57) = const null (-1)
    move: # (58) = var a (49)
    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
      end locals
        # (5) = param a (2) [operator *] const number 100 (-20)
      return: # (5), count 1
    end function: # (59), index 27
  end call: start 56, params 4, ret values 1
  move: var a (49) = # (56)


[286] print("mult 100" a)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "mult 100" (-155)
    move: # (59) = var a (49)
  end call method: start 56, params 4, ret values 0


[287] print("math.ceil" transform(a, math.ceil))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.ceil" (-156)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      get property: # (62) = var _E (2) [const string "math" (-152)]
      get property: # (62) = # (62) [const string "ceil" (-157)]
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[288] print("math.floor" transform(a, math.floor))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.floor" (-158)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      get property: # (62) = var _E (2) [const string "math" (-152)]
      get property: # (62) = # (62) [const string "floor" (-159)]
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[289] print("math.round(-1)" transform(a, {|a| math.round(a, -1)}))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.round(-1)" (-160)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-152)]
            move: # (6) = const string "round" (-161)
            move: # (7) = param a (2)
            # (8) = [neg] const number 1 (-11)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (62), index 28
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[290] print("math.round(2)" transform(a, {|a| math.round(a, 2)}))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.round(2)" (-162)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-152)]
            move: # (6) = const string "round" (-161)
            move: # (7) = param a (2)
            move: # (8) = const number 2 (-4)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (62), index 29
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[291] print("math.sin" transform(a, math.sin))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.sin" (-163)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      get property: # (62) = var _E (2) [const string "math" (-152)]
      get property: # (62) = # (62) [const string "sin" (-164)]
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[292] print("math.cos" transform(a, math.cos))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.cos" (-165)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      get property: # (62) = var _E (2) [const string "math" (-152)]
      get property: # (62) = # (62) [const string "cos" (-166)]
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[293] print("math.tan" transform(a, math.tan))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "math.tan" (-167)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      get property: # (62) = var _E (2) [const string "math" (-152)]
      get property: # (62) = # (62) [const string "tan" (-168)]
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[295] _E = math

  get property: var _E (2) = var _E (2) [const string "math" (-152)]


[296] print "Extend local environment to be able to use math module without namespace"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Extend local environment to be able to use math module without namespace" (-169)
  end call method: start 56, params 3, ret values 0


[297] print("round(3)" transform(a, {|a| round(a, 3)}))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "round(3)" (-170)
    begin call
      move: # (59) = var transform (50)
      move: # (60) = const null (-1)
      move: # (61) = var a (49)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "round" (-161)
            move: # (7) = param a (2)
            move: # (8) = const number 3 (-9)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (62), index 30
    end call: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[298] print("PI" PI)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "PI" (-171)
    get property: # (59) = var _E (2) [const string "PI" (-171)]
  end call method: start 56, params 4, ret values 0


[300] var core = require("core")

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "require" (-172)
    move: # (58) = const string "core" (-145)
  end call method: start 56, params 3, ret values 1
  move: var core (51) = # (56)


[301] print("core.eval(math.round(13.5))" core.eval("math.round(13.5)"))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "core.eval(math.round(13.5))" (-173)
    begin call method
      move: # (59) = var core (51)
      move: # (60) = const string "eval" (-174)
      move: # (61) = const string "math.round(13.5)" (-175)
    end call method: start 59, params 3, ret values 1
  end call method: start 56, params 4, ret values 0


[302] print("eval(math.round(13.5))" eval("math.round(13.5)"))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "eval(math.round(13.5))" (-176)
    begin call method
      move: # (59) = var _E (2)
      move: # (60) = const string "eval" (-174)
      move: # (61) = const string "math.round(13.5)" (-175)
    end call method: start 59, params 3, ret values 1
  end call method: start 56, params 4, ret values 0


[303] print("==============")

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "==============" (-177)
  end call method: start 56, params 3, ret values 0


[304] print("Next: math namespace is not used\nbut eval executes code in global environment by default\nso eval(round(13.5))" eval("round(13.5)"))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Next: math namespace is not used
but eval execut...obal environment by default
so eval(round(13.5))" (-178)
    begin call method
      move: # (59) = var _E (2)
      move: # (60) = const string "eval" (-174)
      move: # (61) = const string "round(13.5)" (-179)
    end call method: start 59, params 3, ret values 1
  end call method: start 56, params 4, ret values 0


[305] print("run eval in space of the current environment (round(13.5))" eval("round(13.5)", _E))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "run eval in space of the current environment (round(13.5))" (-180)
    begin call method
      move: # (59) = var _E (2)
      move: # (60) = const string "eval" (-174)
      move: # (61) = const string "round(13.5)" (-179)
      move: # (62) = var _E (2)
    end call method: start 59, params 4, ret values 1
  end call method: start 56, params 4, ret values 0


[307] var __planet = "Mars"

  move: var __planet (52) = const string "Mars" (-181)


[308] function get planet(){ return __planet }

  begin function
    begin locals 4, stack 5
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      get upvalue: # (4) = var __planet (52 1)
    return: # (4), count 1
  end function: # (56), index 31
  set property: var _E (2) [const string "__get@planet" (-182)] = # (56)


[309] function set planet(a){ __planet = a }

  begin function
    begin locals 5, stack 6
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
    end locals
    set upvalue: var __planet (52 1) = param a (2)
  end function: # (56), index 32
  set property: var _E (2) [const string "__set@planet" (-183)] = # (56)


[311] print "Planet should be Mars: "..planet

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "Planet should be Mars: " (-184)
      get property: # (61) = var _E (2) [const string "planet" (-185)]
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[312] planet = "Mercury"

  move: # (56) = const string "Mercury" (-186)
  set property: var _E (2) [const string "planet" (-185)] = # (56)


[313] print "Planet should be Mercury: "..planet

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "Planet should be Mercury: " (-187)
      get property: # (61) = var _E (2) [const string "planet" (-185)]
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[315] function compareValues(a, b){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
      6 x
      7 y
    end locals

[316] var x, y = numberof(a), numberof(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "numberof" (-189)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "numberof" (-189)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[317] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[318] x, y = stringof(a), stringof(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "stringof" (-190)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "stringof" (-190)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[319] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[320] return a <=> b

      # (8) = param a (2) [operator <=>] param b (3)
    return: # (8), count 1
  end function: # (56), index 33
  set property: var _E (2) [const string "compareValues" (-188)] = # (56)


[323] function Object.__getdim(i, count){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 i (param)
      3 count (param)
      4 _E
      5 _G
    end locals

[324] return this.sub(i, count)

      begin call method
        move: # (6) = param this (1)
        move: # (7) = const string "sub" (-191)
        move: # (8) = param i (2)
        move: # (9) = param count (3)
      end call method: start 6, params 4, ret values 1
    return: # (6), count 1
  end function: # (56), index 34

[323] function Object.__getdim(i, count){

  get property: # (57) = var _E (2) [const string "Object" (-192)]
  set property: # (57) [const string "__getdim" (-131)] = # (56)


[327] function String.__get(i){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 i (param)
      3 _E
      4 _G
    end locals

[328] return this.sub(i, 1)

      begin call method
        move: # (5) = param this (1)
        move: # (6) = const string "sub" (-191)
        move: # (7) = param i (2)
        move: # (8) = const number 1 (-11)
      end call method: start 5, params 4, ret values 1
    return: # (5), count 1
  end function: # (56), index 35

[327] function String.__get(i){

  get property: # (57) = var _E (2) [const string "String" (-193)]
  set property: # (57) [const string "__get" (-120)] = # (56)


[331] print "Sorted array"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Sorted array" (-194)
  end call method: start 56, params 3, ret values 0


[332] print([9 4 0 276 15 39 3].sort())

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new array 7: # (58)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 9 (-6)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 0 (-5)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 276 (-21)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 39 (-23)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
    end call method: start 58, params 2, ret values 1
  end call method: start 56, params 3, ret values 0


[334] function Object.do(func){

  begin function
    begin locals 5, stack 8
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[335] func.call(this)

    begin call method
      move: # (5) = param func (2)
      move: # (6) = const string "call" (-100)
      move: # (7) = param this (1)
    end call method: start 5, params 3, ret values 0


[336] return this

    return: param this (1), count 1
  end function: # (56), index 36

[334] function Object.do(func){

  get property: # (57) = var _E (2) [const string "Object" (-192)]
  set property: # (57) [const string "do" (-196)] = # (56)


[339] print "User sorted array by keys"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "User sorted array by keys" (-197)
  end call method: start 56, params 3, ret values 0


[340] print([0 1 2 3 4 5 6 7 8 9].do {||

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new array 10: # (58)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 0 (-5)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 1 (-11)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 2 (-4)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 5 (-7)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 6 (-24)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 7 (-12)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 8 (-25)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 9 (-6)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "do" (-196)
      begin function
        begin locals 10, stack 13
          0 _F (param)
          1 this (param)
          2 _E
          3 _G
          4 keys
          5 values
        end locals

[341] var keys = this.keys.sort{|a b| (a % 3) <=> (b % 3)}

        begin call method
          get property: # (10) = param this (1) [const string "keys" (-198)]
          move: # (11) = const string "sort" (-195)
          begin function
            begin locals 6, stack 9
              0 _F (param)
              1 this (param)
              2 a (param)
              3 b (param)
              4 _E
              5 _G
            end locals
              # (6) = param a (2) [operator %] const number 3 (-9)
              # (7) = param b (3) [operator %] const number 3 (-9)
              # (6) = # (6) [operator <=>] # (7)
            return: # (6), count 1
          end function: # (12), index 38
        end call method: start 10, params 3, ret values 1
        move: var keys (4) = # (10)

[342] var values = this.clone()

        begin call method
          move: # (10) = param this (1)
          move: # (11) = const string "clone" (-199)
        end call method: start 10, params 2, ret values 1
        move: var values (5) = # (10)

[343] for(var k, v in keys){

        begin scope
          begin locals 4
            6 k
            7 v
            8 #func
            9 #valid
          end locals




          begin call method
            move: # (10) = var keys (4)
            move: # (11) = const string "__iter" (-69)
          end call method: start 10, params 2, ret values 1
          move: var #func (8) = # (10)
          begin loop
            begin call
              move: # (10) = var #func (8)
              move: # (11) = const null (-1)
            end call: start 10, params 2, ret values 3
            move: var v (7) = # (12)
            move: var k (6) = # (11)
            move: var #valid (9) = # (10)

            begin if
              begin bool exp
                move: # (10) = var #valid (9)
                # (10) = [logic not] # (10)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[344] this[v] = values[v]

            begin scope
              get property: # (10) = var values (5) [var v (7)]
              set property: param this (1) [var v (7)] = # (10)
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end function: # (60), index 37
    end call method: start 58, params 3, ret values 1
  end call method: start 56, params 3, ret values 0


[348] print "Sorted array (reverse)"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Sorted array (reverse)" (-200)
  end call method: start 56, params 3, ret values 0


[349] print([9 4 0 276 15 39 3].sort{|a b| b <=> a})

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new array 7: # (58)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 9 (-6)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 0 (-5)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 276 (-21)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 39 (-23)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (60), index 39
    end call method: start 58, params 3, ret values 1
  end call method: start 56, params 3, ret values 0


[351] print "User sorted array"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "User sorted array" (-201)
  end call method: start 56, params 3, ret values 0


[352] print([9 4 0 276 15 39 3].sort{|a b| (a % 10) <=> (b % 10)})

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new array 7: # (58)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 9 (-6)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 0 (-5)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 276 (-21)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 39 (-23)
      end call method: start 59, params 3, ret values 0
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
      begin function
        begin locals 6, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param a (2) [operator %] const number 10 (-13)
          # (7) = param b (3) [operator %] const number 10 (-13)
          # (6) = # (6) [operator <=>] # (7)
        return: # (6), count 1
      end function: # (60), index 40
    end call method: start 58, params 3, ret values 1
  end call method: start 56, params 3, ret values 0


[354] print "Sorted object by values"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Sorted object by values" (-202)
  end call method: start 56, params 3, ret values 0


[355] print({b=9 4 d=0 c=276 15 a=39 3}.sort())

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new object 7: # (58)
      init property: # (58) [const string "b" (-203)] = const number 9 (-6)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "d" (-204)] = const number 0 (-5)
      init property: # (58) [const string "c" (-149)] = const number 276 (-21)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "a" (-148)] = const number 39 (-23)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
    end call method: start 58, params 2, ret values 1
  end call method: start 56, params 3, ret values 0


[357] print "Sorted object by values (reverse)"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Sorted object by values (reverse)" (-205)
  end call method: start 56, params 3, ret values 0


[358] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b| b <=> a})

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new object 7: # (58)
      init property: # (58) [const string "b" (-203)] = const number 9 (-6)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "d" (-204)] = const number 0 (-5)
      init property: # (58) [const string "c" (-149)] = const number 276 (-21)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "a" (-148)] = const number 39 (-23)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (60), index 41
    end call method: start 58, params 3, ret values 1
  end call method: start 56, params 3, ret values 0


[360] print "Sorted object by keys"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Sorted object by keys" (-206)
  end call method: start 56, params 3, ret values 0


[361] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(ka kb) })

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new object 7: # (58)
      init property: # (58) [const string "b" (-203)] = const number 9 (-6)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "d" (-204)] = const number 0 (-5)
      init property: # (58) [const string "c" (-149)] = const number 276 (-21)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "a" (-148)] = const number 39 (-23)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-188)
            move: # (10) = param ka (4)
            move: # (11) = param kb (5)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (60), index 42
    end call method: start 58, params 3, ret values 1
  end call method: start 56, params 3, ret values 0


[363] print "Sorted object by keys (reverse)"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Sorted object by keys (reverse)" (-207)
  end call method: start 56, params 3, ret values 0


[364] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(kb ka) })

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      new object 7: # (58)
      init property: # (58) [const string "b" (-203)] = const number 9 (-6)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 4 (-8)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "d" (-204)] = const number 0 (-5)
      init property: # (58) [const string "c" (-149)] = const number 276 (-21)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 15 (-22)
      end call method: start 59, params 3, ret values 0
      init property: # (58) [const string "a" (-148)] = const number 39 (-23)
      begin call method
        move: # (59) = # (58)
        move: # (60) = const string "push" (-50)
        move: # (61) = const number 3 (-9)
      end call method: start 59, params 3, ret values 0
      move: # (59) = const string "sort" (-195)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-188)
            move: # (10) = param kb (5)
            move: # (11) = param ka (4)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (60), index 43
    end call method: start 58, params 3, ret values 1
  end call method: start 56, params 3, ret values 0


[366] var function testFunc(arg1, arg2){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 arg1 (param)
      3 arg2 (param)
      4 _E
      5 _G
      6 testFunc2
      7 i
    end locals

[367] var testFunc2 = {|arg1 arg2 arg3|

    begin function
      begin locals 9, stack 13
        0 _F (param)
        1 this (param)
        2 arg1 (param)
        3 arg2 (param)
        4 arg3 (param)
        5 _E
        6 _G
        7 testFunc3
        8 i
      end locals

[368] var testFunc3 = {|arg1|

      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 arg1 (param)
          3 _E
          4 _G
          5 i
        end locals

[369] printBackTrace()

        begin call method
          move: # (6) = var _E (3)
          move: # (7) = const string "printBackTrace" (-208)
        end call method: start 6, params 2, ret values 0

[370] var i = 0 // add some code at the end of function to prevent tail call

        move: var i (5) = const number 0 (-5)
      end function: var testFunc3 (7), index 46

[372] testFunc3(1, 2)

      begin call
        move: # (9) = var testFunc3 (7)
        move: # (10) = const null (-1)
        move: # (11) = const number 1 (-11)
        move: # (12) = const number 2 (-4)
      end call: start 9, params 4, ret values 0

[373] var i = 0 // add some code at the end of function to prevent tail call

      move: var i (8) = const number 0 (-5)
    end function: var testFunc2 (6), index 45

[375] testFunc2(1, 2)

    begin call
      move: # (8) = var testFunc2 (6)
      move: # (9) = const null (-1)
      move: # (10) = const number 1 (-11)
      move: # (11) = const number 2 (-4)
    end call: start 8, params 4, ret values 0

[376] var i = 0 // add some code at the end of function to prevent tail call

    move: var i (7) = const number 0 (-5)
  end function: var testFunc (53), index 44


[378] print "Test back trace"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Test back trace" (-209)
  end call method: start 56, params 3, ret values 0


[379] testFunc(1, 2)

  begin call
    move: # (56) = var testFunc (53)
    move: # (57) = const null (-1)
    move: # (58) = const number 1 (-11)
    move: # (59) = const number 2 (-4)
  end call: start 56, params 4, ret values 0


[381] print "Test 5 < 10 ? 7 : 3 --> "..(5 < 10 ? 7 : 3)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "Test 5 < 10 ? 7 : 3 --> " (-210)
      begin question
        begin bool exp
          move: # (61) = const number 5 (-7)
          move: # (62) = const number 10 (-13)
          # (61) = # (61) [logic <] # (62)
        end bool exp
        begin then value
          move: # (61) = const number 7 (-12)
        end then value
        begin else value
          move: # (61) = const number 3 (-9)
        end else value
      end question ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[382] print "Test in operator (should be true) "..("name" in {x = 0 y = 0 name = 0 index = 0})

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "Test in operator (should be true) " (-211)
      begin call method
        move: # (61) = var _G (3)
        move: # (62) = const string "__in" (-212)
        move: # (63) = const string "name" (-213)
        new object 4: # (64)
        init property: # (64) [const string "x" (-48)] = const number 0 (-5)
        init property: # (64) [const string "y" (-49)] = const number 0 (-5)
        init property: # (64) [const string "name" (-213)] = const number 0 (-5)
        init property: # (64) [const string "index" (-214)] = const number 0 (-5)
      end call method: start 61, params 4, ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[384] print "Test _F and recursion"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "Test _F and recursion" (-215)
  end call method: start 56, params 3, ret values 0


[385] print "factorial(20) = " .. {|a| a <= 1 ? 1 : a*_F(a-1)}(20)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    begin call method
      move: # (58) = var _G (3)
      move: # (59) = const string "concat" (-32)
      move: # (60) = const string "factorial(20) = " (-216)
      begin call
        begin function
          begin locals 5, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 _E
            4 _G
          end locals
            begin question
              begin bool exp
                move: # (5) = param a (2)
                move: # (6) = const number 1 (-11)
                # (5) = # (5) [logic <=] # (6)
              end bool exp
              begin then value
                move: # (5) = const number 1 (-11)
              end then value
              begin else value
                begin call
                  move: # (6) = param _F (0)
                  move: # (7) = const null (-1)
                  # (8) = param a (2) [operator -] const number 1 (-11)
                end call: start 6, params 3, ret values 1
                # (5) = param a (2) [operator *] # (6)
              end else value
            end question ret values 1
          return: # (5), count 1
        end function: # (61), index 47
        move: # (62) = const null (-1)
        move: # (63) = const number 20 (-14)
      end call: start 61, params 3, ret values 1
    end call method: start 58, params 4, ret values 1
  end call method: start 56, params 3, ret values 0


[387] function Object.each(func){

  begin function
    begin locals 9, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[388] for(var k, v in this){

    begin scope
      begin locals 4
        5 k
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = param this (1)
        move: # (10) = const string "__iter" (-69)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var k (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[389] func(v, k)

        begin scope
          begin call
            move: # (9) = param func (2)
            move: # (10) = const null (-1)
            move: # (11) = var v (6)
            move: # (12) = var k (5)
          end call: start 9, params 4, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (56), index 48

[387] function Object.each(func){

  get property: # (57) = var _E (2) [const string "Object" (-192)]
  set property: # (57) [const string "each" (-217)] = # (56)


[393] [10 20 30 40].each {|a|

  begin call method
    new array 4: # (56)
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const number 10 (-13)
    end call method: start 57, params 3, ret values 0
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const number 20 (-14)
    end call method: start 57, params 3, ret values 0
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const number 30 (-15)
    end call method: start 57, params 3, ret values 0
    begin call method
      move: # (57) = # (56)
      move: # (58) = const string "push" (-50)
      move: # (59) = const number 40 (-16)
    end call method: start 57, params 3, ret values 0
    move: # (57) = const string "each" (-217)
    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
      end locals

[394] print a

        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-31)
          move: # (7) = param a (2)
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (58), index 49
  end call method: start 56, params 3, ret values 0


[414] printf("def: %v, decimal: %d, string: %s, def:%v\n", "John", 123.45678, 123.45678, 123.45678)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "printf" (-218)
    move: # (58) = const string "def: %v, decimal: %d, string: %s, def:%v
" (-219)
    move: # (59) = const string "John" (-220)
    move: # (60) = const number 123.457 (-26)
    move: # (61) = const number 123.457 (-26)
    move: # (62) = const number 123.457 (-26)
  end call method: start 56, params 7, ret values 0


[415] printf("number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f\n", math.round(123.45678, 2), math.round(123.45678, 2), 123.45678, 123.45678)

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "printf" (-218)
    move: # (58) = const string "number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f
" (-221)
    begin call method
      get property: # (59) = var _E (2) [const string "math" (-152)]
      move: # (60) = const string "round" (-161)
      move: # (61) = const number 123.457 (-26)
      move: # (62) = const number 2 (-4)
    end call method: start 59, params 4, ret values 1
    begin call method
      get property: # (60) = var _E (2) [const string "math" (-152)]
      move: # (61) = const string "round" (-161)
      move: # (62) = const number 123.457 (-26)
      move: # (63) = const number 2 (-4)
    end call method: start 60, params 4, ret values 1
    move: # (61) = const number 123.457 (-26)
    move: # (62) = const number 123.457 (-26)
  end call method: start 56, params 7, ret values 0


[416] printf("%s\n", sprintf("number: %n, float(%%.-2f): %.-2f", 12876.54321, 12876.54321))

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "printf" (-218)
    move: # (58) = const string "%s
" (-222)
    begin call method
      move: # (59) = var _E (2)
      move: # (60) = const string "sprintf" (-223)
      move: # (61) = const string "number: %n, float(%%.-2f): %.-2f" (-224)
      move: # (62) = const number 12876.5 (-27)
      move: # (63) = const number 12876.5 (-27)
    end call method: start 59, params 5, ret values 1
  end call method: start 56, params 4, ret values 0


[419] print "Buffer usage"

  begin scope
    begin locals 1
      54 buf
    end locals
    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "Buffer usage" (-225)
    end call method: start 56, params 3, ret values 0


[420] var buf = Buffer(123, "abc", "def")

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "Buffer" (-226)
      move: # (58) = const number 123 (-28)
      move: # (59) = const string "abc" (-227)
      move: # (60) = const string "def" (-228)
    end call method: start 56, params 5, ret values 1
    move: var buf (54) = # (56)


[421] buf.append(4.5, "-append")

    begin call method
      move: # (56) = var buf (54)
      move: # (57) = const string "append" (-229)
      move: # (58) = const number 4.5 (-29)
      move: # (59) = const string "-append" (-230)
    end call method: start 56, params 4, ret values 0


[422] buf.printf("-%v\n", 123.4567)

    begin call method
      move: # (56) = var buf (54)
      move: # (57) = const string "printf" (-218)
      move: # (58) = const string "-%v
" (-231)
      move: # (59) = const number 123.457 (-30)
    end call method: start 56, params 4, ret values 0


[423] str = toString(buf)

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "toString" (-233)
      move: # (58) = var buf (54)
    end call method: start 56, params 3, ret values 1
    set property: var _E (2) [const string "str" (-232)] = # (56)


[424] echo str

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "echo" (-34)
      get property: # (58) = var _E (2) [const string "str" (-232)]
    end call method: start 56, params 3, ret values 0
  end scope ret values 0


[428] print "File usage"

  begin scope
    begin locals 1
      55 f
    end locals
    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "print" (-31)
      move: # (58) = const string "File usage" (-234)
    end call method: start 56, params 3, ret values 0


[429] var f = File(__FILE__, "rb")

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "File" (-235)
      begin call method
        move: # (58) = var _G (3)
        move: # (59) = const string "__getfilename" (-36)
      end call method: start 58, params 2, ret values 1
      move: # (59) = const string "rb" (-236)
    end call method: start 56, params 4, ret values 1
    move: var f (55) = # (56)


[430] str = f.read(100)

    begin call method
      move: # (56) = var f (55)
      move: # (57) = const string "read" (-237)
      move: # (58) = const number 100 (-20)
    end call method: start 56, params 3, ret values 1
    set property: var _E (2) [const string "str" (-232)] = # (56)


[432] echo str

    begin call method
      move: # (56) = var _E (2)
      move: # (57) = const string "echo" (-34)
      get property: # (58) = var _E (2) [const string "str" (-232)]
    end call method: start 56, params 3, ret values 0
  end scope ret values 0


[435] function Number.times(func){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[436] for(var i = 0; i < this; i++){

    begin scope
      begin locals 1
        5 i
      end locals
      move: var i (5) = const number 0 (-5)

      begin loop
        begin if
          begin bool exp
            move: # (6) = var i (5)
            move: # (7) = param this (1)
            # (6) = # (6) [logic <] # (7)
            # (6) = [logic not] # (6)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[437] func(i)

        begin scope
          begin call
            move: # (6) = param func (2)
            move: # (7) = const null (-1)
            move: # (8) = var i (5)
          end call: start 6, params 3, ret values 0
        end scope ret values 0


[436] for(var i = 0; i < this; i++){

        var i (5) = var i (5) [operator +] const number 1 (-11)
      end loop ret values 0
    end scope ret values 0
  end function: # (56), index 50

[435] function Number.times(func){

  get property: # (57) = var _E (2) [const string "Number" (-238)]
  set property: # (57) [const string "times" (-239)] = # (56)


[440] (10).times {|i| print "step: "..i }

  begin call method
    move: # (56) = const number 10 (-13)
    move: # (57) = const string "times" (-239)
    begin function
      begin locals 5, stack 11
        0 _F (param)
        1 this (param)
        2 i (param)
        3 _E
        4 _G
      end locals
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-31)
          begin call method
            move: # (7) = var _G (4)
            move: # (8) = const string "concat" (-32)
            move: # (9) = const string "step: " (-240)
            move: # (10) = param i (2)
          end call method: start 7, params 4, ret values 1
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (58), index 51
  end call method: start 56, params 3, ret values 0


[442] terminate()

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "terminate" (-241)
  end call method: start 56, params 2, ret values 0


[443] print "This text is never printed"

  begin call method
    move: # (56) = var _E (2)
    move: # (57) = const string "print" (-31)
    move: # (58) = const string "This text is never printed" (-242)
  end call method: start 56, params 3, ret values 0

  return: var _E (2), count 1
end function: {main} (0), index 0
