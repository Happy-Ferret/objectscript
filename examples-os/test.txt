
[FILE] ../../examples-os/test.os
[1] print {

begin function
  begin locals 77, stack 90
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    37 Person
    38 p
    39 IvanPerson
    40 p
    41 vec3
    42 v1
    43 v2
    44 v3
    48 a
    49 core
    50 __planet
    59 testFunc
    71 conn
    72 stmt
  end locals
  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    new object 4: # (79)

[2] dirname = path.dirname(__FILE__)

    begin call method
      get property: # (81) = var _E (2) [const string "path" (-33)]
      move: # (82) = const string "dirname" (-32)
      begin call method
        move: # (83) = var _G (3)
        move: # (84) = const string "__getfilename" (-34)
      end call method: start 83, params 2, ret values 1
    end call method: start 81, params 3, ret values 1
    init property: # (79) [const string "dirname" (-32)] = # (81)

[3] basename = path.basename(__FILE__)

    begin call method
      get property: # (81) = var _E (2) [const string "path" (-33)]
      move: # (82) = const string "basename" (-35)
      begin call method
        move: # (83) = var _G (3)
        move: # (84) = const string "__getfilename" (-34)
      end call method: start 83, params 2, ret values 1
    end call method: start 81, params 3, ret values 1
    init property: # (79) [const string "basename" (-35)] = # (81)

[4] extname = path.extname(__FILE__)

    begin call method
      get property: # (81) = var _E (2) [const string "path" (-33)]
      move: # (82) = const string "extname" (-36)
      begin call method
        move: # (83) = var _G (3)
        move: # (84) = const string "__getfilename" (-34)
      end call method: start 83, params 2, ret values 1
    end call method: start 81, params 3, ret values 1
    init property: # (79) [const string "extname" (-36)] = # (81)

[5] resolve = path.resolve("test.db")

    begin call method
      get property: # (81) = var _E (2) [const string "path" (-33)]
      move: # (82) = const string "resolve" (-37)
      move: # (83) = const string "test.db" (-38)
    end call method: start 81, params 3, ret values 1
    init property: # (79) [const string "resolve" (-37)] = # (81)
  end call method: start 77, params 3, ret values 0


[9] var a = 6

  begin scope
    begin locals 3
      4 a
      5 b
      6 c
    end locals
    move: var a (4) = const number 6 (-4)


[10] var b = 1

    move: var b (5) = const number 1 (-5)


[11] var c = !!(a & b)

    # (77) = var a (4) [bit &] var b (5)
    # (77) = [logic bool] # (77)
    move: var c (6) = # (77)


[12] print c

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = var c (6)
    end call method: start 77, params 3, ret values 0
  end scope ret values 0


[15] echo("file: "__FILE__", line: "__LINE__"\n")

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "echo" (-39)
    move: # (79) = const string "file: " (-40)
    begin call method
      move: # (80) = var _G (3)
      move: # (81) = const string "__getfilename" (-34)
    end call method: start 80, params 2, ret values 1
    move: # (81) = const string ", line: " (-41)
    move: # (82) = const number 15 (-6)
    move: # (83) = const string "
" (-42)
  end call method: start 77, params 7, ret values 0


[18] print(5 " differences")

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const number 5 (-7)
    move: # (80) = const string " differences" (-43)
  end call method: start 77, params 4, ret values 0


[21] var i = 4

  begin scope
    begin locals 4
      7 i
      8 name
      9 count
      10 time
    end locals
    move: var i (7) = const number 4 (-8)


[23] var name, count, time = "Smith", 3 + 2/i, 1.23

    move: # (77) = const string "Smith" (-44)
    # (79) = const number 2 (-10) [operator /] var i (7)
    # (78) = const number 3 (-9) [operator +] # (79)
    move: var time (10) = const number 1.23 (-11)
    move: var count (9) = # (78)
    move: var name (8) = # (77)


[25] print concat("name: " name ", count: " count ", time: " time)

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _E (2)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "name: " (-46)
        move: # (82) = var name (8)
        move: # (83) = const string ", count: " (-47)
        move: # (84) = var count (9)
        move: # (85) = const string ", time: " (-48)
        move: # (86) = var time (10)
      end call method: start 79, params 8, ret values 1
    end call method: start 77, params 3, ret values 0
  end scope ret values 0


[29] print {firstname="Ivan" lastname="Petrov"}

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    new object 2: # (79)
    init property: # (79) [const string "firstname" (-49)] = const string "Ivan" (-50)
    init property: # (79) [const string "lastname" (-51)] = const string "Petrov" (-52)
  end call method: start 77, params 3, ret values 0


[33] var a = {x=1, y=3; "zero" "one", "two" last:7,}

  begin scope
    begin locals 11
      11 a
      12 b
      13 i
      14 j
      15 k
      16 test
      17 a
      18 b
      19 a
      20 b
      21 c
    end locals
    new object 6: # (77)
    init property: # (77) [const string "x" (-53)] = const number 1 (-5)
    init property: # (77) [const string "y" (-54)] = const number 3 (-9)
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const string "zero" (-56)
    end call method: start 78, params 3, ret values 0
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const string "one" (-57)
    end call method: start 78, params 3, ret values 0
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const string "two" (-58)
    end call method: start 78, params 3, ret values 0
    init property: # (77) [const string "last" (-59)] = const number 7 (-12)
    move: var a (11) = # (77)


[34] print a[1]

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get property: # (79) = var a (11) [const number 1 (-5)]
    end call method: start 77, params 3, ret values 0


[35] print a

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = var a (11)
    end call method: start 77, params 3, ret values 0


[38] a = {[2+3]="five" y=3}

    new object 2: # (77)
    init property: # (77) [const number 5 (-7)] = const string "five" (-60)
    init property: # (77) [const string "y" (-54)] = const number 3 (-9)
    move: var a (11) = # (77)


[39] print a[5]

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get property: # (79) = var a (11) [const number 5 (-7)]
    end call method: start 77, params 3, ret values 0


[40] print a

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = var a (11)
    end call method: start 77, params 3, ret values 0


[42] a = {x=1 y=2}

    new object 2: # (77)
    init property: # (77) [const string "x" (-53)] = const number 1 (-5)
    init property: # (77) [const string "y" (-54)] = const number 2 (-10)
    move: var a (11) = # (77)


[44] var b = {[a]="powerful" 7="greate"}

    new object 2: # (77)
    init property: # (77) [var a (11)] = const string "powerful" (-61)
    init property: # (77) [const number 7 (-12)] = const string "greate" (-62)
    move: var b (12) = # (77)


[45] print b[a]

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get property: # (79) = var b (12) [var a (11)]
    end call method: start 77, params 3, ret values 0


[47] print([10, 20, 30, 40])

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      new array 4: # (79)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 10 (-13)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 20 (-14)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 30 (-15)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 40 (-16)
      end call method: start 80, params 3, ret values 0
    end call method: start 77, params 3, ret values 0


[49] print([10 20 30 40])

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      new array 4: # (79)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 10 (-13)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 20 (-14)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 30 (-15)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 40 (-16)
      end call method: start 80, params 3, ret values 0
    end call method: start 77, params 3, ret values 0


[52] var i, j, k = 0, 1, 3

    move: # (77) = const number 0 (-17)
    move: # (78) = const number 1 (-5)
    move: var k (15) = const number 3 (-9)
    move: var j (14) = # (78)
    move: var i (13) = # (77)


[53] echo("i="i", j="j", k="k"\n")

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "echo" (-39)
      move: # (79) = const string "i=" (-63)
      move: # (80) = var i (13)
      move: # (81) = const string ", j=" (-64)
      move: # (82) = var j (14)
      move: # (83) = const string ", k=" (-65)
      move: # (84) = var k (15)
      move: # (85) = const string "
" (-42)
    end call method: start 77, params 9, ret values 0


[56] i, j = j, i

    move: # (77) = var j (14)
    move: var j (14) = var i (13)
    move: var i (13) = # (77)


[57] echo("after swap: i="i", j="j"\n")

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "echo" (-39)
      move: # (79) = const string "after swap: i=" (-66)
      move: # (80) = var i (13)
      move: # (81) = const string ", j=" (-64)
      move: # (82) = var j (14)
      move: # (83) = const string "
" (-42)
    end call method: start 77, params 7, ret values 0


[60] var test = function(){ return 1, 2 }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        move: # (4) = const number 1 (-5)
        move: # (5) = const number 2 (-10)
      return: # (4), count 2
    end function: var test (16), index 1


[61] var a, b = test()

    begin call
      move: # (77) = var test (16)
      move: # (78) = const null (-1)
    end call: start 77, params 2, ret values 2
    move: var b (18) = # (78)
    move: var a (17) = # (77)


[62] print("results from function" "a="..a "b="..b)

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "results from function" (-67)
      begin call method
        move: # (80) = var _G (3)
        move: # (81) = const string "concat" (-45)
        move: # (82) = const string "a=" (-68)
        move: # (83) = var a (17)
      end call method: start 80, params 4, ret values 1
      begin call method
        move: # (81) = var _G (3)
        move: # (82) = const string "concat" (-45)
        move: # (83) = const string "b=" (-69)
        move: # (84) = var b (18)
      end call method: start 81, params 4, ret values 1
    end call method: start 77, params 5, ret values 0


[65] var a, b, c = test()

    begin call
      move: # (77) = var test (16)
      move: # (78) = const null (-1)
    end call: start 77, params 2, ret values 3
    move: var c (21) = # (79)
    move: var b (20) = # (78)
    move: var a (19) = # (77)


[66] print("results from function" "a="..a "b="..b "c="..c)

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "results from function" (-67)
      begin call method
        move: # (80) = var _G (3)
        move: # (81) = const string "concat" (-45)
        move: # (82) = const string "a=" (-68)
        move: # (83) = var a (19)
      end call method: start 80, params 4, ret values 1
      begin call method
        move: # (81) = var _G (3)
        move: # (82) = const string "concat" (-45)
        move: # (83) = const string "b=" (-69)
        move: # (84) = var b (20)
      end call method: start 81, params 4, ret values 1
      begin call method
        move: # (82) = var _G (3)
        move: # (83) = const string "concat" (-45)
        move: # (84) = const string "c=" (-70)
        move: # (85) = var c (21)
      end call method: start 82, params 4, ret values 1
    end call method: start 77, params 6, ret values 0
  end scope ret values 0


[70] print "Object iterator test"

  begin scope
    begin locals 2
      22 obj
      31 range
    end locals
    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Object iterator test" (-71)
    end call method: start 77, params 3, ret values 0


[71] var obj = { null awesome=true 12 "excellent" }

    new object 4: # (77)
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const null (-1)
    end call method: start 78, params 3, ret values 0
    init property: # (77) [const string "awesome" (-72)] = const true (-2)
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const number 12 (-18)
    end call method: start 78, params 3, ret values 0
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const string "excellent" (-73)
    end call method: start 78, params 3, ret values 0
    move: var obj (22) = # (77)


[72] for(var k, v in obj){

    begin scope
      begin locals 4
        23 k
        24 v
        25 #func
        26 #valid
      end locals




      begin call method
        move: # (77) = var obj (22)
        move: # (78) = const string "__iter" (-74)
      end call method: start 77, params 2, ret values 1
      move: var #func (25) = # (77)
      begin loop
        begin call
          move: # (77) = var #func (25)
          move: # (78) = const null (-1)
        end call: start 77, params 2, ret values 3
        move: var v (24) = # (79)
        move: var k (23) = # (78)
        move: var #valid (26) = # (77)

        begin if
          begin bool exp
            move: # (77) = var #valid (26)
            # (77) = [logic not] # (77)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[73] print( k " --> " v )

        begin scope
          begin call method
            move: # (77) = var _E (2)
            move: # (78) = const string "print" (-31)
            move: # (79) = var k (23)
            move: # (80) = const string " --> " (-75)
            move: # (81) = var v (24)
          end call method: start 77, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[76] print "Object iterator test, only keys"

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Object iterator test, only keys" (-76)
    end call method: start 77, params 3, ret values 0


[77] for(k in obj){

    begin scope
      begin locals 2
        27 #func
        28 #valid
      end locals



      begin call method
        move: # (77) = var obj (22)
        move: # (78) = const string "__iter" (-74)
      end call method: start 77, params 2, ret values 1
      move: var #func (27) = # (77)
      begin loop
        begin call
          move: # (77) = var #func (27)
          move: # (78) = const null (-1)
        end call: start 77, params 2, ret values 2
        set property: var _E (2) [const string "k" (-77)] = # (78)
        move: var #valid (28) = # (77)

        begin if
          begin bool exp
            move: # (77) = var #valid (28)
            # (77) = [logic not] # (77)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[78] print k

        begin scope
          begin call method
            move: # (77) = var _E (2)
            move: # (78) = const string "print" (-31)
            get property: # (79) = var _E (2) [const string "k" (-77)]
          end call method: start 77, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[81] print "Array iterator test"

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Array iterator test" (-78)
    end call method: start 77, params 3, ret values 0


[82] Array.__iter = function(){

    begin function
      begin locals 6, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
        4 i
        5 self
      end locals

[83] var i, self = 0, this

      move: # (6) = const number 0 (-17)
      move: var self (5) = param this (1)
      move: var i (4) = # (6)


[84] return function(){

        begin function
          begin locals 5, stack 11
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[85] if(i < #self){

          begin if
            begin bool exp
              get upvalue: # (5) = var i (4 1)
              begin call method
                get upvalue: # (6) = var self (5 1)
                move: # (7) = const string "__len" (-79)
              end call method: start 6, params 2, ret values 1
              # (5) = # (5) [logic <] # (6)
            end bool exp
            begin then

[86] print("... inside of array iter func: " i self[i])

              begin scope
                begin locals 1
                  4 #temp
                end locals
                begin call method
                  move: # (5) = var _E (2)
                  move: # (6) = const string "print" (-31)
                  move: # (7) = const string "... inside of array iter func: " (-80)
                  get upvalue: # (8) = var i (4 1)
                  get upvalue: # (9) = var self (5 1)
                  get upvalue: # (10) = var i (4 1)
                  get property: # (9) = # (9) [# (10)]
                end call method: start 5, params 5, ret values 0


[87] return true, i, self[i++]

                  move: # (5) = const true (-2)
                  get upvalue: # (6) = var i (4 1)
                  get upvalue: # (7) = var self (5 1)
                  get upvalue: var #temp (4) = var i (4 1)
                  get upvalue: # (8) = var i (4 1)
                  # (8) = # (8) [operator +] const number 1 (-5)
                  set upvalue: var i (4 1) = # (8)
                  move: # (8) = var #temp (4)
                  get property: # (7) = # (7) [# (8)]
                return: # (5), count 3
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 3
      return: # (6), count 1
    end function: # (77), index 2

[82] Array.__iter = function(){

    get property: # (78) = var _E (2) [const string "Array" (-81)]
    set property: # (78) [const string "__iter" (-74)] = # (77)


[91] for(k, v in [10 20 30 40 50]){

    begin scope
      begin locals 2
        29 #func
        30 #valid
      end locals




      begin call method
        new array 5: # (77)
        begin call method
          move: # (78) = # (77)
          move: # (79) = const string "push" (-55)
          move: # (80) = const number 10 (-13)
        end call method: start 78, params 3, ret values 0
        begin call method
          move: # (78) = # (77)
          move: # (79) = const string "push" (-55)
          move: # (80) = const number 20 (-14)
        end call method: start 78, params 3, ret values 0
        begin call method
          move: # (78) = # (77)
          move: # (79) = const string "push" (-55)
          move: # (80) = const number 30 (-15)
        end call method: start 78, params 3, ret values 0
        begin call method
          move: # (78) = # (77)
          move: # (79) = const string "push" (-55)
          move: # (80) = const number 40 (-16)
        end call method: start 78, params 3, ret values 0
        begin call method
          move: # (78) = # (77)
          move: # (79) = const string "push" (-55)
          move: # (80) = const number 50 (-19)
        end call method: start 78, params 3, ret values 0
        move: # (78) = const string "__iter" (-74)
      end call method: start 77, params 2, ret values 1
      move: var #func (29) = # (77)
      begin loop
        begin call
          move: # (77) = var #func (29)
          move: # (78) = const null (-1)
        end call: start 77, params 2, ret values 3
        set property: var _E (2) [const string "v" (-82)] = # (79)
        set property: var _E (2) [const string "k" (-77)] = # (78)
        move: var #valid (30) = # (77)

        begin if
          begin bool exp
            move: # (77) = var #valid (30)
            # (77) = [logic not] # (77)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[92] print( k " --> " v )

        begin scope
          begin call method
            move: # (77) = var _E (2)
            move: # (78) = const string "print" (-31)
            get property: # (79) = var _E (2) [const string "k" (-77)]
            move: # (80) = const string " --> " (-75)
            get property: # (81) = var _E (2) [const string "v" (-82)]
          end call method: start 77, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[95] print("Test array prototype:", [1 2 3].prototype === Array)

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Test array prototype:" (-83)
      new array 3: # (80)
      begin call method
        move: # (81) = # (80)
        move: # (82) = const string "push" (-55)
        move: # (83) = const number 1 (-5)
      end call method: start 81, params 3, ret values 0
      begin call method
        move: # (81) = # (80)
        move: # (82) = const string "push" (-55)
        move: # (83) = const number 2 (-10)
      end call method: start 81, params 3, ret values 0
      begin call method
        move: # (81) = # (80)
        move: # (82) = const string "push" (-55)
        move: # (83) = const number 3 (-9)
      end call method: start 81, params 3, ret values 0
      get property: # (80) = # (80) [const string "prototype" (-84)]
      get property: # (81) = var _E (2) [const string "Array" (-81)]
      # (80) = # (80) [logic ===] # (81)
    end call method: start 77, params 4, ret values 0


[97] print "Test range iterator"

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Test range iterator" (-85)
    end call method: start 77, params 3, ret values 0


[98] var range = function(a, b){

    begin function
      begin locals 6, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 b (param)
        4 _E
        5 _G
      end locals

[99] return function(){

        begin function
          begin locals 5, stack 8
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[100] if(a <= b){

          begin if
            begin bool exp
              get upvalue: # (5) = param a (2 1)
              get upvalue: # (6) = param b (3 1)
              # (5) = # (5) [logic <=] # (6)
            end bool exp
            begin then

[101] return true, a++

              begin scope
                begin locals 1
                  4 #temp
                end locals
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = param a (2 1)
                  get upvalue: # (6) = param a (2 1)
                  # (6) = # (6) [operator +] const number 1 (-5)
                  set upvalue: param a (2 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 5
      return: # (6), count 1
    end function: var range (31), index 4


[105] for(var i in range(10, 13)){

    begin scope
      begin locals 3
        32 i
        33 #func
        34 #valid
      end locals



      begin call method
        begin call
          move: # (77) = var range (31)
          move: # (78) = const null (-1)
          move: # (79) = const number 10 (-13)
          move: # (80) = const number 13 (-20)
        end call: start 77, params 4, ret values 1
        move: # (78) = const string "__iter" (-74)
      end call method: start 77, params 2, ret values 1
      move: var #func (33) = # (77)
      begin loop
        begin call
          move: # (77) = var #func (33)
          move: # (78) = const null (-1)
        end call: start 77, params 2, ret values 2
        move: var i (32) = # (78)
        move: var #valid (34) = # (77)

        begin if
          begin bool exp
            move: # (77) = var #valid (34)
            # (77) = [logic not] # (77)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[106] print "i = "..i

        begin scope
          begin call method
            move: # (77) = var _E (2)
            move: # (78) = const string "print" (-31)
            begin call method
              move: # (79) = var _G (3)
              move: # (80) = const string "concat" (-45)
              move: # (81) = const string "i = " (-86)
              move: # (82) = var i (32)
            end call method: start 79, params 4, ret values 1
          end call method: start 77, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end scope ret values 0


[111] print "7 && 9 = "..(7 && 9)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "7 && 9 = " (-87)
      move: # (82) = const number 7 (-12)
      logic &&: # (82)
        move: # (82) = const number 9 (-21)
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[112] print "7 || 9 = "..(7 || 9)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "7 || 9 = " (-88)
      move: # (82) = const number 7 (-12)
      logic ||: # (82)
        move: # (82) = const number 9 (-21)
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[117] var v1 = {x=1 y=2}

  begin scope
    begin locals 2
      35 v1
      36 a
    end locals
    new object 2: # (77)
    init property: # (77) [const string "x" (-53)] = const number 1 (-5)
    init property: # (77) [const string "y" (-54)] = const number 2 (-10)
    move: var v1 (35) = # (77)


[118] var a = {[v1]="vv1" v2="vv2"}

    new object 2: # (77)
    init property: # (77) [var v1 (35)] = const string "vv1" (-89)
    init property: # (77) [const string "v2" (-90)] = const string "vv2" (-91)
    move: var a (36) = # (77)


[119] print( a[v1] a.v2 )

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get property: # (79) = var a (36) [var v1 (35)]
      get property: # (80) = var a (36) [const string "v2" (-90)]
    end call method: start 77, params 4, ret values 0
  end scope ret values 0


[124] var Person = {

  new object 3: # (77)

[125] __construct = function(firstname, lastname){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 firstname (param)
      3 lastname (param)
      4 _E
      5 _G
    end locals

[126] @firstname = firstname // equal to this.firstname = firstname

    set property: param this (1) [const string "firstname" (-49)] = param firstname (2)

[127] @lastname = lastname // equal to this.lastname = lastname

    set property: param this (1) [const string "lastname" (-51)] = param lastname (3)
  end function: # (79), index 6
  init property: # (77) [const string "__construct" (-92)] = # (79)

[129] walk = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[130] print @fullname .. " is walking!"

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "print" (-31)
        begin call method
          move: # (6) = var _G (3)
          move: # (7) = const string "concat" (-45)
          get property: # (8) = param this (1) [const string "fullname" (-94)]
          move: # (9) = const string " is walking!" (-95)
        end call method: start 6, params 4, ret values 1
      end call method: start 4, params 3, ret values 1
    return: # (4), count 1
  end function: # (79), index 7
  init property: # (77) [const string "walk" (-93)] = # (79)

[132] __get@fullname = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[133] return @firstname .. " " .. @lastname

      begin call method
        move: # (4) = var _G (3)
        move: # (5) = const string "concat" (-45)
        get property: # (6) = param this (1) [const string "firstname" (-49)]
        move: # (7) = const string " " (-97)
        get property: # (8) = param this (1) [const string "lastname" (-51)]
      end call method: start 4, params 5, ret values 1
    return: # (4), count 1
  end function: # (79), index 8
  init property: # (77) [const string "__get@fullname" (-96)] = # (79)
  move: var Person (37) = # (77)


[137] var p = Person("James", "Bond")

  begin call
    move: # (77) = var Person (37)
    move: # (78) = const null (-1)
    move: # (79) = const string "James" (-98)
    move: # (80) = const string "Bond" (-99)
  end call: start 77, params 4, ret values 1
  move: var p (38) = # (77)


[138] p.walk()

  begin call method
    move: # (77) = var p (38)
    move: # (78) = const string "walk" (-93)
  end call method: start 77, params 2, ret values 0


[139] print p

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = var p (38)
  end call method: start 77, params 3, ret values 0


[140] print "p is Person = " .. (p is Person)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "p is Person = " (-100)
      begin call method
        move: # (82) = var _G (3)
        move: # (83) = const string "__is" (-101)
        move: # (84) = var p (38)
        move: # (85) = var Person (37)
      end call method: start 82, params 4, ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[143] var IvanPerson = extends Person {

  begin call method
    move: # (77) = var _G (3)
    move: # (78) = const string "__extends" (-102)
    move: # (79) = var Person (37)
    new object 2: # (80)

[144] __construct = function(){

    begin function
      begin locals 4, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[145] super("Ivan", "Petrov")

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
          move: # (6) = const string "Ivan" (-50)
          move: # (7) = const string "Petrov" (-52)
        end super call: start 4, params 4, ret values 1
      return: # (4), count 1
    end function: # (82), index 9
    init property: # (80) [const string "__construct" (-92)] = # (82)

[147] walk = function(){

    begin function
      begin locals 4, stack 7
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[148] echo "Someone named "

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "echo" (-39)
        move: # (6) = const string "Someone named " (-103)
      end call method: start 4, params 3, ret values 0


[149] super()

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
        end super call: start 4, params 2, ret values 1
      return: # (4), count 1
    end function: # (82), index 10
    init property: # (80) [const string "walk" (-93)] = # (82)
  end call method: start 77, params 4, ret values 1
  move: var IvanPerson (39) = # (77)


[154] var p = IvanPerson()

  begin call
    move: # (77) = var IvanPerson (39)
    move: # (78) = const null (-1)
  end call: start 77, params 2, ret values 1
  move: var p (40) = # (77)


[155] p.walk()

  begin call method
    move: # (77) = var p (40)
    move: # (78) = const string "walk" (-93)
  end call method: start 77, params 2, ret values 0


[156] print p

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = var p (40)
  end call method: start 77, params 3, ret values 0


[158] print "Person.walk.call"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Person.walk.call" (-104)
  end call method: start 77, params 3, ret values 0


[159] Person.walk.call(p)

  begin call method
    get property: # (77) = var Person (37) [const string "walk" (-93)]
    move: # (78) = const string "call" (-105)
    move: # (79) = var p (40)
  end call method: start 77, params 3, ret values 0


[163] function foo(a, b){ return a + b }

  begin function
    begin locals 6, stack 8
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals
      # (6) = param a (2) [operator +] param b (3)
    return: # (6), count 1
  end function: # (77), index 11
  set property: var _E (2) [const string "foo" (-106)] = # (77)


[164] function bar(){ return foo.apply(null, arguments) }

  begin function
    begin locals 4, stack 8
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      begin call method
        get property: # (4) = var _E (2) [const string "foo" (-106)]
        move: # (5) = const string "apply" (-108)
        move: # (6) = const null (-1)
        get arguments: # (7)
      end call method: start 4, params 4, ret values 1
    return: # (4), count 1
  end function: # (77), index 12
  set property: var _E (2) [const string "bar" (-107)] = # (77)


[165] print "should be 5: "..bar(2 3)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "should be 5: " (-109)
      begin call method
        move: # (82) = var _E (2)
        move: # (83) = const string "bar" (-107)
        move: # (84) = const number 2 (-10)
        move: # (85) = const number 3 (-9)
      end call method: start 82, params 4, ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[166] print "should be 9: "..bar(4 5)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "should be 9: " (-110)
      begin call method
        move: # (82) = var _E (2)
        move: # (83) = const string "bar" (-107)
        move: # (84) = const number 4 (-8)
        move: # (85) = const number 5 (-7)
      end call method: start 82, params 4, ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[170] var vec3 = {

  new object 3: # (77)

[171] __construct = function(x, y, z){

  begin function
    begin locals 7, stack 10
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 z (param)
      5 _E
      6 _G
    end locals

[172] this.x = x

    set property: param this (1) [const string "x" (-53)] = param x (2)

[173] this.y = y

    set property: param this (1) [const string "y" (-54)] = param y (3)

[174] this.z = z

    set property: param this (1) [const string "z" (-111)] = param z (4)
  end function: # (79), index 13
  init property: # (77) [const string "__construct" (-92)] = # (79)

[176] __add = {|b| vec3(@x + b.x, @y + b.y, @z + b.z)}

  begin function
    begin locals 5, stack 12
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals
      begin call
        get upvalue: # (5) = var vec3 (41 1)
        move: # (6) = const null (-1)
        get property: # (7) = param this (1) [const string "x" (-53)]
        get property: # (8) = param b (2) [const string "x" (-53)]
        # (7) = # (7) [operator +] # (8)
        get property: # (8) = param this (1) [const string "y" (-54)]
        get property: # (9) = param b (2) [const string "y" (-54)]
        # (8) = # (8) [operator +] # (9)
        get property: # (9) = param this (1) [const string "z" (-111)]
        get property: # (10) = param b (2) [const string "z" (-111)]
        # (9) = # (9) [operator +] # (10)
      end call: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (79), index 14
  init property: # (77) [const string "__add" (-112)] = # (79)

[178] __mul = {|b| vec3(@x * b.x, @y * b.y, @z * b.z)}

  begin function
    begin locals 5, stack 12
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals
      begin call
        get upvalue: # (5) = var vec3 (41 1)
        move: # (6) = const null (-1)
        get property: # (7) = param this (1) [const string "x" (-53)]
        get property: # (8) = param b (2) [const string "x" (-53)]
        # (7) = # (7) [operator *] # (8)
        get property: # (8) = param this (1) [const string "y" (-54)]
        get property: # (9) = param b (2) [const string "y" (-54)]
        # (8) = # (8) [operator *] # (9)
        get property: # (9) = param this (1) [const string "z" (-111)]
        get property: # (10) = param b (2) [const string "z" (-111)]
        # (9) = # (9) [operator *] # (10)
      end call: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (79), index 15
  init property: # (77) [const string "__mul" (-113)] = # (79)
  move: var vec3 (41) = # (77)


[181] var v1 = vec3(10 20 30)

  begin call
    move: # (77) = var vec3 (41)
    move: # (78) = const null (-1)
    move: # (79) = const number 10 (-13)
    move: # (80) = const number 20 (-14)
    move: # (81) = const number 30 (-15)
  end call: start 77, params 5, ret values 1
  move: var v1 (42) = # (77)


[182] var v2 = vec3(1 2 3)

  begin call
    move: # (77) = var vec3 (41)
    move: # (78) = const null (-1)
    move: # (79) = const number 1 (-5)
    move: # (80) = const number 2 (-10)
    move: # (81) = const number 3 (-9)
  end call: start 77, params 5, ret values 1
  move: var v2 (43) = # (77)


[183] var v3 = v1 + v2 * v2

  # (78) = var v2 (43) [operator *] var v2 (43)
  var v3 (44) = var v1 (42) [operator +] # (78)


[184] print "should be {x:11,y:24,z:39} " .. v3

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "should be {x:11,y:24,z:39} " (-114)
      move: # (82) = var v3 (44)
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[187] print "Test properties"

  begin scope
    begin locals 1
      45 a
    end locals
    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Test properties" (-115)
    end call method: start 77, params 3, ret values 0


[189] var a = {

    new object 3: # (77)

[190] _color = "red"

    init property: # (77) [const string "_color" (-116)] = const string "red" (-117)

[191] __get@color = {|| @_color }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        get property: # (4) = param this (1) [const string "_color" (-116)]
      return: # (4), count 1
    end function: # (79), index 16
    init property: # (77) [const string "__get@color" (-118)] = # (79)

[192] __set@color = {|v| @_color = v }

    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 v (param)
        3 _E
        4 _G
      end locals
        set property: param this (1) [const string "_color" (-116)] = param v (2)
      return: param v (2), count 1
    end function: # (79), index 17
    init property: # (77) [const string "__set@color" (-119)] = # (79)
    move: var a (45) = # (77)


[196] print "should be red: " .. a["color"]

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be red: " (-120)
        get property: # (82) = var a (45) [const string "color" (-121)]
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[198] a.color = "blue"

    set property: var a (45) [const string "color" (-121)] = const string "blue" (-122)


[199] print "should be blue: " .. a.color

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be blue: " (-123)
        get property: # (82) = var a (45) [const string "color" (-121)]
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[201] a = {

    new object 4: # (77)

[202] _color = "white"

    init property: # (77) [const string "_color" (-116)] = const string "white" (-124)

[203] __get = function(name){

    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[204] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-121)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[205] return this._color

            get property: # (5) = param this (1) [const string "_color" (-116)]
          return: # (5), count 1
        end then
      end if ret values 0
    end function: # (79), index 18
    init property: # (77) [const string "__get" (-125)] = # (79)

[207] __set = function(name, v){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 v (param)
        4 _E
        5 _G
      end locals

[208] if(name == "color")

      begin if
        begin bool exp
          move: # (6) = param name (2)
          move: # (7) = const string "color" (-121)
          # (6) = # (6) [logic ==] # (7)
        end bool exp
        begin then

[209] this._color = v

          set property: param this (1) [const string "_color" (-116)] = param v (3)
        end then
      end if ret values 0
    end function: # (79), index 19
    init property: # (77) [const string "__set" (-126)] = # (79)

[211] __del = function(name){

    begin function
      begin locals 5, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[212] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-121)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[213] delete this._color

          begin call method
            move: # (5) = var _G (4)
            move: # (6) = const string "__delete" (-128)
            move: # (7) = param this (1)
            move: # (8) = const string "_color" (-116)
          end call method: start 5, params 4, ret values 0
        end then
      end if ret values 0
    end function: # (79), index 20
    init property: # (77) [const string "__del" (-127)] = # (79)
    move: var a (45) = # (77)


[218] print "should be white: " .. a.color

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be white: " (-129)
        get property: # (82) = var a (45) [const string "color" (-121)]
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[219] print "should be null: " .. a.color2

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be null: " (-130)
        get property: # (82) = var a (45) [const string "color2" (-131)]
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[221] a.color = "green"

    set property: var a (45) [const string "color" (-121)] = const string "green" (-132)


[222] print "should be green: " .. a.color

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be green: " (-133)
        get property: # (82) = var a (45) [const string "color" (-121)]
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[224] delete a.color

    begin call method
      move: # (77) = var _G (3)
      move: # (78) = const string "__delete" (-128)
      move: # (79) = var a (45)
      move: # (80) = const string "color" (-121)
    end call method: start 77, params 4, ret values 0


[226] print "should be null: " .. a.color

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be null: " (-130)
        get property: # (82) = var a (45) [const string "color" (-121)]
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[227] print "Test multi dimensional properties"

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Test multi dimensional properties" (-134)
    end call method: start 77, params 3, ret values 0


[229] a = {

    new object 4: # (77)

[230] _matrix = {}

    new object 0: # (79)
    init property: # (77) [const string "_matrix" (-135)] = # (79)

[231] __getdim = function(x, y){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[232] return this._matrix[y*4 + x]

        get property: # (6) = param this (1) [const string "_matrix" (-135)]
        # (7) = param y (3) [operator *] const number 4 (-8)
        # (7) = # (7) [operator +] param x (2)
        get property: # (6) = # (6) [# (7)]
      return: # (6), count 1
    end function: # (79), index 21
    init property: # (77) [const string "__getdim" (-136)] = # (79)

[234] __setdim = function(value, x, y){

    begin function
      begin locals 7, stack 11
        0 _F (param)
        1 this (param)
        2 value (param)
        3 x (param)
        4 y (param)
        5 _E
        6 _G
      end locals

[235] this._matrix[y*4 + x] = value

        get property: # (8) = param this (1) [const string "_matrix" (-135)]
        # (9) = param y (4) [operator *] const number 4 (-8)
        # (9) = # (9) [operator +] param x (3)
        set property: # (8) [# (9)] = param value (2)
      return: param value (2), count 1
    end function: # (79), index 22
    init property: # (77) [const string "__setdim" (-137)] = # (79)

[237] __deldim = function(x, y){

    begin function
      begin locals 6, stack 11
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[238] delete this._matrix[y*4 + x]

      begin call method
        move: # (6) = var _G (5)
        move: # (7) = const string "__delete" (-128)
        get property: # (8) = param this (1) [const string "_matrix" (-135)]
        # (9) = param y (3) [operator *] const number 4 (-8)
        # (9) = # (9) [operator +] param x (2)
      end call method: start 6, params 4, ret values 0
    end function: # (79), index 23
    init property: # (77) [const string "__deldim" (-138)] = # (79)
    move: var a (45) = # (77)


[242] a[1, 2] = 5		// a.__setdim(5, 1, 2)

    begin call method
      move: # (77) = const number 5 (-7)
      move: # (78) = var a (45)
      move: # (79) = const string "__setdim" (-137)
      move: # (80) = # (77)
      move: # (81) = const number 1 (-5)
      move: # (82) = const number 2 (-10)
    end call method: start 78, params 5, ret values 0


[244] print "should be 5: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be 5: " (-109)
        begin call method
          move: # (82) = var a (45)
          move: # (83) = const string "__getdim" (-136)
          move: # (84) = const number 1 (-5)
          move: # (85) = const number 2 (-10)
        end call method: start 82, params 4, ret values 1
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0


[246] delete a[1, 2]	// a.__deldim(1, 2)

    begin call method
      move: # (77) = var a (45)
      move: # (78) = const string "__deldim" (-138)
      move: # (79) = const number 1 (-5)
      move: # (80) = const number 2 (-10)
    end call method: start 77, params 4, ret values 0


[247] print "should be null: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "concat" (-45)
        move: # (81) = const string "should be null: " (-130)
        begin call method
          move: # (82) = var a (45)
          move: # (83) = const string "__getdim" (-136)
          move: # (84) = const number 1 (-5)
          move: # (85) = const number 2 (-10)
        end call method: start 82, params 4, ret values 1
      end call method: start 79, params 4, ret values 1
    end call method: start 77, params 3, ret values 0
  end scope ret values 0


[251] print "Test function inline call"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Test function inline call" (-139)
  end call method: start 77, params 3, ret values 0


[252] print "should be 7: " .. {|a b c| a + b * c }(1 2 3)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "should be 7: " (-140)
      begin call
        begin function
          begin locals 7, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 b (param)
            4 c (param)
            5 _E
            6 _G
          end locals
            # (8) = param b (3) [operator *] param c (4)
            # (7) = param a (2) [operator +] # (8)
          return: # (7), count 1
        end function: # (82), index 24
        move: # (83) = const null (-1)
        move: # (84) = const number 1 (-5)
        move: # (85) = const number 2 (-10)
        move: # (86) = const number 3 (-9)
      end call: start 82, params 5, ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[255] print "Test local vars scope"

  begin scope
    begin locals 1
      46 i
    end locals
    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Test local vars scope" (-141)
    end call method: start 77, params 3, ret values 0


[256] var i = 1;

    move: var i (46) = const number 1 (-5)


[258] var i = i

    begin scope
      begin locals 1
        47 i
      end locals
      move: var i (47) = var i (46)


[259] i++

      var i (47) = var i (47) [operator +] const number 1 (-5)


[260] print i

      begin call method
        move: # (77) = var _E (2)
        move: # (78) = const string "print" (-31)
        move: # (79) = var i (47)
      end call method: start 77, params 3, ret values 0
    end scope ret values 0


[262] print i

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = var i (46)
    end call method: start 77, params 3, ret values 0
  end scope ret values 0


[265] print "Test debuglocals"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Test debuglocals" (-142)
  end call method: start 77, params 3, ret values 0


[272] }(10)

  begin call

[266] function(a){

    begin function
      begin locals 7, stack 12
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
        5 c
      end locals

[267] var c = a * 2;

      var c (5) = param a (2) [operator *] const number 2 (-10)

[269] var c = a - 1

      begin scope
        begin locals 1
          6 c
        end locals
        var c (6) = param a (2) [operator -] const number 1 (-5)


[270] print debuglocals

        begin call method
          move: # (7) = var _E (3)
          move: # (8) = const string "print" (-31)
          new object 14: # (9)
          get upvalue: # (11) = var Person (37 1)
          init property: # (9) [const string "Person" (-143)] = # (11)
          get upvalue: # (11) = var IvanPerson (39 1)
          init property: # (9) [const string "IvanPerson" (-144)] = # (11)
          get upvalue: # (11) = var p (40 1)
          init property: # (9) [const string "p" (-145)] = # (11)
          get upvalue: # (11) = var vec3 (41 1)
          init property: # (9) [const string "vec3" (-146)] = # (11)
          get upvalue: # (11) = var v1 (42 1)
          init property: # (9) [const string "v1" (-147)] = # (11)
          get upvalue: # (11) = var v2 (43 1)
          init property: # (9) [const string "v2" (-90)] = # (11)
          get upvalue: # (11) = var v3 (44 1)
          init property: # (9) [const string "v3" (-148)] = # (11)
          get upvalue: # (11) = var core (49 1)
          init property: # (9) [const string "core" (-149)] = # (11)
          get upvalue: # (11) = var __planet (50 1)
          init property: # (9) [const string "__planet" (-150)] = # (11)
          get upvalue: # (11) = var testFunc (59 1)
          init property: # (9) [const string "testFunc" (-151)] = # (11)
          get upvalue: # (11) = var conn (71 1)
          init property: # (9) [const string "conn" (-152)] = # (11)
          get upvalue: # (11) = var stmt (72 1)
          init property: # (9) [const string "stmt" (-153)] = # (11)
          init property: # (9) [const string "a" (-154)] = param a (2)
          init property: # (9) [const string "c" (-155)] = var c (6)
        end call method: start 7, params 3, ret values 0
      end scope ret values 0
    end function: # (77), index 25

[272] }(10)

    move: # (78) = const null (-1)
    move: # (79) = const number 10 (-13)
  end call: start 77, params 3, ret values 0


[274] print "Script environment"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Script environment" (-156)
  end call method: start 77, params 3, ret values 0


[275] print _E

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = var _E (2)
  end call method: start 77, params 3, ret values 0


[277] print "Math functions"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Math functions" (-157)
  end call method: start 77, params 3, ret values 0


[278] var a = [math.random() math.random() math.random() math.random() math.random() math.random()]

  new array 6: # (77)
  begin call method
    move: # (78) = # (77)
    move: # (79) = const string "push" (-55)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "random" (-159)
    end call method: start 80, params 2, ret values 1
  end call method: start 78, params 3, ret values 0
  begin call method
    move: # (78) = # (77)
    move: # (79) = const string "push" (-55)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "random" (-159)
    end call method: start 80, params 2, ret values 1
  end call method: start 78, params 3, ret values 0
  begin call method
    move: # (78) = # (77)
    move: # (79) = const string "push" (-55)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "random" (-159)
    end call method: start 80, params 2, ret values 1
  end call method: start 78, params 3, ret values 0
  begin call method
    move: # (78) = # (77)
    move: # (79) = const string "push" (-55)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "random" (-159)
    end call method: start 80, params 2, ret values 1
  end call method: start 78, params 3, ret values 0
  begin call method
    move: # (78) = # (77)
    move: # (79) = const string "push" (-55)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "random" (-159)
    end call method: start 80, params 2, ret values 1
  end call method: start 78, params 3, ret values 0
  begin call method
    move: # (78) = # (77)
    move: # (79) = const string "push" (-55)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "random" (-159)
    end call method: start 80, params 2, ret values 1
  end call method: start 78, params 3, ret values 0
  move: var a (48) = # (77)


[279] print("random" a)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "random" (-159)
    move: # (80) = var a (48)
  end call method: start 77, params 4, ret values 0


[282] delete Array.__iter // delete our iterator, use default one

  begin call method
    move: # (77) = var _G (3)
    move: # (78) = const string "__delete" (-128)
    get property: # (79) = var _E (2) [const string "Array" (-81)]
    move: # (80) = const string "__iter" (-74)
  end call method: start 77, params 4, ret values 0


[284] function Object.map(func){

  begin function
    begin locals 10, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
      5 r
    end locals

[285] var r = {}

    new object 0: # (10)
    move: var r (5) = # (10)


[286] for(var i, v in this) r[i] = func(v)

    begin scope
      begin locals 4
        6 i
        7 v
        8 #func
        9 #valid
      end locals




      begin call method
        move: # (10) = param this (1)
        move: # (11) = const string "__iter" (-74)
      end call method: start 10, params 2, ret values 1
      move: var #func (8) = # (10)
      begin loop
        begin call
          move: # (10) = var #func (8)
          move: # (11) = const null (-1)
        end call: start 10, params 2, ret values 3
        move: var v (7) = # (12)
        move: var i (6) = # (11)
        move: var #valid (9) = # (10)

        begin if
          begin bool exp
            move: # (10) = var #valid (9)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0

        begin call
          move: # (10) = param func (2)
          move: # (11) = const null (-1)
          move: # (12) = var v (7)
        end call: start 10, params 3, ret values 1
        set property: var r (5) [var i (6)] = # (10)
      end loop ret values 0
    end scope ret values 0


[287] return r

    return: var r (5), count 1
  end function: # (77), index 26

[284] function Object.map(func){

  get property: # (78) = var _E (2) [const string "Object" (-160)]
  set property: # (78) [const string "map" (-161)] = # (77)


[290] function Array.map(func){

  begin function
    begin locals 10, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
      5 r
    end locals

[291] var r = []

    new array 0: # (10)
    move: var r (5) = # (10)


[292] for(var i, v in this) r[i] = func(v)

    begin scope
      begin locals 4
        6 i
        7 v
        8 #func
        9 #valid
      end locals




      begin call method
        move: # (10) = param this (1)
        move: # (11) = const string "__iter" (-74)
      end call method: start 10, params 2, ret values 1
      move: var #func (8) = # (10)
      begin loop
        begin call
          move: # (10) = var #func (8)
          move: # (11) = const null (-1)
        end call: start 10, params 2, ret values 3
        move: var v (7) = # (12)
        move: var i (6) = # (11)
        move: var #valid (9) = # (10)

        begin if
          begin bool exp
            move: # (10) = var #valid (9)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0

        begin call
          move: # (10) = param func (2)
          move: # (11) = const null (-1)
          move: # (12) = var v (7)
        end call: start 10, params 3, ret values 1
        set property: var r (5) [var i (6)] = # (10)
      end loop ret values 0
    end scope ret values 0


[293] return r

    return: var r (5), count 1
  end function: # (77), index 27

[290] function Array.map(func){

  get property: # (78) = var _E (2) [const string "Array" (-81)]
  set property: # (78) [const string "map" (-161)] = # (77)


[296] a = a.map {|a| a*100}

  begin call method
    move: # (77) = var a (48)
    move: # (78) = const string "map" (-161)
    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
      end locals
        # (5) = param a (2) [operator *] const number 100 (-22)
      return: # (5), count 1
    end function: # (79), index 28
  end call method: start 77, params 3, ret values 1
  move: var a (48) = # (77)


[297] print("mult 100" a)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "mult 100" (-162)
    move: # (80) = var a (48)
  end call method: start 77, params 4, ret values 0


[298] print("math.ceil" a.map(math.ceil))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.ceil" (-163)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      get property: # (82) = var _E (2) [const string "math" (-158)]
      get property: # (82) = # (82) [const string "ceil" (-164)]
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[299] print("math.floor" a.map(math.floor))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.floor" (-165)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      get property: # (82) = var _E (2) [const string "math" (-158)]
      get property: # (82) = # (82) [const string "floor" (-166)]
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[300] print("math.round(-1)" a.map{|a| math.round(a, -1)})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.round(-1)" (-167)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-158)]
            move: # (6) = const string "round" (-168)
            move: # (7) = param a (2)
            # (8) = [neg] const number 1 (-5)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (82), index 29
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[301] print("math.round(2)" a.map{|a| math.round(a, 2)})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.round(2)" (-169)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-158)]
            move: # (6) = const string "round" (-168)
            move: # (7) = param a (2)
            move: # (8) = const number 2 (-10)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (82), index 30
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[302] print("math.sin" a.map(math.sin))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.sin" (-170)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      get property: # (82) = var _E (2) [const string "math" (-158)]
      get property: # (82) = # (82) [const string "sin" (-171)]
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[303] print("math.cos" a.map(math.cos))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.cos" (-172)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      get property: # (82) = var _E (2) [const string "math" (-158)]
      get property: # (82) = # (82) [const string "cos" (-173)]
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[304] print("math.tan" a.map(math.tan))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "math.tan" (-174)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      get property: # (82) = var _E (2) [const string "math" (-158)]
      get property: # (82) = # (82) [const string "tan" (-175)]
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[306] _E = math

  get property: var _E (2) = var _E (2) [const string "math" (-158)]


[307] print "Extend local environment to be able to use math module without namespace"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Extend local environment to be able to use math module without namespace" (-176)
  end call method: start 77, params 3, ret values 0


[308] print("round(3)" a.map{|a| round(a, 3)})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "round(3)" (-177)
    begin call method
      move: # (80) = var a (48)
      move: # (81) = const string "map" (-161)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "round" (-168)
            move: # (7) = param a (2)
            move: # (8) = const number 3 (-9)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (82), index 31
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[309] print("PI" PI)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "PI" (-178)
    get property: # (80) = var _E (2) [const string "PI" (-178)]
  end call method: start 77, params 4, ret values 0


[311] var core = require("core")

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "require" (-179)
    move: # (79) = const string "core" (-149)
  end call method: start 77, params 3, ret values 1
  move: var core (49) = # (77)


[312] print("core.eval(math.round(13.5))" core.eval("math.round(13.5)"))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "core.eval(math.round(13.5))" (-180)
    begin call method
      move: # (80) = var core (49)
      move: # (81) = const string "eval" (-181)
      move: # (82) = const string "math.round(13.5)" (-182)
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[313] print("eval(math.round(13.5))" eval("math.round(13.5)"))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "eval(math.round(13.5))" (-183)
    begin call method
      move: # (80) = var _E (2)
      move: # (81) = const string "eval" (-181)
      move: # (82) = const string "math.round(13.5)" (-182)
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[314] print("==============")

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "==============" (-184)
  end call method: start 77, params 3, ret values 0


[315] print("Next: math namespace is not used\nbut eval executes code in global environment by default\nso eval(round(13.5))" eval("round(13.5)"))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Next: math namespace is not used
but eval execut...obal environment by default
so eval(round(13.5))" (-185)
    begin call method
      move: # (80) = var _E (2)
      move: # (81) = const string "eval" (-181)
      move: # (82) = const string "round(13.5)" (-186)
    end call method: start 80, params 3, ret values 1
  end call method: start 77, params 4, ret values 0


[316] print("run eval in space of the current environment (round(13.5))" eval("round(13.5)", _E))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "run eval in space of the current environment (round(13.5))" (-187)
    begin call method
      move: # (80) = var _E (2)
      move: # (81) = const string "eval" (-181)
      move: # (82) = const string "round(13.5)" (-186)
      move: # (83) = var _E (2)
    end call method: start 80, params 4, ret values 1
  end call method: start 77, params 4, ret values 0


[318] var __planet = "Mars"

  move: var __planet (50) = const string "Mars" (-188)


[319] function get planet(){ return __planet }

  begin function
    begin locals 4, stack 5
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      get upvalue: # (4) = var __planet (50 1)
    return: # (4), count 1
  end function: # (77), index 32
  set property: var _E (2) [const string "__get@planet" (-189)] = # (77)


[320] function set planet(a){ __planet = a }

  begin function
    begin locals 5, stack 6
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
    end locals
      move: # (5) = param a (2)
      set upvalue: var __planet (50 1) = # (5)
    return: # (5), count 1
  end function: # (77), index 33
  set property: var _E (2) [const string "__set@planet" (-190)] = # (77)


[322] print "Planet should be Mars: "..planet

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "Planet should be Mars: " (-191)
      get property: # (82) = var _E (2) [const string "planet" (-192)]
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[323] planet = "Mercury"

  move: # (77) = const string "Mercury" (-193)
  set property: var _E (2) [const string "planet" (-192)] = # (77)


[324] print "Planet should be Mercury: "..planet

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "Planet should be Mercury: " (-194)
      get property: # (82) = var _E (2) [const string "planet" (-192)]
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[326] function compareValues(a, b){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
      6 x
      7 y
    end locals

[327] var x, y = numberOf(a), numberOf(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "numberOf" (-196)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "numberOf" (-196)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[328] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[329] x, y = stringOf(a), stringOf(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "stringOf" (-197)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "stringOf" (-197)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[330] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[331] return a <=> b

      # (8) = param a (2) [operator <=>] param b (3)
    return: # (8), count 1
  end function: # (77), index 34
  set property: var _E (2) [const string "compareValues" (-195)] = # (77)


[334] function Object.__getdim(i, count){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 i (param)
      3 count (param)
      4 _E
      5 _G
    end locals

[335] return this.sub(i, count)

      begin call method
        move: # (6) = param this (1)
        move: # (7) = const string "sub" (-198)
        move: # (8) = param i (2)
        move: # (9) = param count (3)
      end call method: start 6, params 4, ret values 1
    return: # (6), count 1
  end function: # (77), index 35

[334] function Object.__getdim(i, count){

  get property: # (78) = var _E (2) [const string "Object" (-160)]
  set property: # (78) [const string "__getdim" (-136)] = # (77)


[338] function String.__get(i){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 i (param)
      3 _E
      4 _G
    end locals

[339] return this.sub(i, 1)

      begin call method
        move: # (5) = param this (1)
        move: # (6) = const string "sub" (-198)
        move: # (7) = param i (2)
        move: # (8) = const number 1 (-5)
      end call method: start 5, params 4, ret values 1
    return: # (5), count 1
  end function: # (77), index 36

[338] function String.__get(i){

  get property: # (78) = var _E (2) [const string "String" (-199)]
  set property: # (78) [const string "__get" (-125)] = # (77)


[342] print "Sorted array"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Sorted array" (-200)
  end call method: start 77, params 3, ret values 0


[343] print([9 4 0 276 15 39 3].sort())

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new array 7: # (79)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 9 (-21)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 0 (-17)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 276 (-23)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 39 (-24)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
    end call method: start 79, params 2, ret values 1
  end call method: start 77, params 3, ret values 0


[345] function Object.do(func){

  begin function
    begin locals 5, stack 8
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[346] func.call(this)

    begin call method
      move: # (5) = param func (2)
      move: # (6) = const string "call" (-105)
      move: # (7) = param this (1)
    end call method: start 5, params 3, ret values 0


[347] return this

    return: param this (1), count 1
  end function: # (77), index 37

[345] function Object.do(func){

  get property: # (78) = var _E (2) [const string "Object" (-160)]
  set property: # (78) [const string "do" (-202)] = # (77)


[350] print "User sorted array by keys"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "User sorted array by keys" (-203)
  end call method: start 77, params 3, ret values 0


[351] print([0 1 2 3 4 5 6 7 8 9].do {||

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new array 10: # (79)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 0 (-17)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 1 (-5)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 2 (-10)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 5 (-7)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 6 (-4)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 7 (-12)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 8 (-25)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 9 (-21)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "do" (-202)
      begin function
        begin locals 10, stack 13
          0 _F (param)
          1 this (param)
          2 _E
          3 _G
          4 keys
          5 values
        end locals

[352] var keys = this.keys.sort{|a b| (a % 3) <=> (b % 3)}

        begin call method
          get property: # (10) = param this (1) [const string "keys" (-204)]
          move: # (11) = const string "sort" (-201)
          begin function
            begin locals 6, stack 9
              0 _F (param)
              1 this (param)
              2 a (param)
              3 b (param)
              4 _E
              5 _G
            end locals
              # (6) = param a (2) [operator %] const number 3 (-9)
              # (7) = param b (3) [operator %] const number 3 (-9)
              # (6) = # (6) [operator <=>] # (7)
            return: # (6), count 1
          end function: # (12), index 39
        end call method: start 10, params 3, ret values 1
        move: var keys (4) = # (10)

[353] var values = this.clone()

        begin call method
          move: # (10) = param this (1)
          move: # (11) = const string "clone" (-205)
        end call method: start 10, params 2, ret values 1
        move: var values (5) = # (10)

[354] for(var k, v in keys){

        begin scope
          begin locals 4
            6 k
            7 v
            8 #func
            9 #valid
          end locals




          begin call method
            move: # (10) = var keys (4)
            move: # (11) = const string "__iter" (-74)
          end call method: start 10, params 2, ret values 1
          move: var #func (8) = # (10)
          begin loop
            begin call
              move: # (10) = var #func (8)
              move: # (11) = const null (-1)
            end call: start 10, params 2, ret values 3
            move: var v (7) = # (12)
            move: var k (6) = # (11)
            move: var #valid (9) = # (10)

            begin if
              begin bool exp
                move: # (10) = var #valid (9)
                # (10) = [logic not] # (10)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[355] this[v] = values[v]

            begin scope
              get property: # (10) = var values (5) [var v (7)]
              set property: param this (1) [var v (7)] = # (10)
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end function: # (81), index 38
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 0


[359] print "Sorted array (reverse)"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Sorted array (reverse)" (-206)
  end call method: start 77, params 3, ret values 0


[360] print([9 4 0 276 15 39 3].sort{|a b| b <=> a})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new array 7: # (79)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 9 (-21)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 0 (-17)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 276 (-23)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 39 (-24)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (81), index 40
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 0


[362] print "User sorted array"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "User sorted array" (-207)
  end call method: start 77, params 3, ret values 0


[363] print([9 4 0 276 15 39 3].sort{|a b| (a % 10) <=> (b % 10)})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new array 7: # (79)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 9 (-21)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 0 (-17)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 276 (-23)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 39 (-24)
      end call method: start 80, params 3, ret values 0
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
      begin function
        begin locals 6, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param a (2) [operator %] const number 10 (-13)
          # (7) = param b (3) [operator %] const number 10 (-13)
          # (6) = # (6) [operator <=>] # (7)
        return: # (6), count 1
      end function: # (81), index 41
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 0


[365] print "Sorted object by values"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Sorted object by values" (-208)
  end call method: start 77, params 3, ret values 0


[366] print({b=9 4 d=0 c=276 15 a=39 3}.sort())

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new object 7: # (79)
      init property: # (79) [const string "b" (-209)] = const number 9 (-21)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "d" (-210)] = const number 0 (-17)
      init property: # (79) [const string "c" (-155)] = const number 276 (-23)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "a" (-154)] = const number 39 (-24)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
    end call method: start 79, params 2, ret values 1
  end call method: start 77, params 3, ret values 0


[368] print "Sorted object by values (reverse)"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Sorted object by values (reverse)" (-211)
  end call method: start 77, params 3, ret values 0


[369] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b| b <=> a})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new object 7: # (79)
      init property: # (79) [const string "b" (-209)] = const number 9 (-21)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "d" (-210)] = const number 0 (-17)
      init property: # (79) [const string "c" (-155)] = const number 276 (-23)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "a" (-154)] = const number 39 (-24)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (81), index 42
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 0


[371] print "Sorted object by keys"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Sorted object by keys" (-212)
  end call method: start 77, params 3, ret values 0


[372] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(ka kb) })

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new object 7: # (79)
      init property: # (79) [const string "b" (-209)] = const number 9 (-21)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "d" (-210)] = const number 0 (-17)
      init property: # (79) [const string "c" (-155)] = const number 276 (-23)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "a" (-154)] = const number 39 (-24)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-195)
            move: # (10) = param ka (4)
            move: # (11) = param kb (5)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (81), index 43
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 0


[374] print "Sorted object by keys (reverse)"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Sorted object by keys (reverse)" (-213)
  end call method: start 77, params 3, ret values 0


[375] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(kb ka) })

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      new object 7: # (79)
      init property: # (79) [const string "b" (-209)] = const number 9 (-21)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 4 (-8)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "d" (-210)] = const number 0 (-17)
      init property: # (79) [const string "c" (-155)] = const number 276 (-23)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 15 (-6)
      end call method: start 80, params 3, ret values 0
      init property: # (79) [const string "a" (-154)] = const number 39 (-24)
      begin call method
        move: # (80) = # (79)
        move: # (81) = const string "push" (-55)
        move: # (82) = const number 3 (-9)
      end call method: start 80, params 3, ret values 0
      move: # (80) = const string "sort" (-201)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-195)
            move: # (10) = param kb (5)
            move: # (11) = param ka (4)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (81), index 44
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 0


[377] function printBackTrace(skipNumFuncs){

  begin function
    begin locals 9, stack 22
      0 _F (param)
      1 this (param)
      2 skipNumFuncs (param)
      3 _E
      4 _G
    end locals

[378] for(var i, t in debugBackTrace(skipNumFuncs + 1)){ // skip printBackTrace

    begin scope
      begin locals 4
        5 i
        6 t
        7 #func
        8 #valid
      end locals




      begin call method
        begin call method
          move: # (9) = var _E (3)
          move: # (10) = const string "debugBackTrace" (-215)
          # (11) = param skipNumFuncs (2) [operator +] const number 1 (-5)
        end call method: start 9, params 3, ret values 1
        move: # (10) = const string "__iter" (-74)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var t (6) = # (11)
        move: var i (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[379] printf("#%d %s%s: %s, args: %s\n", i, t.file,

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-216)
            move: # (11) = const string "#%d %s%s: %s, args: %s
" (-217)
            move: # (12) = var i (5)
            get property: # (13) = var t (6) [const string "file" (-218)]

[380] t.line > 0 ? "("..t.line..","..t.pos..")" : ""

            begin question
              begin bool exp
                get property: # (14) = var t (6) [const string "line" (-219)]
                move: # (15) = const number 0 (-17)
                # (14) = # (14) [logic >] # (15)
              end bool exp
              begin then value
                begin call method
                  move: # (14) = var _G (4)
                  move: # (15) = const string "concat" (-45)
                  move: # (16) = const string "(" (-220)
                  get property: # (17) = var t (6) [const string "line" (-219)]
                  move: # (18) = const string "," (-221)
                  get property: # (19) = var t (6) [const string "pos" (-222)]
                  move: # (20) = const string ")" (-223)
                end call method: start 14, params 7, ret values 1
              end then value
              begin else value
                move: # (14) = const string "" (-224)
              end else value
            end question ret values 1

[381] t.object === _G ? t.name : t.object ? "{obj-"..t.object.id.."}."..t.name : t.name, t.arguments);

            begin question
              begin bool exp
                get property: # (15) = var t (6) [const string "object" (-225)]
                move: # (16) = var _G (4)
                # (15) = # (15) [logic ===] # (16)
              end bool exp
              begin then value
                get property: # (15) = var t (6) [const string "name" (-226)]
              end then value
              begin else value
                begin question
                  begin bool exp
                    get property: # (15) = var t (6) [const string "object" (-225)]
                  end bool exp
                  begin then value
                    begin call method
                      move: # (15) = var _G (4)
                      move: # (16) = const string "concat" (-45)
                      move: # (17) = const string "{obj-" (-227)
                      get property: # (18) = var t (6) [const string "object" (-225)]
                      get property: # (18) = # (18) [const string "id" (-228)]
                      move: # (19) = const string "}." (-229)
                      get property: # (20) = var t (6) [const string "name" (-226)]
                    end call method: start 15, params 6, ret values 1
                  end then value
                  begin else value
                    get property: # (15) = var t (6) [const string "name" (-226)]
                  end else value
                end question ret values 1
              end else value
            end question ret values 1
            get property: # (16) = var t (6) [const string "arguments" (-230)]
          end call method: start 9, params 8, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (77), index 45
  set property: var _E (2) [const string "printBackTrace" (-214)] = # (77)


[386] print "simulate exception..."

  begin try catch
    begin scope
      begin locals 3
        51 a
        52 b
        53 c
      end locals
      begin call method
        move: # (77) = var _E (2)
        move: # (78) = const string "print" (-31)
        move: # (79) = const string "simulate exception..." (-231)
      end call method: start 77, params 3, ret values 0


[387] var a, b = 2, 0

      move: # (77) = const number 2 (-10)
      move: var b (52) = const number 0 (-17)
      move: var a (51) = # (77)


[388] var c = a / b

      var c (53) = var a (51) [operator /] var b (52)
    end scope ret values 0
  catch

[389] }catch(e){

    begin scope
      begin locals 1
        54 e
      end locals

[390] print "exception: "..e.message

      begin scope
        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "print" (-31)
          begin call method
            move: # (79) = var _G (3)
            move: # (80) = const string "concat" (-45)
            move: # (81) = const string "exception: " (-232)
            get property: # (82) = var e (54) [const string "message" (-233)]
          end call method: start 79, params 4, ret values 1
        end call method: start 77, params 3, ret values 0


[391] for(var i, t in e.trace){

        begin scope
          begin locals 4
            55 i
            56 t
            57 #func
            58 #valid
          end locals




          begin call method
            get property: # (77) = var e (54) [const string "trace" (-234)]
            move: # (78) = const string "__iter" (-74)
          end call method: start 77, params 2, ret values 1
          move: var #func (57) = # (77)
          begin loop
            begin call
              move: # (77) = var #func (57)
              move: # (78) = const null (-1)
            end call: start 77, params 2, ret values 3
            move: var t (56) = # (79)
            move: var i (55) = # (78)
            move: var #valid (58) = # (77)

            begin if
              begin bool exp
                move: # (77) = var #valid (58)
                # (77) = [logic not] # (77)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[392] printf("#%d %s%s: %s, args: %s\n", i, t.file,

            begin scope
              begin call method
                move: # (77) = var _E (2)
                move: # (78) = const string "printf" (-216)
                move: # (79) = const string "#%d %s%s: %s, args: %s
" (-217)
                move: # (80) = var i (55)
                get property: # (81) = var t (56) [const string "file" (-218)]

[393] t.line > 0 ? "("..t.line..","..t.pos..")" : ""

                begin question
                  begin bool exp
                    get property: # (82) = var t (56) [const string "line" (-219)]
                    move: # (83) = const number 0 (-17)
                    # (82) = # (82) [logic >] # (83)
                  end bool exp
                  begin then value
                    begin call method
                      move: # (82) = var _G (3)
                      move: # (83) = const string "concat" (-45)
                      move: # (84) = const string "(" (-220)
                      get property: # (85) = var t (56) [const string "line" (-219)]
                      move: # (86) = const string "," (-221)
                      get property: # (87) = var t (56) [const string "pos" (-222)]
                      move: # (88) = const string ")" (-223)
                    end call method: start 82, params 7, ret values 1
                  end then value
                  begin else value
                    move: # (82) = const string "" (-224)
                  end else value
                end question ret values 1

[394] t.object === _G ? t.name : t.object ? "{obj-"..t.object.id.."}."..t.name : t.name, t.arguments);

                begin question
                  begin bool exp
                    get property: # (83) = var t (56) [const string "object" (-225)]
                    move: # (84) = var _G (3)
                    # (83) = # (83) [logic ===] # (84)
                  end bool exp
                  begin then value
                    get property: # (83) = var t (56) [const string "name" (-226)]
                  end then value
                  begin else value
                    begin question
                      begin bool exp
                        get property: # (83) = var t (56) [const string "object" (-225)]
                      end bool exp
                      begin then value
                        begin call method
                          move: # (83) = var _G (3)
                          move: # (84) = const string "concat" (-45)
                          move: # (85) = const string "{obj-" (-227)
                          get property: # (86) = var t (56) [const string "object" (-225)]
                          get property: # (86) = # (86) [const string "id" (-228)]
                          move: # (87) = const string "}." (-229)
                          get property: # (88) = var t (56) [const string "name" (-226)]
                        end call method: start 83, params 6, ret values 1
                      end then value
                      begin else value
                        get property: # (83) = var t (56) [const string "name" (-226)]
                      end else value
                    end question ret values 1
                  end else value
                end question ret values 1
                get property: # (84) = var t (56) [const string "arguments" (-230)]
              end call method: start 77, params 8, ret values 0
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end scope ret values 0
    end scope ret values 0
  end try catch


[399] var function testFunc(arg1, arg2){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 arg1 (param)
      3 arg2 (param)
      4 _E
      5 _G
      6 testFunc2
      7 i
    end locals

[400] var testFunc2 = {|arg1 arg2 arg3|

    begin function
      begin locals 9, stack 13
        0 _F (param)
        1 this (param)
        2 arg1 (param)
        3 arg2 (param)
        4 arg3 (param)
        5 _E
        6 _G
        7 testFunc3
        8 i
      end locals

[401] var testFunc3 = {|arg1|

      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 arg1 (param)
          3 _E
          4 _G
          5 i
        end locals

[402] printBackTrace()

        begin call method
          move: # (6) = var _E (3)
          move: # (7) = const string "printBackTrace" (-214)
        end call method: start 6, params 2, ret values 0

[403] var i = 0 // add some code at the end of function to prevent tail call

        move: var i (5) = const number 0 (-17)
      end function: var testFunc3 (7), index 48

[405] testFunc3(1, 2)

      begin call
        move: # (9) = var testFunc3 (7)
        move: # (10) = const null (-1)
        move: # (11) = const number 1 (-5)
        move: # (12) = const number 2 (-10)
      end call: start 9, params 4, ret values 0

[406] var i = 0 // add some code at the end of function to prevent tail call

      move: var i (8) = const number 0 (-17)
    end function: var testFunc2 (6), index 47

[408] testFunc2(1, 2)

    begin call
      move: # (8) = var testFunc2 (6)
      move: # (9) = const null (-1)
      move: # (10) = const number 1 (-5)
      move: # (11) = const number 2 (-10)
    end call: start 8, params 4, ret values 0

[409] var i = 0 // add some code at the end of function to prevent tail call

    move: var i (7) = const number 0 (-17)
  end function: var testFunc (59), index 46


[411] print "Test back trace"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Test back trace" (-235)
  end call method: start 77, params 3, ret values 0


[412] testFunc(1, 2)

  begin call
    move: # (77) = var testFunc (59)
    move: # (78) = const null (-1)
    move: # (79) = const number 1 (-5)
    move: # (80) = const number 2 (-10)
  end call: start 77, params 4, ret values 0


[415] print "Test 5 < 10 ? 7 : 3 --> "..(5 < 10 ? 7 : 3)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "Test 5 < 10 ? 7 : 3 --> " (-236)
      begin question
        begin bool exp
          move: # (82) = const number 5 (-7)
          move: # (83) = const number 10 (-13)
          # (82) = # (82) [logic <] # (83)
        end bool exp
        begin then value
          move: # (82) = const number 7 (-12)
        end then value
        begin else value
          move: # (82) = const number 3 (-9)
        end else value
      end question ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[416] print "Test in operator (should be true) "..("name" in {x = 0 y = 0 name = 0 index = 0})

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "Test in operator (should be true) " (-237)
      begin call method
        move: # (82) = var _G (3)
        move: # (83) = const string "__in" (-238)
        move: # (84) = const string "name" (-226)
        new object 4: # (85)
        init property: # (85) [const string "x" (-53)] = const number 0 (-17)
        init property: # (85) [const string "y" (-54)] = const number 0 (-17)
        init property: # (85) [const string "name" (-226)] = const number 0 (-17)
        init property: # (85) [const string "index" (-239)] = const number 0 (-17)
      end call method: start 82, params 4, ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[418] print "Test _F and recursion"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    move: # (79) = const string "Test _F and recursion" (-240)
  end call method: start 77, params 3, ret values 0


[419] print "factorial(20) = " .. {|a| a <= 1 ? 1 : a*_F(a-1)}(20)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    begin call method
      move: # (79) = var _G (3)
      move: # (80) = const string "concat" (-45)
      move: # (81) = const string "factorial(20) = " (-241)
      begin call
        begin function
          begin locals 5, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 _E
            4 _G
          end locals
            begin question
              begin bool exp
                move: # (5) = param a (2)
                move: # (6) = const number 1 (-5)
                # (5) = # (5) [logic <=] # (6)
              end bool exp
              begin then value
                move: # (5) = const number 1 (-5)
              end then value
              begin else value
                begin call
                  move: # (6) = param _F (0)
                  move: # (7) = const null (-1)
                  # (8) = param a (2) [operator -] const number 1 (-5)
                end call: start 6, params 3, ret values 1
                # (5) = param a (2) [operator *] # (6)
              end else value
            end question ret values 1
          return: # (5), count 1
        end function: # (82), index 49
        move: # (83) = const null (-1)
        move: # (84) = const number 20 (-14)
      end call: start 82, params 3, ret values 1
    end call method: start 79, params 4, ret values 1
  end call method: start 77, params 3, ret values 0


[421] function Object.each(func){

  begin function
    begin locals 9, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[422] for(var k, v in this){

    begin scope
      begin locals 4
        5 k
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = param this (1)
        move: # (10) = const string "__iter" (-74)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var k (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[423] func(k, v)

        begin scope
          begin call
            move: # (9) = param func (2)
            move: # (10) = const null (-1)
            move: # (11) = var k (5)
            move: # (12) = var v (6)
          end call: start 9, params 4, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (77), index 50

[421] function Object.each(func){

  get property: # (78) = var _E (2) [const string "Object" (-160)]
  set property: # (78) [const string "each" (-242)] = # (77)


[427] [10 20 30 40].each {|i a|

  begin call method
    new array 4: # (77)
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const number 10 (-13)
    end call method: start 78, params 3, ret values 0
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const number 20 (-14)
    end call method: start 78, params 3, ret values 0
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const number 30 (-15)
    end call method: start 78, params 3, ret values 0
    begin call method
      move: # (78) = # (77)
      move: # (79) = const string "push" (-55)
      move: # (80) = const number 40 (-16)
    end call method: start 78, params 3, ret values 0
    move: # (78) = const string "each" (-242)
    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 i (param)
        3 a (param)
        4 _E
        5 _G
      end locals

[428] print a

        begin call method
          move: # (6) = var _E (4)
          move: # (7) = const string "print" (-31)
          move: # (8) = param a (3)
        end call method: start 6, params 3, ret values 1
      return: # (6), count 1
    end function: # (79), index 51
  end call method: start 77, params 3, ret values 0


[448] printf("def: %v, decimal: %d, string: %s, def:%v\n", "John", 123.45678, 123.45678, 123.45678)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "printf" (-216)
    move: # (79) = const string "def: %v, decimal: %d, string: %s, def:%v
" (-243)
    move: # (80) = const string "John" (-244)
    move: # (81) = const number 123.457 (-26)
    move: # (82) = const number 123.457 (-26)
    move: # (83) = const number 123.457 (-26)
  end call method: start 77, params 7, ret values 0


[449] printf("number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f\n", math.round(123.45678, 2), math.round(123.45678, 2), 123.45678, 123.45678)

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "printf" (-216)
    move: # (79) = const string "number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f
" (-245)
    begin call method
      get property: # (80) = var _E (2) [const string "math" (-158)]
      move: # (81) = const string "round" (-168)
      move: # (82) = const number 123.457 (-26)
      move: # (83) = const number 2 (-10)
    end call method: start 80, params 4, ret values 1
    begin call method
      get property: # (81) = var _E (2) [const string "math" (-158)]
      move: # (82) = const string "round" (-168)
      move: # (83) = const number 123.457 (-26)
      move: # (84) = const number 2 (-10)
    end call method: start 81, params 4, ret values 1
    move: # (82) = const number 123.457 (-26)
    move: # (83) = const number 123.457 (-26)
  end call method: start 77, params 7, ret values 0


[450] printf("%s\n", sprintf("number: %n, float(%%.-2f): %.-2f", 12876.54321, 12876.54321))

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "printf" (-216)
    move: # (79) = const string "%s
" (-246)
    begin call method
      move: # (80) = var _E (2)
      move: # (81) = const string "sprintf" (-247)
      move: # (82) = const string "number: %n, float(%%.-2f): %.-2f" (-248)
      move: # (83) = const number 12876.5 (-27)
      move: # (84) = const number 12876.5 (-27)
    end call method: start 80, params 5, ret values 1
  end call method: start 77, params 4, ret values 0


[453] print "Buffer usage"

  begin scope
    begin locals 1
      60 buf
    end locals
    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      move: # (79) = const string "Buffer usage" (-249)
    end call method: start 77, params 3, ret values 0


[454] var buf = Buffer(123, "abc", "def")

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "Buffer" (-250)
      move: # (79) = const number 123 (-28)
      move: # (80) = const string "abc" (-251)
      move: # (81) = const string "def" (-252)
    end call method: start 77, params 5, ret values 1
    move: var buf (60) = # (77)


[455] buf.append(4.5, "-append")

    begin call method
      move: # (77) = var buf (60)
      move: # (78) = const string "append" (-253)
      move: # (79) = const number 4.5 (-29)
      move: # (80) = const string "-append" (-254)
    end call method: start 77, params 4, ret values 0


[456] buf.printf("-%v\n", 123.4567)

    begin call method
      move: # (77) = var buf (60)
      move: # (78) = const string "printf" (-216)
      move: # (79) = const string "-%v
" (-255)
      move: # (80) = const number 123.457 (-30)
    end call method: start 77, params 4, ret values 0


[457] str = toString(buf)

    begin call method
      move: # (77) = var _E (2)
      get xconst: # (78) = const string "toString" (-257)
      move: # (79) = var buf (60)
    end call method: start 77, params 3, ret values 1
    get xconst: # (78) = const string "str" (-256)
    set property: var _E (2) [# (78)] = # (77)


[458] print str

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get xconst: # (79) = const string "str" (-256)
      get property: # (79) = var _E (2) [# (79)]
    end call method: start 77, params 3, ret values 0
  end scope ret values 0


[462] print "File usage"

  begin scope
    begin locals 1
      61 f
    end locals
    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get xconst: # (79) = const string "File usage" (-258)
    end call method: start 77, params 3, ret values 0


[463] var f = File(__FILE__, "rb")

    begin call method
      move: # (77) = var _E (2)
      get xconst: # (78) = const string "File" (-259)
      begin call method
        move: # (79) = var _G (3)
        move: # (80) = const string "__getfilename" (-34)
      end call method: start 79, params 2, ret values 1
      get xconst: # (80) = const string "rb" (-260)
    end call method: start 77, params 4, ret values 1
    move: var f (61) = # (77)


[464] str = f.read(100)

    begin call method
      move: # (77) = var f (61)
      get xconst: # (78) = const string "read" (-261)
      move: # (79) = const number 100 (-22)
    end call method: start 77, params 3, ret values 1
    get xconst: # (78) = const string "str" (-256)
    set property: var _E (2) [# (78)] = # (77)


[466] print str

    begin call method
      move: # (77) = var _E (2)
      move: # (78) = const string "print" (-31)
      get xconst: # (79) = const string "str" (-256)
      get property: # (79) = var _E (2) [# (79)]
    end call method: start 77, params 3, ret values 0
  end scope ret values 0


[469] function Number.times(func){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[470] for(var i = 0; i < this; i++){

    begin scope
      begin locals 1
        5 i
      end locals
      move: var i (5) = const number 0 (-17)

      begin loop
        begin if
          begin bool exp
            move: # (6) = var i (5)
            move: # (7) = param this (1)
            # (6) = # (6) [logic <] # (7)
            # (6) = [logic not] # (6)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[471] func(i)

        begin scope
          begin call
            move: # (6) = param func (2)
            move: # (7) = const null (-1)
            move: # (8) = var i (5)
          end call: start 6, params 3, ret values 0
        end scope ret values 0


[470] for(var i = 0; i < this; i++){

        var i (5) = var i (5) [operator +] const number 1 (-5)
      end loop ret values 0
    end scope ret values 0
  end function: # (77), index 52

[469] function Number.times(func){

  get xconst: # (78) = const string "Number" (-262)
  get property: # (78) = var _E (2) [# (78)]
  get xconst: # (79) = const string "times" (-263)
  set property: # (78) [# (79)] = # (77)


[474] print "Test 10.times"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "Test 10.times" (-264)
  end call method: start 77, params 3, ret values 0


[475] 10.times{|i| print i }

  begin call method
    move: # (77) = const number 10 (-13)
    get xconst: # (78) = const string "times" (-263)
    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 i (param)
        3 _E
        4 _G
      end locals
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-31)
          move: # (7) = param i (2)
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (79), index 53
  end call method: start 77, params 3, ret values 0


[477] Range = {

  new object 2: # (77)

[478] __construct = function(a, b){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals

[479] if(b){

    begin if
      begin bool exp
        move: # (6) = param b (3)
      end bool exp
      begin then

[480] @a, @b = a, b

        begin scope
          move: # (6) = param a (2)
          move: # (7) = param b (3)
          set property: param this (1) [const string "b" (-209)] = # (7)
          set property: param this (1) [const string "a" (-154)] = # (6)
        end scope ret values 0
      end then
      begin else

[482] @a, @b = 0, a - 1

        begin scope
          move: # (6) = const number 0 (-17)
          # (7) = param a (2) [operator -] const number 1 (-5)
          set property: param this (1) [const string "b" (-209)] = # (7)
          set property: param this (1) [const string "a" (-154)] = # (6)
        end scope ret values 0
      end else
    end if ret values 0
  end function: # (79), index 54
  init property: # (77) [const string "__construct" (-92)] = # (79)

[485] __iter = function(){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
      4 a
      5 b
    end locals

[486] var a, b = @a, @b

    get property: # (6) = param this (1) [const string "a" (-154)]
    get property: var b (5) = param this (1) [const string "b" (-209)]
    move: var a (4) = # (6)


[487] return a <= b


[488] ? {|| a <= b && return true, a++ }

      begin question
        begin bool exp

[487] return a <= b

          move: # (6) = var a (4)
          move: # (7) = var b (5)
          # (6) = # (6) [logic <=] # (7)
        end bool exp
        begin then value

[488] ? {|| a <= b && return true, a++ }

          begin function
            begin locals 5, stack 8
              0 _F (param)
              1 this (param)
              2 _E
              3 _G
              4 #temp
            end locals
              get upvalue: # (5) = var a (4 1)
              get upvalue: # (6) = var b (5 1)
              # (5) = # (5) [logic <=] # (6)
              logic &&: # (5)
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = var a (4 1)
                  get upvalue: # (6) = var a (4 1)
                  # (6) = # (6) [operator +] const number 1 (-5)
                  set upvalue: var a (4 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
            return: # (5), count 1
          end function: # (6), index 56
        end then value
        begin else value

[489] : {|| a >= b && return true, a-- }

          begin function
            begin locals 5, stack 8
              0 _F (param)
              1 this (param)
              2 _E
              3 _G
              4 #temp
            end locals
              get upvalue: # (5) = var a (4 1)
              get upvalue: # (6) = var b (5 1)
              # (5) = # (5) [logic >=] # (6)
              logic &&: # (5)
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = var a (4 1)
                  get upvalue: # (6) = var a (4 1)
                  # (6) = # (6) [operator -] const number 1 (-5)
                  set upvalue: var a (4 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
            return: # (5), count 1
          end function: # (6), index 57
        end else value
      end question ret values 1
    return: # (6), count 1
  end function: # (79), index 55
  init property: # (77) [const string "__iter" (-74)] = # (79)

[477] Range = {

  get xconst: # (78) = const string "Range" (-265)
  set property: var _E (2) [# (78)] = # (77)


[493] print "Test for in Range(5)"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "Test for in Range(5)" (-266)
  end call method: start 77, params 3, ret values 0


[494] for(var i in Range(5))

  begin scope
    begin locals 3
      62 i
      63 #func
      64 #valid
    end locals



    begin call method
      begin call method
        move: # (77) = var _E (2)
        get xconst: # (78) = const string "Range" (-265)
        move: # (79) = const number 5 (-7)
      end call method: start 77, params 3, ret values 1
      move: # (78) = const string "__iter" (-74)
    end call method: start 77, params 2, ret values 1
    move: var #func (63) = # (77)

[495] print i

    begin loop

[494] for(var i in Range(5))


[495] print i

      begin call

[494] for(var i in Range(5))

        move: # (77) = var #func (63)

[495] print i

        move: # (78) = const null (-1)
      end call: start 77, params 2, ret values 2
      move: var i (62) = # (78)
      move: var #valid (64) = # (77)

      begin if
        begin bool exp

[494] for(var i in Range(5))

          move: # (77) = var #valid (64)
          # (77) = [logic not] # (77)
        end bool exp
        begin then

[495] print i

          break
        end then
      end if ret values 0

      begin call method
        move: # (77) = var _E (2)
        move: # (78) = const string "print" (-31)
        move: # (79) = var i (62)
      end call method: start 77, params 3, ret values 0
    end loop ret values 0
  end scope ret values 0


[497] print "Test for in Range(-2, -6)"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "Test for in Range(-2, -6)" (-267)
  end call method: start 77, params 3, ret values 0


[498] for(var i in Range(-2, -6))

  begin scope
    begin locals 3
      65 i
      66 #func
      67 #valid
    end locals



    begin call method
      begin call method
        move: # (77) = var _E (2)
        get xconst: # (78) = const string "Range" (-265)
        # (79) = [neg] const number 2 (-10)
        # (80) = [neg] const number 6 (-4)
      end call method: start 77, params 4, ret values 1
      move: # (78) = const string "__iter" (-74)
    end call method: start 77, params 2, ret values 1
    move: var #func (66) = # (77)

[499] print i

    begin loop

[498] for(var i in Range(-2, -6))


[499] print i

      begin call

[498] for(var i in Range(-2, -6))

        move: # (77) = var #func (66)

[499] print i

        move: # (78) = const null (-1)
      end call: start 77, params 2, ret values 2
      move: var i (65) = # (78)
      move: var #valid (67) = # (77)

      begin if
        begin bool exp

[498] for(var i in Range(-2, -6))

          move: # (77) = var #valid (67)
          # (77) = [logic not] # (77)
        end bool exp
        begin then

[499] print i

          break
        end then
      end if ret values 0

      begin call method
        move: # (77) = var _E (2)
        move: # (78) = const string "print" (-31)
        move: # (79) = var i (65)
      end call method: start 77, params 3, ret values 0
    end loop ret values 0
  end scope ret values 0


[501] function Number.to(b){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals

[502] return Range(this, b)

      begin call method
        move: # (5) = var _E (3)
        get xconst: # (6) = const string "Range" (-265)
        move: # (7) = param this (1)
        move: # (8) = param b (2)
      end call method: start 5, params 4, ret values 1
    return: # (5), count 1
  end function: # (77), index 58

[501] function Number.to(b){

  get xconst: # (78) = const string "Number" (-262)
  get property: # (78) = var _E (2) [# (78)]
  get xconst: # (79) = const string "to" (-268)
  set property: # (78) [# (79)] = # (77)


[505] print "Test for in 5.to(7)"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "Test for in 5.to(7)" (-269)
  end call method: start 77, params 3, ret values 0


[506] for(var i in 5.to(7))

  begin scope
    begin locals 3
      68 i
      69 #func
      70 #valid
    end locals



    begin call method
      begin call method
        move: # (77) = const number 5 (-7)
        get xconst: # (78) = const string "to" (-268)
        move: # (79) = const number 7 (-12)
      end call method: start 77, params 3, ret values 1
      move: # (78) = const string "__iter" (-74)
    end call method: start 77, params 2, ret values 1
    move: var #func (69) = # (77)

[507] print i

    begin loop

[506] for(var i in 5.to(7))


[507] print i

      begin call

[506] for(var i in 5.to(7))

        move: # (77) = var #func (69)

[507] print i

        move: # (78) = const null (-1)
      end call: start 77, params 2, ret values 2
      move: var i (68) = # (78)
      move: var #valid (70) = # (77)

      begin if
        begin bool exp

[506] for(var i in 5.to(7))

          move: # (77) = var #valid (70)
          # (77) = [logic not] # (77)
        end bool exp
        begin then

[507] print i

          break
        end then
      end if ret values 0

      begin call method
        move: # (77) = var _E (2)
        move: # (78) = const string "print" (-31)
        move: # (79) = var i (68)
      end call method: start 77, params 3, ret values 0
    end loop ret values 0
  end scope ret values 0


[509] print "Test 7.to(2).each"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "Test 7.to(2).each" (-270)
  end call method: start 77, params 3, ret values 0


[510] 7.to(2).each{|i| print i}

  begin call method
    begin call method
      move: # (77) = const number 7 (-12)
      get xconst: # (78) = const string "to" (-268)
      move: # (79) = const number 2 (-10)
    end call method: start 77, params 3, ret values 1
    move: # (78) = const string "each" (-242)
    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 i (param)
        3 _E
        4 _G
      end locals
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-31)
          move: # (7) = param i (2)
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (79), index 59
  end call method: start 77, params 3, ret values 0


[512] if("Curl" in _G){

  begin if
    begin bool exp
      begin call method
        move: # (77) = var _G (3)
        move: # (78) = const string "__in" (-238)
        get xconst: # (79) = const string "Curl" (-271)
        move: # (80) = var _G (3)
      end call method: start 77, params 4, ret values 1
    end bool exp
    begin then

[513] print "Test CURL callbacks"

      begin scope
        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "print" (-31)
          get xconst: # (79) = const string "Test CURL callbacks" (-272)
        end call method: start 77, params 3, ret values 0


[514] require "curl/test_callbacks.os"

        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "require" (-179)
          get xconst: # (79) = const string "curl/test_callbacks.os" (-273)
        end call method: start 77, params 3, ret values 0


[516] print "Test CURL getinfo"

        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "print" (-31)
          get xconst: # (79) = const string "Test CURL getinfo" (-274)
        end call method: start 77, params 3, ret values 0


[517] require "curl/test_getinfo.os"

        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "require" (-179)
          get xconst: # (79) = const string "curl/test_getinfo.os" (-275)
        end call method: start 77, params 3, ret values 0
      end scope ret values 0
    end then
    begin else

[519] print "Curl library is not enabled"

      begin scope
        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "print" (-31)
          get xconst: # (79) = const string "Curl library is not enabled" (-276)
        end call method: start 77, params 3, ret values 0
      end scope ret values 0
    end else
  end if ret values 0


[522] print "Test sqlite database"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "Test sqlite database" (-277)
  end call method: start 77, params 3, ret values 0


[523] var conn = SqliteConnection(path.resolve("test.db"))

  begin call method
    move: # (77) = var _E (2)
    get xconst: # (78) = const string "SqliteConnection" (-278)
    begin call method
      get property: # (79) = var _E (2) [const string "path" (-33)]
      move: # (80) = const string "resolve" (-37)
      move: # (81) = const string "test.db" (-38)
    end call method: start 79, params 3, ret values 1
  end call method: start 77, params 3, ret values 1
  move: var conn (71) = # (77)


[524] var stmt = conn.query("select * from session_log where user_id > :user_id", {

  begin call method
    move: # (77) = var conn (71)
    get xconst: # (78) = const string "query" (-279)
    get xconst: # (79) = const string "select * from session_log where user_id > :user_id" (-280)
    new object 1: # (80)

[525] user_id = 2

    get xconst: # (81) = const string "user_id" (-281)
    init property: # (80) [# (81)] = const number 2 (-10)
  end call method: start 77, params 4, ret values 1
  move: var stmt (72) = # (77)


[527] for(var i, row in stmt){

  begin scope
    begin locals 4
      73 i
      74 row
      75 #func
      76 #valid
    end locals




    begin call method
      move: # (77) = var stmt (72)
      move: # (78) = const string "__iter" (-74)
    end call method: start 77, params 2, ret values 1
    move: var #func (75) = # (77)
    begin loop
      begin call
        move: # (77) = var #func (75)
        move: # (78) = const null (-1)
      end call: start 77, params 2, ret values 3
      move: var row (74) = # (79)
      move: var i (73) = # (78)
      move: var #valid (76) = # (77)

      begin if
        begin bool exp
          move: # (77) = var #valid (76)
          # (77) = [logic not] # (77)
        end bool exp
        begin then
          break
        end then
      end if ret values 0


[528] print row

      begin scope
        begin call method
          move: # (77) = var _E (2)
          move: # (78) = const string "print" (-31)
          move: # (79) = var row (74)
        end call method: start 77, params 3, ret values 0
      end scope ret values 0
    end loop ret values 0
  end scope ret values 0


[530] terminate()

  begin call method
    move: # (77) = var _E (2)
    get xconst: # (78) = const string "terminate" (-282)
  end call method: start 77, params 2, ret values 0


[531] print "This text is never printed"

  begin call method
    move: # (77) = var _E (2)
    move: # (78) = const string "print" (-31)
    get xconst: # (79) = const string "This text is never printed" (-283)
  end call method: start 77, params 3, ret values 0

  return: var _E (2), count 1
end function: {main} (0), index 0
