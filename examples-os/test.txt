
[FILE] test.os
[2] print(5 " differences")

begin function
  begin locals 52, stack 63
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    34 Person
    35 p
    36 IvanPerson
    37 p
    38 vec3
    39 v1
    40 v2
    41 v3
    45 a
    46 transform
    47 core
    48 __planet
    49 testFunc
  end locals
  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const number 5 (-4)
    move: # (55) = const string " differences" (-32)
  end call method: start 52, params 4, ret values 0


[5] var i = 4

  begin scope
    begin locals 4
      4 i
      5 name
      6 count
      7 time
    end locals
    move: var i (4) = const number 4 (-5)


[7] var name, count, time = "Smith", 3 + 2/i, 1.23

    move: # (52) = const string "Smith" (-33)
    # (54) = const number 2 (-7) [operator /] var i (4)
    # (53) = const number 3 (-6) [operator +] # (54)
    move: var time (7) = const number 1.23 (-8)
    move: var count (6) = # (53)
    move: var name (5) = # (52)


[9] print concat("name: " name ", count: " count ", time: " time)

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _E (2)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "name: " (-35)
        move: # (57) = var name (5)
        move: # (58) = const string ", count: " (-36)
        move: # (59) = var count (6)
        move: # (60) = const string ", time: " (-37)
        move: # (61) = var time (7)
      end call method: start 54, params 8, ret values 1
    end call method: start 52, params 3, ret values 0
  end scope ret values 0


[13] print {firstname="Ivan" lastname="Petrov"}

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    new object 2: # (54)
    set property: # (54) [const string "firstname" (-38)] = const string "Ivan" (-39)
    set property: # (54) [const string "lastname" (-40)] = const string "Petrov" (-41)
  end call method: start 52, params 3, ret values 0


[17] var a = {x=1, y=3; "zero" "one", "two" last:7,}

  begin scope
    begin locals 11
      8 a
      9 b
      10 i
      11 j
      12 k
      13 test
      14 a
      15 b
      16 a
      17 b
      18 c
    end locals
    new object 6: # (52)
    set property: # (52) [const string "x" (-42)] = const number 1 (-9)
    set property: # (52) [const string "y" (-43)] = const number 3 (-6)
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const string "zero" (-45)
    end call method: start 53, params 3, ret values 0
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const string "one" (-46)
    end call method: start 53, params 3, ret values 0
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const string "two" (-47)
    end call method: start 53, params 3, ret values 0
    set property: # (52) [const string "last" (-48)] = const number 7 (-10)
    move: var a (8) = # (52)


[18] print a[1]

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      get property: # (54) = var a (8) [const number 1 (-9)]
    end call method: start 52, params 3, ret values 0


[19] print a

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = var a (8)
    end call method: start 52, params 3, ret values 0


[22] a = {[2+3]="five" y=3}

    new object 2: # (52)
    set property: # (52) [const number 5 (-4)] = const string "five" (-49)
    set property: # (52) [const string "y" (-43)] = const number 3 (-6)
    move: var a (8) = # (52)


[23] print a[5]

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      get property: # (54) = var a (8) [const number 5 (-4)]
    end call method: start 52, params 3, ret values 0


[24] print a

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = var a (8)
    end call method: start 52, params 3, ret values 0


[26] a = {x=1 y=2}

    new object 2: # (52)
    set property: # (52) [const string "x" (-42)] = const number 1 (-9)
    set property: # (52) [const string "y" (-43)] = const number 2 (-7)
    move: var a (8) = # (52)


[28] var b = {[a]="powerful" 7="greate"}

    new object 2: # (52)
    set property: # (52) [var a (8)] = const string "powerful" (-50)
    set property: # (52) [const number 7 (-10)] = const string "greate" (-51)
    move: var b (9) = # (52)


[29] print b[a]

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      get property: # (54) = var b (9) [var a (8)]
    end call method: start 52, params 3, ret values 0


[31] print([10, 20, 30, 40])

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      new array 4: # (54)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 10 (-11)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 20 (-12)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 30 (-13)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 40 (-14)
      end call method: start 55, params 3, ret values 0
    end call method: start 52, params 3, ret values 0


[33] print([10 20 30 40])

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      new array 4: # (54)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 10 (-11)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 20 (-12)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 30 (-13)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 40 (-14)
      end call method: start 55, params 3, ret values 0
    end call method: start 52, params 3, ret values 0


[36] var i, j, k = 0, 1, 3

    move: # (52) = const number 0 (-15)
    move: # (53) = const number 1 (-9)
    move: var k (12) = const number 3 (-6)
    move: var j (11) = # (53)
    move: var i (10) = # (52)


[37] echo("i="i", j="j", k="k"\n")

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "echo" (-52)
      move: # (54) = const string "i=" (-53)
      move: # (55) = var i (10)
      move: # (56) = const string ", j=" (-54)
      move: # (57) = var j (11)
      move: # (58) = const string ", k=" (-55)
      move: # (59) = var k (12)
      move: # (60) = const string "
" (-56)
    end call method: start 52, params 9, ret values 0


[40] i, j = j, i

    move: # (52) = var j (11)
    move: var j (11) = var i (10)
    move: var i (10) = # (52)


[41] echo("after swap: i="i", j="j"\n")

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "echo" (-52)
      move: # (54) = const string "after swap: i=" (-57)
      move: # (55) = var i (10)
      move: # (56) = const string ", j=" (-54)
      move: # (57) = var j (11)
      move: # (58) = const string "
" (-56)
    end call method: start 52, params 7, ret values 0


[44] var test = function(){ return 1, 2 }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        move: # (4) = const number 1 (-9)
        move: # (5) = const number 2 (-7)
      return: # (4), count 2
    end function: var test (13), index 1


[45] var a, b = test()

    begin call
      move: # (52) = var test (13)
      move: # (53) = const null (-1)
    end call: start 52, params 2, ret values 2
    move: var b (15) = # (53)
    move: var a (14) = # (52)


[46] print("results from function" "a="..a "b="..b)

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "results from function" (-58)
      begin call method
        move: # (55) = var _G (3)
        move: # (56) = const string "concat" (-34)
        move: # (57) = const string "a=" (-59)
        move: # (58) = var a (14)
      end call method: start 55, params 4, ret values 1
      begin call method
        move: # (56) = var _G (3)
        move: # (57) = const string "concat" (-34)
        move: # (58) = const string "b=" (-60)
        move: # (59) = var b (15)
      end call method: start 56, params 4, ret values 1
    end call method: start 52, params 5, ret values 0


[49] var a, b, c = test()

    begin call
      move: # (52) = var test (13)
      move: # (53) = const null (-1)
    end call: start 52, params 2, ret values 3
    move: var c (18) = # (54)
    move: var b (17) = # (53)
    move: var a (16) = # (52)


[50] print("results from function" "a="..a "b="..b "c="..c)

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "results from function" (-58)
      begin call method
        move: # (55) = var _G (3)
        move: # (56) = const string "concat" (-34)
        move: # (57) = const string "a=" (-59)
        move: # (58) = var a (16)
      end call method: start 55, params 4, ret values 1
      begin call method
        move: # (56) = var _G (3)
        move: # (57) = const string "concat" (-34)
        move: # (58) = const string "b=" (-60)
        move: # (59) = var b (17)
      end call method: start 56, params 4, ret values 1
      begin call method
        move: # (57) = var _G (3)
        move: # (58) = const string "concat" (-34)
        move: # (59) = const string "c=" (-61)
        move: # (60) = var c (18)
      end call method: start 57, params 4, ret values 1
    end call method: start 52, params 6, ret values 0
  end scope ret values 0


[54] print "Object iterator test"

  begin scope
    begin locals 2
      19 obj
      28 range
    end locals
    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Object iterator test" (-62)
    end call method: start 52, params 3, ret values 0


[55] var obj = { null awesome=true 12 "excellent" }

    new object 4: # (52)
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const null (-1)
    end call method: start 53, params 3, ret values 0
    set property: # (52) [const string "awesome" (-63)] = const true (-2)
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const number 12 (-16)
    end call method: start 53, params 3, ret values 0
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const string "excellent" (-64)
    end call method: start 53, params 3, ret values 0
    move: var obj (19) = # (52)


[56] for(var k, v in obj){

    begin scope
      begin locals 4
        20 k
        21 v
        22 #func
        23 #valid
      end locals




      begin call method
        move: # (52) = var obj (19)
        move: # (53) = const string "__iter" (-65)
      end call method: start 52, params 2, ret values 1
      move: var #func (22) = # (52)
      begin loop
        begin call
          move: # (52) = var #func (22)
          move: # (53) = const null (-1)
        end call: start 52, params 2, ret values 3
        move: var v (21) = # (54)
        move: var k (20) = # (53)
        move: var #valid (23) = # (52)

        begin if
          begin bool exp
            move: # (52) = var #valid (23)
            # (52) = [logic not] # (52)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[57] print( k " --> " v )

        begin scope
          begin call method
            move: # (52) = var _E (2)
            move: # (53) = const string "print" (-31)
            move: # (54) = var k (20)
            move: # (55) = const string " --> " (-66)
            move: # (56) = var v (21)
          end call method: start 52, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[60] print "Object iterator test, only keys"

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Object iterator test, only keys" (-67)
    end call method: start 52, params 3, ret values 0


[61] for(k in obj){

    begin scope
      begin locals 2
        24 #func
        25 #valid
      end locals



      begin call method
        move: # (52) = var obj (19)
        move: # (53) = const string "__iter" (-65)
      end call method: start 52, params 2, ret values 1
      move: var #func (24) = # (52)
      begin loop
        begin call
          move: # (52) = var #func (24)
          move: # (53) = const null (-1)
        end call: start 52, params 2, ret values 2
        set property: var _E (2) [const string "k" (-68)] = # (53)
        move: var #valid (25) = # (52)

        begin if
          begin bool exp
            move: # (52) = var #valid (25)
            # (52) = [logic not] # (52)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[62] print k

        begin scope
          begin call method
            move: # (52) = var _E (2)
            move: # (53) = const string "print" (-31)
            get property: # (54) = var _E (2) [const string "k" (-68)]
          end call method: start 52, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[65] print "Array iterator test"

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Array iterator test" (-69)
    end call method: start 52, params 3, ret values 0


[66] Array.__iter = function(){

    begin function
      begin locals 6, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
        4 i
        5 self
      end locals

[67] var i, self = 0, this

      move: # (6) = const number 0 (-15)
      move: var self (5) = param this (1)
      move: var i (4) = # (6)


[68] return function(){

        begin function
          begin locals 5, stack 11
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[69] if(i < #self){

          begin if
            begin bool exp
              get upvalue: # (5) = var i (4 1)
              begin call method
                get upvalue: # (6) = var self (5 1)
                move: # (7) = const string "__len" (-70)
              end call method: start 6, params 2, ret values 1
              # (5) = # (5) [logic <] # (6)
            end bool exp
            begin then

[70] print("... inside of array iter func: " i self[i])

              begin scope
                begin locals 1
                  4 #temp
                end locals
                begin call method
                  move: # (5) = var _E (2)
                  move: # (6) = const string "print" (-31)
                  move: # (7) = const string "... inside of array iter func: " (-71)
                  get upvalue: # (8) = var i (4 1)
                  get upvalue: # (9) = var self (5 1)
                  get upvalue: # (10) = var i (4 1)
                  get property: # (9) = # (9) [# (10)]
                end call method: start 5, params 5, ret values 0


[71] return true, i, self[i++]

                  move: # (5) = const true (-2)
                  get upvalue: # (6) = var i (4 1)
                  get upvalue: # (7) = var self (5 1)
                  get upvalue: var #temp (4) = var i (4 1)
                  get upvalue: # (8) = var i (4 1)
                  # (8) = # (8) [operator +] const number 1 (-9)
                  set upvalue: var i (4 1) = # (8)
                  move: # (8) = var #temp (4)
                  get property: # (7) = # (7) [# (8)]
                return: # (5), count 3
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 3
      return: # (6), count 1
    end function: # (52), index 2

[66] Array.__iter = function(){

    get property: # (53) = var _E (2) [const string "Array" (-72)]
    set property: # (53) [const string "__iter" (-65)] = # (52)


[75] for(k, v in [10 20 30 40 50]){

    begin scope
      begin locals 2
        26 #func
        27 #valid
      end locals




      begin call method
        new array 5: # (52)
        begin call method
          move: # (53) = # (52)
          move: # (54) = const string "push" (-44)
          move: # (55) = const number 10 (-11)
        end call method: start 53, params 3, ret values 0
        begin call method
          move: # (53) = # (52)
          move: # (54) = const string "push" (-44)
          move: # (55) = const number 20 (-12)
        end call method: start 53, params 3, ret values 0
        begin call method
          move: # (53) = # (52)
          move: # (54) = const string "push" (-44)
          move: # (55) = const number 30 (-13)
        end call method: start 53, params 3, ret values 0
        begin call method
          move: # (53) = # (52)
          move: # (54) = const string "push" (-44)
          move: # (55) = const number 40 (-14)
        end call method: start 53, params 3, ret values 0
        begin call method
          move: # (53) = # (52)
          move: # (54) = const string "push" (-44)
          move: # (55) = const number 50 (-17)
        end call method: start 53, params 3, ret values 0
        move: # (53) = const string "__iter" (-65)
      end call method: start 52, params 2, ret values 1
      move: var #func (26) = # (52)
      begin loop
        begin call
          move: # (52) = var #func (26)
          move: # (53) = const null (-1)
        end call: start 52, params 2, ret values 3
        set property: var _E (2) [const string "v" (-73)] = # (54)
        set property: var _E (2) [const string "k" (-68)] = # (53)
        move: var #valid (27) = # (52)

        begin if
          begin bool exp
            move: # (52) = var #valid (27)
            # (52) = [logic not] # (52)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[76] print( k " --> " v )

        begin scope
          begin call method
            move: # (52) = var _E (2)
            move: # (53) = const string "print" (-31)
            get property: # (54) = var _E (2) [const string "k" (-68)]
            move: # (55) = const string " --> " (-66)
            get property: # (56) = var _E (2) [const string "v" (-73)]
          end call method: start 52, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[79] print("Test array prototype:", [1 2 3].prototype === Array)

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Test array prototype:" (-74)
      new array 3: # (55)
      begin call method
        move: # (56) = # (55)
        move: # (57) = const string "push" (-44)
        move: # (58) = const number 1 (-9)
      end call method: start 56, params 3, ret values 0
      begin call method
        move: # (56) = # (55)
        move: # (57) = const string "push" (-44)
        move: # (58) = const number 2 (-7)
      end call method: start 56, params 3, ret values 0
      begin call method
        move: # (56) = # (55)
        move: # (57) = const string "push" (-44)
        move: # (58) = const number 3 (-6)
      end call method: start 56, params 3, ret values 0
      get property: # (55) = # (55) [const string "prototype" (-75)]
      get property: # (56) = var _E (2) [const string "Array" (-72)]
      # (55) = # (55) [logic ===] # (56)
    end call method: start 52, params 4, ret values 0


[81] print "Test range iterator"

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Test range iterator" (-76)
    end call method: start 52, params 3, ret values 0


[82] var range = function(a, b){

    begin function
      begin locals 6, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 b (param)
        4 _E
        5 _G
      end locals

[83] return function(){

        begin function
          begin locals 5, stack 8
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[84] if(a <= b){

          begin if
            begin bool exp
              get upvalue: # (5) = param a (2 1)
              get upvalue: # (6) = param b (3 1)
              # (5) = # (5) [logic <=] # (6)
            end bool exp
            begin then

[85] return true, a++

              begin scope
                begin locals 1
                  4 #temp
                end locals
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = param a (2 1)
                  get upvalue: # (6) = param a (2 1)
                  # (6) = # (6) [operator +] const number 1 (-9)
                  set upvalue: param a (2 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 5
      return: # (6), count 1
    end function: var range (28), index 4


[89] for(var i in range(10, 13)){

    begin scope
      begin locals 3
        29 i
        30 #func
        31 #valid
      end locals



      begin call method
        begin call
          move: # (52) = var range (28)
          move: # (53) = const null (-1)
          move: # (54) = const number 10 (-11)
          move: # (55) = const number 13 (-18)
        end call: start 52, params 4, ret values 1
        move: # (53) = const string "__iter" (-65)
      end call method: start 52, params 2, ret values 1
      move: var #func (30) = # (52)
      begin loop
        begin call
          move: # (52) = var #func (30)
          move: # (53) = const null (-1)
        end call: start 52, params 2, ret values 2
        move: var i (29) = # (53)
        move: var #valid (31) = # (52)

        begin if
          begin bool exp
            move: # (52) = var #valid (31)
            # (52) = [logic not] # (52)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[90] print "i = "..i

        begin scope
          begin call method
            move: # (52) = var _E (2)
            move: # (53) = const string "print" (-31)
            begin call method
              move: # (54) = var _G (3)
              move: # (55) = const string "concat" (-34)
              move: # (56) = const string "i = " (-77)
              move: # (57) = var i (29)
            end call method: start 54, params 4, ret values 1
          end call method: start 52, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end scope ret values 0


[95] print "7 && 9 = "..(7 && 9)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "7 && 9 = " (-78)
      move: # (57) = const number 7 (-10)
      logic &&: # (57)
        move: # (57) = const number 9 (-19)
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[96] print "7 || 9 = "..(7 || 9)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "7 || 9 = " (-79)
      move: # (57) = const number 7 (-10)
      logic ||: # (57)
        move: # (57) = const number 9 (-19)
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[101] var v1 = {x=1 y=2}

  begin scope
    begin locals 2
      32 v1
      33 a
    end locals
    new object 2: # (52)
    set property: # (52) [const string "x" (-42)] = const number 1 (-9)
    set property: # (52) [const string "y" (-43)] = const number 2 (-7)
    move: var v1 (32) = # (52)


[102] var a = {[v1]="vv1" v2="vv2"}

    new object 2: # (52)
    set property: # (52) [var v1 (32)] = const string "vv1" (-80)
    set property: # (52) [const string "v2" (-81)] = const string "vv2" (-82)
    move: var a (33) = # (52)


[103] print( a[v1] a.v2 )

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      get property: # (54) = var a (33) [var v1 (32)]
      get property: # (55) = var a (33) [const string "v2" (-81)]
    end call method: start 52, params 4, ret values 0
  end scope ret values 0


[108] var Person = {

  new object 3: # (52)

[109] __construct = function(firstname, lastname){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 firstname (param)
      3 lastname (param)
      4 _E
      5 _G
    end locals

[110] @firstname = firstname // equal to this.firstname = firstname

    set property: param this (1) [const string "firstname" (-38)] = param firstname (2)

[111] @lastname = lastname // equal to this.lastname = lastname

    set property: param this (1) [const string "lastname" (-40)] = param lastname (3)
  end function: # (54), index 6
  set property: # (52) [const string "__construct" (-83)] = # (54)

[113] walk = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[114] print @fullname .. " is walking!"

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "print" (-31)
        begin call method
          move: # (6) = var _G (3)
          move: # (7) = const string "concat" (-34)
          get property: # (8) = param this (1) [const string "fullname" (-85)]
          move: # (9) = const string " is walking!" (-86)
        end call method: start 6, params 4, ret values 1
      end call method: start 4, params 3, ret values 1
    return: # (4), count 1
  end function: # (54), index 7
  set property: # (52) [const string "walk" (-84)] = # (54)

[116] __get@fullname = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[117] return @firstname .. " " .. @lastname

      begin call method
        move: # (4) = var _G (3)
        move: # (5) = const string "concat" (-34)
        get property: # (6) = param this (1) [const string "firstname" (-38)]
        move: # (7) = const string " " (-88)
        get property: # (8) = param this (1) [const string "lastname" (-40)]
      end call method: start 4, params 5, ret values 1
    return: # (4), count 1
  end function: # (54), index 8
  set property: # (52) [const string "__get@fullname" (-87)] = # (54)
  move: var Person (34) = # (52)


[121] var p = Person("James", "Bond")

  begin call
    move: # (52) = var Person (34)
    move: # (53) = const null (-1)
    move: # (54) = const string "James" (-89)
    move: # (55) = const string "Bond" (-90)
  end call: start 52, params 4, ret values 1
  move: var p (35) = # (52)


[122] p.walk()

  begin call method
    move: # (52) = var p (35)
    move: # (53) = const string "walk" (-84)
  end call method: start 52, params 2, ret values 0


[123] print p

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = var p (35)
  end call method: start 52, params 3, ret values 0


[124] print "p is Person = " .. (p is Person)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "p is Person = " (-91)
      begin call method
        move: # (57) = var _G (3)
        move: # (58) = const string "__is" (-92)
        move: # (59) = var p (35)
        move: # (60) = var Person (34)
      end call method: start 57, params 4, ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[127] var IvanPerson = extends Person {

  begin call method
    move: # (52) = var _G (3)
    move: # (53) = const string "__extends" (-93)
    move: # (54) = var Person (34)
    new object 2: # (55)

[128] __construct = function(){

    begin function
      begin locals 4, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[129] super("Ivan", "Petrov")

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
          move: # (6) = const string "Ivan" (-39)
          move: # (7) = const string "Petrov" (-41)
        end super call: start 4, params 4, ret values 1
      return: # (4), count 1
    end function: # (57), index 9
    set property: # (55) [const string "__construct" (-83)] = # (57)

[131] walk = function(){

    begin function
      begin locals 4, stack 7
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[132] echo "Someone named "

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "echo" (-52)
        move: # (6) = const string "Someone named " (-94)
      end call method: start 4, params 3, ret values 0


[133] super()

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
        end super call: start 4, params 2, ret values 1
      return: # (4), count 1
    end function: # (57), index 10
    set property: # (55) [const string "walk" (-84)] = # (57)
  end call method: start 52, params 4, ret values 1
  move: var IvanPerson (36) = # (52)


[138] var p = IvanPerson()

  begin call
    move: # (52) = var IvanPerson (36)
    move: # (53) = const null (-1)
  end call: start 52, params 2, ret values 1
  move: var p (37) = # (52)


[139] p.walk()

  begin call method
    move: # (52) = var p (37)
    move: # (53) = const string "walk" (-84)
  end call method: start 52, params 2, ret values 0


[140] print p

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = var p (37)
  end call method: start 52, params 3, ret values 0


[142] print "Person.walk.call"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Person.walk.call" (-95)
  end call method: start 52, params 3, ret values 0


[143] Person.walk.call(p)

  begin call method
    get property: # (52) = var Person (34) [const string "walk" (-84)]
    move: # (53) = const string "call" (-96)
    move: # (54) = var p (37)
  end call method: start 52, params 3, ret values 0


[147] function foo(a, b){ return a + b }

  begin function
    begin locals 6, stack 8
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals
      # (6) = param a (2) [operator +] param b (3)
    return: # (6), count 1
  end function: # (52), index 11
  set property: var _E (2) [const string "foo" (-97)] = # (52)


[148] function bar(){ return foo.apply(null, arguments) }

  begin function
    begin locals 4, stack 8
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      begin call method
        get property: # (4) = var _E (2) [const string "foo" (-97)]
        move: # (5) = const string "apply" (-99)
        move: # (6) = const null (-1)
        get arguments: # (7)
      end call method: start 4, params 4, ret values 1
    return: # (4), count 1
  end function: # (52), index 12
  set property: var _E (2) [const string "bar" (-98)] = # (52)


[149] print "should be 5: "..bar(2 3)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "should be 5: " (-100)
      begin call method
        move: # (57) = var _E (2)
        move: # (58) = const string "bar" (-98)
        move: # (59) = const number 2 (-7)
        move: # (60) = const number 3 (-6)
      end call method: start 57, params 4, ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[150] print "should be 9: "..bar(4 5)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "should be 9: " (-101)
      begin call method
        move: # (57) = var _E (2)
        move: # (58) = const string "bar" (-98)
        move: # (59) = const number 4 (-5)
        move: # (60) = const number 5 (-4)
      end call method: start 57, params 4, ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[154] var vec3 = {

  new object 3: # (52)

[155] __construct = function(x, y, z){

  begin function
    begin locals 7, stack 10
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 z (param)
      5 _E
      6 _G
    end locals

[156] this.x = x

    set property: param this (1) [const string "x" (-42)] = param x (2)

[157] this.y = y

    set property: param this (1) [const string "y" (-43)] = param y (3)

[158] this.z = z

    set property: param this (1) [const string "z" (-102)] = param z (4)
  end function: # (54), index 13
  set property: # (52) [const string "__construct" (-83)] = # (54)

[160] __add = {|a b| vec3(a.x + b.x, a.y + b.y, a.z + b.z)}

  begin function
    begin locals 6, stack 13
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals
      begin call
        get upvalue: # (6) = var vec3 (38 1)
        move: # (7) = const null (-1)
        get property: # (8) = param a (2) [const string "x" (-42)]
        get property: # (9) = param b (3) [const string "x" (-42)]
        # (8) = # (8) [operator +] # (9)
        get property: # (9) = param a (2) [const string "y" (-43)]
        get property: # (10) = param b (3) [const string "y" (-43)]
        # (9) = # (9) [operator +] # (10)
        get property: # (10) = param a (2) [const string "z" (-102)]
        get property: # (11) = param b (3) [const string "z" (-102)]
        # (10) = # (10) [operator +] # (11)
      end call: start 6, params 5, ret values 1
    return: # (6), count 1
  end function: # (54), index 14
  set property: # (52) [const string "__add" (-103)] = # (54)

[164] __mul = {|a b| vec3(a.x * b.x, a.y * b.y, a.z * b.z)}

  begin function
    begin locals 6, stack 13
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals
      begin call
        get upvalue: # (6) = var vec3 (38 1)
        move: # (7) = const null (-1)
        get property: # (8) = param a (2) [const string "x" (-42)]
        get property: # (9) = param b (3) [const string "x" (-42)]
        # (8) = # (8) [operator *] # (9)
        get property: # (9) = param a (2) [const string "y" (-43)]
        get property: # (10) = param b (3) [const string "y" (-43)]
        # (9) = # (9) [operator *] # (10)
        get property: # (10) = param a (2) [const string "z" (-102)]
        get property: # (11) = param b (3) [const string "z" (-102)]
        # (10) = # (10) [operator *] # (11)
      end call: start 6, params 5, ret values 1
    return: # (6), count 1
  end function: # (54), index 15
  set property: # (52) [const string "__mul" (-104)] = # (54)
  move: var vec3 (38) = # (52)


[167] var v1 = vec3(10 20 30)

  begin call
    move: # (52) = var vec3 (38)
    move: # (53) = const null (-1)
    move: # (54) = const number 10 (-11)
    move: # (55) = const number 20 (-12)
    move: # (56) = const number 30 (-13)
  end call: start 52, params 5, ret values 1
  move: var v1 (39) = # (52)


[168] var v2 = vec3(1 2 3)

  begin call
    move: # (52) = var vec3 (38)
    move: # (53) = const null (-1)
    move: # (54) = const number 1 (-9)
    move: # (55) = const number 2 (-7)
    move: # (56) = const number 3 (-6)
  end call: start 52, params 5, ret values 1
  move: var v2 (40) = # (52)


[169] var v3 = v1 + v2 * v2

  # (53) = var v2 (40) [operator *] var v2 (40)
  var v3 (41) = var v1 (39) [operator +] # (53)


[170] print "should be {x:11,y:24,z:39} " .. v3

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "should be {x:11,y:24,z:39} " (-105)
      move: # (57) = var v3 (41)
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[173] print "Test properties"

  begin scope
    begin locals 1
      42 a
    end locals
    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Test properties" (-106)
    end call method: start 52, params 3, ret values 0


[175] var a = {

    new object 3: # (52)

[176] _color = "red"

    set property: # (52) [const string "_color" (-107)] = const string "red" (-108)

[177] __get@color = {|| @_color }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        get property: # (4) = param this (1) [const string "_color" (-107)]
      return: # (4), count 1
    end function: # (54), index 16
    set property: # (52) [const string "__get@color" (-109)] = # (54)

[178] __set@color = {|v| @_color = v }

    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 v (param)
        3 _E
        4 _G
      end locals
      set property: param this (1) [const string "_color" (-107)] = param v (2)
    end function: # (54), index 17
    set property: # (52) [const string "__set@color" (-110)] = # (54)
    move: var a (42) = # (52)


[182] print "should be red: " .. a["color"]

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be red: " (-111)
        get property: # (57) = var a (42) [const string "color" (-112)]
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[184] a.color = "blue"

    set property: var a (42) [const string "color" (-112)] = const string "blue" (-113)


[185] print "should be blue: " .. a.color

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be blue: " (-114)
        get property: # (57) = var a (42) [const string "color" (-112)]
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[187] a = {

    new object 4: # (52)

[188] _color = "white"

    set property: # (52) [const string "_color" (-107)] = const string "white" (-115)

[189] __get = function(name){

    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[190] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-112)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[191] return this._color

            get property: # (5) = param this (1) [const string "_color" (-107)]
          return: # (5), count 1
        end then
      end if ret values 0
    end function: # (54), index 18
    set property: # (52) [const string "__get" (-116)] = # (54)

[193] __set = function(name, v){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 v (param)
        4 _E
        5 _G
      end locals

[194] if(name == "color")

      begin if
        begin bool exp
          move: # (6) = param name (2)
          move: # (7) = const string "color" (-112)
          # (6) = # (6) [logic ==] # (7)
        end bool exp
        begin then

[195] this._color = v

          set property: param this (1) [const string "_color" (-107)] = param v (3)
        end then
      end if ret values 0
    end function: # (54), index 19
    set property: # (52) [const string "__set" (-117)] = # (54)

[197] __del = function(name){

    begin function
      begin locals 5, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[198] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-112)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[199] delete this._color

          begin call method
            move: # (5) = var _G (4)
            move: # (6) = const string "__delete" (-119)
            move: # (7) = param this (1)
            move: # (8) = const string "_color" (-107)
          end call method: start 5, params 4, ret values 0
        end then
      end if ret values 0
    end function: # (54), index 20
    set property: # (52) [const string "__del" (-118)] = # (54)
    move: var a (42) = # (52)


[204] print "should be white: " .. a.color

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be white: " (-120)
        get property: # (57) = var a (42) [const string "color" (-112)]
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[205] print "should be null: " .. a.color2

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be null: " (-121)
        get property: # (57) = var a (42) [const string "color2" (-122)]
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[207] a.color = "green"

    set property: var a (42) [const string "color" (-112)] = const string "green" (-123)


[208] print "should be green: " .. a.color

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be green: " (-124)
        get property: # (57) = var a (42) [const string "color" (-112)]
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[210] delete a.color

    begin call method
      move: # (52) = var _G (3)
      move: # (53) = const string "__delete" (-119)
      move: # (54) = var a (42)
      move: # (55) = const string "color" (-112)
    end call method: start 52, params 4, ret values 0


[211] print "should be null: " .. a.color

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be null: " (-121)
        get property: # (57) = var a (42) [const string "color" (-112)]
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[213] print "Test multi dimensional properties"

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Test multi dimensional properties" (-125)
    end call method: start 52, params 3, ret values 0


[214] a = {

    new object 4: # (52)

[215] _matrix = {}

    new object 0: # (54)
    set property: # (52) [const string "_matrix" (-126)] = # (54)

[216] __getdim = function(x, y){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[217] return this._matrix[y*4 + x]

        get property: # (6) = param this (1) [const string "_matrix" (-126)]
        # (7) = param y (3) [operator *] const number 4 (-5)
        # (7) = # (7) [operator +] param x (2)
        get property: # (6) = # (6) [# (7)]
      return: # (6), count 1
    end function: # (54), index 21
    set property: # (52) [const string "__getdim" (-127)] = # (54)

[219] __setdim = function(value, x, y){

    begin function
      begin locals 7, stack 11
        0 _F (param)
        1 this (param)
        2 value (param)
        3 x (param)
        4 y (param)
        5 _E
        6 _G
      end locals

[220] this._matrix[y*4 + x] = value

      get property: # (8) = param this (1) [const string "_matrix" (-126)]
      # (9) = param y (4) [operator *] const number 4 (-5)
      # (9) = # (9) [operator +] param x (3)
      set property: # (8) [# (9)] = param value (2)
    end function: # (54), index 22
    set property: # (52) [const string "__setdim" (-128)] = # (54)

[222] __deldim = function(x, y){

    begin function
      begin locals 6, stack 11
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[223] delete this._matrix[y*4 + x]

      begin call method
        move: # (6) = var _G (5)
        move: # (7) = const string "__delete" (-119)
        get property: # (8) = param this (1) [const string "_matrix" (-126)]
        # (9) = param y (3) [operator *] const number 4 (-5)
        # (9) = # (9) [operator +] param x (2)
      end call method: start 6, params 4, ret values 0
    end function: # (54), index 23
    set property: # (52) [const string "__deldim" (-129)] = # (54)
    move: var a (42) = # (52)


[227] a[1, 2] = 5		// a.__setdim(5, 1, 2)

    begin call method
      move: # (52) = const number 5 (-4)
      move: # (53) = var a (42)
      move: # (54) = const string "__setdim" (-128)
      move: # (55) = # (52)
      move: # (56) = const number 1 (-9)
      move: # (57) = const number 2 (-7)
    end call method: start 53, params 5, ret values 0


[229] print "should be 5: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be 5: " (-100)
        begin call method
          move: # (57) = var a (42)
          move: # (58) = const string "__getdim" (-127)
          move: # (59) = const number 1 (-9)
          move: # (60) = const number 2 (-7)
        end call method: start 57, params 4, ret values 1
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0


[231] delete a[1, 2]	// a.__deldim(1, 2)

    begin call method
      move: # (52) = var a (42)
      move: # (53) = const string "__deldim" (-129)
      move: # (54) = const number 1 (-9)
      move: # (55) = const number 2 (-7)
    end call method: start 52, params 4, ret values 0


[232] print "should be null: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      begin call method
        move: # (54) = var _G (3)
        move: # (55) = const string "concat" (-34)
        move: # (56) = const string "should be null: " (-121)
        begin call method
          move: # (57) = var a (42)
          move: # (58) = const string "__getdim" (-127)
          move: # (59) = const number 1 (-9)
          move: # (60) = const number 2 (-7)
        end call method: start 57, params 4, ret values 1
      end call method: start 54, params 4, ret values 1
    end call method: start 52, params 3, ret values 0
  end scope ret values 0


[235] print "Test function inline call"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Test function inline call" (-130)
  end call method: start 52, params 3, ret values 0


[236] print "should be 7: " .. {|a b c| a + b * c }(1 2 3)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "should be 7: " (-131)
      begin call
        begin function
          begin locals 7, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 b (param)
            4 c (param)
            5 _E
            6 _G
          end locals
            # (8) = param b (3) [operator *] param c (4)
            # (7) = param a (2) [operator +] # (8)
          return: # (7), count 1
        end function: # (57), index 24
        move: # (58) = const null (-1)
        move: # (59) = const number 1 (-9)
        move: # (60) = const number 2 (-7)
        move: # (61) = const number 3 (-6)
      end call: start 57, params 5, ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[239] print "Test local vars scope"

  begin scope
    begin locals 1
      43 i
    end locals
    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Test local vars scope" (-132)
    end call method: start 52, params 3, ret values 0


[240] var i = 1;

    move: var i (43) = const number 1 (-9)


[242] var i = i

    begin scope
      begin locals 1
        44 i
      end locals
      move: var i (44) = var i (43)


[243] i++

      var i (44) = var i (44) [operator +] const number 1 (-9)


[244] print i

      begin call method
        move: # (52) = var _E (2)
        move: # (53) = const string "print" (-31)
        move: # (54) = var i (44)
      end call method: start 52, params 3, ret values 0
    end scope ret values 0


[246] print i

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = var i (43)
    end call method: start 52, params 3, ret values 0
  end scope ret values 0


[249] print "Test debuglocals"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Test debuglocals" (-133)
  end call method: start 52, params 3, ret values 0


[256] }(10)

  begin call

[250] function(a){

    begin function
      begin locals 7, stack 12
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
        5 c
      end locals

[251] var c = a * 2;

      var c (5) = param a (2) [operator *] const number 2 (-7)

[253] var c = a - 1

      begin scope
        begin locals 1
          6 c
        end locals
        var c (6) = param a (2) [operator -] const number 1 (-9)


[254] print debuglocals

        begin call method
          move: # (7) = var _E (3)
          move: # (8) = const string "print" (-31)
          new object 13: # (9)
          get upvalue: # (11) = var Person (34 1)
          set property: # (9) [const string "Person" (-134)] = # (11)
          get upvalue: # (11) = var IvanPerson (36 1)
          set property: # (9) [const string "IvanPerson" (-135)] = # (11)
          get upvalue: # (11) = var p (37 1)
          set property: # (9) [const string "p" (-136)] = # (11)
          get upvalue: # (11) = var vec3 (38 1)
          set property: # (9) [const string "vec3" (-137)] = # (11)
          get upvalue: # (11) = var v1 (39 1)
          set property: # (9) [const string "v1" (-138)] = # (11)
          get upvalue: # (11) = var v2 (40 1)
          set property: # (9) [const string "v2" (-81)] = # (11)
          get upvalue: # (11) = var v3 (41 1)
          set property: # (9) [const string "v3" (-139)] = # (11)
          get upvalue: # (11) = var transform (46 1)
          set property: # (9) [const string "transform" (-140)] = # (11)
          get upvalue: # (11) = var core (47 1)
          set property: # (9) [const string "core" (-141)] = # (11)
          get upvalue: # (11) = var __planet (48 1)
          set property: # (9) [const string "__planet" (-142)] = # (11)
          get upvalue: # (11) = var testFunc (49 1)
          set property: # (9) [const string "testFunc" (-143)] = # (11)
          set property: # (9) [const string "a" (-144)] = param a (2)
          set property: # (9) [const string "c" (-145)] = var c (6)
        end call method: start 7, params 3, ret values 0
      end scope ret values 0
    end function: # (52), index 25

[256] }(10)

    move: # (53) = const null (-1)
    move: # (54) = const number 10 (-11)
  end call: start 52, params 3, ret values 0


[258] print "Script environment"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Script environment" (-146)
  end call method: start 52, params 3, ret values 0


[259] print _E

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = var _E (2)
  end call method: start 52, params 3, ret values 0


[261] print "Math functions"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Math functions" (-147)
  end call method: start 52, params 3, ret values 0


[262] var a = [math.random() math.random() math.random() math.random() math.random() math.random()]

  new array 6: # (52)
  begin call method
    move: # (53) = # (52)
    move: # (54) = const string "push" (-44)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "random" (-149)
    end call method: start 55, params 2, ret values 1
  end call method: start 53, params 3, ret values 0
  begin call method
    move: # (53) = # (52)
    move: # (54) = const string "push" (-44)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "random" (-149)
    end call method: start 55, params 2, ret values 1
  end call method: start 53, params 3, ret values 0
  begin call method
    move: # (53) = # (52)
    move: # (54) = const string "push" (-44)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "random" (-149)
    end call method: start 55, params 2, ret values 1
  end call method: start 53, params 3, ret values 0
  begin call method
    move: # (53) = # (52)
    move: # (54) = const string "push" (-44)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "random" (-149)
    end call method: start 55, params 2, ret values 1
  end call method: start 53, params 3, ret values 0
  begin call method
    move: # (53) = # (52)
    move: # (54) = const string "push" (-44)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "random" (-149)
    end call method: start 55, params 2, ret values 1
  end call method: start 53, params 3, ret values 0
  begin call method
    move: # (53) = # (52)
    move: # (54) = const string "push" (-44)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "random" (-149)
    end call method: start 55, params 2, ret values 1
  end call method: start 53, params 3, ret values 0
  move: var a (45) = # (52)


[263] print("random" a)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "random" (-149)
    move: # (55) = var a (45)
  end call method: start 52, params 4, ret values 0


[266] delete Array.__iter // delete our iterator, use default one

  begin call method
    move: # (52) = var _G (3)
    move: # (53) = const string "__delete" (-119)
    get property: # (54) = var _E (2) [const string "Array" (-72)]
    move: # (55) = const string "__iter" (-65)
  end call method: start 52, params 4, ret values 0


[268] var transform = function(a f){

  begin function
    begin locals 11, stack 14
      0 _F (param)
      1 this (param)
      2 a (param)
      3 f (param)
      4 _E
      5 _G
      6 r
    end locals

[269] var r = arrayOf(a) ? [] : {}

    begin question
      begin bool exp
        begin call method
          move: # (11) = var _E (4)
          move: # (12) = const string "arrayOf" (-150)
          move: # (13) = param a (2)
        end call method: start 11, params 3, ret values 1
      end bool exp
      begin then value
        new array 0: # (11)
      end then value
      begin else value
        new object 0: # (11)
      end else value
    end question ret values 1
    move: var r (6) = # (11)


[270] for(var i, v in a){

    begin scope
      begin locals 4
        7 i
        8 v
        9 #func
        10 #valid
      end locals




      begin call method
        move: # (11) = param a (2)
        move: # (12) = const string "__iter" (-65)
      end call method: start 11, params 2, ret values 1
      move: var #func (9) = # (11)
      begin loop
        begin call
          move: # (11) = var #func (9)
          move: # (12) = const null (-1)
        end call: start 11, params 2, ret values 3
        move: var v (8) = # (13)
        move: var i (7) = # (12)
        move: var #valid (10) = # (11)

        begin if
          begin bool exp
            move: # (11) = var #valid (10)
            # (11) = [logic not] # (11)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[271] r[i] = f(v)

        begin scope
          begin call
            move: # (11) = param f (3)
            move: # (12) = const null (-1)
            move: # (13) = var v (8)
          end call: start 11, params 3, ret values 1
          set property: var r (6) [var i (7)] = # (11)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[273] return r

    return: var r (6), count 1
  end function: var transform (46), index 26


[275] a = transform(a, {|a| a*100})

  begin call
    move: # (52) = var transform (46)
    move: # (53) = const null (-1)
    move: # (54) = var a (45)
    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
      end locals
        # (5) = param a (2) [operator *] const number 100 (-20)
      return: # (5), count 1
    end function: # (55), index 27
  end call: start 52, params 4, ret values 1
  move: var a (45) = # (52)


[276] print("mult 100" a)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "mult 100" (-151)
    move: # (55) = var a (45)
  end call method: start 52, params 4, ret values 0


[277] print("math.ceil" transform(a, math.ceil))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.ceil" (-152)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      get property: # (58) = var _E (2) [const string "math" (-148)]
      get property: # (58) = # (58) [const string "ceil" (-153)]
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[278] print("math.floor" transform(a, math.floor))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.floor" (-154)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      get property: # (58) = var _E (2) [const string "math" (-148)]
      get property: # (58) = # (58) [const string "floor" (-155)]
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[279] print("math.round(-1)" transform(a, {|a| math.round(a, -1)}))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.round(-1)" (-156)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-148)]
            move: # (6) = const string "round" (-157)
            move: # (7) = param a (2)
            # (8) = [neg] const number 1 (-9)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (58), index 28
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[280] print("math.round(2)" transform(a, {|a| math.round(a, 2)}))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.round(2)" (-158)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-148)]
            move: # (6) = const string "round" (-157)
            move: # (7) = param a (2)
            move: # (8) = const number 2 (-7)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (58), index 29
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[281] print("math.sin" transform(a, math.sin))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.sin" (-159)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      get property: # (58) = var _E (2) [const string "math" (-148)]
      get property: # (58) = # (58) [const string "sin" (-160)]
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[282] print("math.cos" transform(a, math.cos))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.cos" (-161)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      get property: # (58) = var _E (2) [const string "math" (-148)]
      get property: # (58) = # (58) [const string "cos" (-162)]
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[283] print("math.tan" transform(a, math.tan))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "math.tan" (-163)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      get property: # (58) = var _E (2) [const string "math" (-148)]
      get property: # (58) = # (58) [const string "tan" (-164)]
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[285] _E = math

  get property: var _E (2) = var _E (2) [const string "math" (-148)]


[286] print "Extend local environment to be able to use math module without namespace"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Extend local environment to be able to use math module without namespace" (-165)
  end call method: start 52, params 3, ret values 0


[287] print("round(3)" transform(a, {|a| round(a, 3)}))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "round(3)" (-166)
    begin call
      move: # (55) = var transform (46)
      move: # (56) = const null (-1)
      move: # (57) = var a (45)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "round" (-157)
            move: # (7) = param a (2)
            move: # (8) = const number 3 (-6)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (58), index 30
    end call: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[288] print("PI" PI)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "PI" (-167)
    get property: # (55) = var _E (2) [const string "PI" (-167)]
  end call method: start 52, params 4, ret values 0


[290] var core = require("core")

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "require" (-168)
    move: # (54) = const string "core" (-141)
  end call method: start 52, params 3, ret values 1
  move: var core (47) = # (52)


[291] print("core.eval(math.round(13.5))" core.eval("math.round(13.5)"))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "core.eval(math.round(13.5))" (-169)
    begin call method
      move: # (55) = var core (47)
      move: # (56) = const string "eval" (-170)
      move: # (57) = const string "math.round(13.5)" (-171)
    end call method: start 55, params 3, ret values 1
  end call method: start 52, params 4, ret values 0


[292] print("eval(math.round(13.5))" eval("math.round(13.5)"))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "eval(math.round(13.5))" (-172)
    begin call method
      move: # (55) = var _E (2)
      move: # (56) = const string "eval" (-170)
      move: # (57) = const string "math.round(13.5)" (-171)
    end call method: start 55, params 3, ret values 1
  end call method: start 52, params 4, ret values 0


[293] print("==============")

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "==============" (-173)
  end call method: start 52, params 3, ret values 0


[294] print("Next: math namespace is not used\nbut eval executes code in global environment by default\nso eval(round(13.5))" eval("round(13.5)"))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Next: math namespace is not used
but eval executes code in global environment by default
so eval(round(13.5))" (-174)
    begin call method
      move: # (55) = var _E (2)
      move: # (56) = const string "eval" (-170)
      move: # (57) = const string "round(13.5)" (-175)
    end call method: start 55, params 3, ret values 1
  end call method: start 52, params 4, ret values 0


[295] print("run eval in space of the current environment (round(13.5))" eval("round(13.5)", _E))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "run eval in space of the current environment (round(13.5))" (-176)
    begin call method
      move: # (55) = var _E (2)
      move: # (56) = const string "eval" (-170)
      move: # (57) = const string "round(13.5)" (-175)
      move: # (58) = var _E (2)
    end call method: start 55, params 4, ret values 1
  end call method: start 52, params 4, ret values 0


[297] var __planet = "Mars"

  move: var __planet (48) = const string "Mars" (-177)


[298] function get planet(){ return __planet }

  begin function
    begin locals 4, stack 5
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      get upvalue: # (4) = var __planet (48 1)
    return: # (4), count 1
  end function: # (52), index 31
  set property: var _E (2) [const string "__get@planet" (-178)] = # (52)


[299] function set planet(a){ __planet = a }

  begin function
    begin locals 5, stack 6
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
    end locals
    set upvalue: var __planet (48 1) = param a (2)
  end function: # (52), index 32
  set property: var _E (2) [const string "__set@planet" (-179)] = # (52)


[301] print "Planet should be Mars: "..planet

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "Planet should be Mars: " (-180)
      get property: # (57) = var _E (2) [const string "planet" (-181)]
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[302] planet = "Mercury"

  move: # (52) = const string "Mercury" (-182)
  set property: var _E (2) [const string "planet" (-181)] = # (52)


[303] print "Planet should be Mercury: "..planet

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "Planet should be Mercury: " (-183)
      get property: # (57) = var _E (2) [const string "planet" (-181)]
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[305] function compareValues(a, b){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
      6 x
      7 y
    end locals

[306] var x, y = numberof(a), numberof(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "numberof" (-185)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "numberof" (-185)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[307] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[308] x, y = stringof(a), stringof(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "stringof" (-186)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "stringof" (-186)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[309] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[310] return a <=> b

      # (8) = param a (2) [operator <=>] param b (3)
    return: # (8), count 1
  end function: # (52), index 33
  set property: var _E (2) [const string "compareValues" (-184)] = # (52)


[313] function Object.__getdim(i, count){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 i (param)
      3 count (param)
      4 _E
      5 _G
    end locals

[314] return this.sub(i, count)

      begin call method
        move: # (6) = param this (1)
        move: # (7) = const string "sub" (-187)
        move: # (8) = param i (2)
        move: # (9) = param count (3)
      end call method: start 6, params 4, ret values 1
    return: # (6), count 1
  end function: # (52), index 34

[313] function Object.__getdim(i, count){

  get property: # (53) = var _E (2) [const string "Object" (-188)]
  set property: # (53) [const string "__getdim" (-127)] = # (52)


[317] function String.__get(i){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 i (param)
      3 _E
      4 _G
    end locals

[318] return this.sub(i, 1)

      begin call method
        move: # (5) = param this (1)
        move: # (6) = const string "sub" (-187)
        move: # (7) = param i (2)
        move: # (8) = const number 1 (-9)
      end call method: start 5, params 4, ret values 1
    return: # (5), count 1
  end function: # (52), index 35

[317] function String.__get(i){

  get property: # (53) = var _E (2) [const string "String" (-189)]
  set property: # (53) [const string "__get" (-116)] = # (52)


[321] print "Sorted array"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Sorted array" (-190)
  end call method: start 52, params 3, ret values 0


[322] print([9 4 0 276 15 39 3].sort())

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new array 7: # (54)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 9 (-19)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 0 (-15)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 276 (-21)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 39 (-23)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
    end call method: start 54, params 2, ret values 1
  end call method: start 52, params 3, ret values 0


[324] function Object.do(func){

  begin function
    begin locals 5, stack 8
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[325] func.call(this)

    begin call method
      move: # (5) = param func (2)
      move: # (6) = const string "call" (-96)
      move: # (7) = param this (1)
    end call method: start 5, params 3, ret values 0


[326] return this

    return: param this (1), count 1
  end function: # (52), index 36

[324] function Object.do(func){

  get property: # (53) = var _E (2) [const string "Object" (-188)]
  set property: # (53) [const string "do" (-192)] = # (52)


[329] print "User sorted array by keys"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "User sorted array by keys" (-193)
  end call method: start 52, params 3, ret values 0


[330] print([0 1 2 3 4 5 6 7 8 9].do {||

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new array 10: # (54)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 0 (-15)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 1 (-9)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 2 (-7)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 5 (-4)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 6 (-24)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 7 (-10)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 8 (-25)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 9 (-19)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "do" (-192)
      begin function
        begin locals 10, stack 13
          0 _F (param)
          1 this (param)
          2 _E
          3 _G
          4 keys
          5 values
        end locals

[331] var keys = this.keys.sort{|a b| (a % 3) <=> (b % 3)}

        begin call method
          get property: # (10) = param this (1) [const string "keys" (-194)]
          move: # (11) = const string "sort" (-191)
          begin function
            begin locals 6, stack 9
              0 _F (param)
              1 this (param)
              2 a (param)
              3 b (param)
              4 _E
              5 _G
            end locals
              # (6) = param a (2) [operator %] const number 3 (-6)
              # (7) = param b (3) [operator %] const number 3 (-6)
              # (6) = # (6) [operator <=>] # (7)
            return: # (6), count 1
          end function: # (12), index 38
        end call method: start 10, params 3, ret values 1
        move: var keys (4) = # (10)

[332] var values = this.clone()

        begin call method
          move: # (10) = param this (1)
          move: # (11) = const string "clone" (-195)
        end call method: start 10, params 2, ret values 1
        move: var values (5) = # (10)

[333] for(var k, v in keys){

        begin scope
          begin locals 4
            6 k
            7 v
            8 #func
            9 #valid
          end locals




          begin call method
            move: # (10) = var keys (4)
            move: # (11) = const string "__iter" (-65)
          end call method: start 10, params 2, ret values 1
          move: var #func (8) = # (10)
          begin loop
            begin call
              move: # (10) = var #func (8)
              move: # (11) = const null (-1)
            end call: start 10, params 2, ret values 3
            move: var v (7) = # (12)
            move: var k (6) = # (11)
            move: var #valid (9) = # (10)

            begin if
              begin bool exp
                move: # (10) = var #valid (9)
                # (10) = [logic not] # (10)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[334] this[v] = values[v]

            begin scope
              get property: # (10) = var values (5) [var v (7)]
              set property: param this (1) [var v (7)] = # (10)
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end function: # (56), index 37
    end call method: start 54, params 3, ret values 1
  end call method: start 52, params 3, ret values 0


[338] print "Sorted array (reverse)"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Sorted array (reverse)" (-196)
  end call method: start 52, params 3, ret values 0


[339] print([9 4 0 276 15 39 3].sort{|a b| b <=> a})

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new array 7: # (54)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 9 (-19)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 0 (-15)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 276 (-21)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 39 (-23)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (56), index 39
    end call method: start 54, params 3, ret values 1
  end call method: start 52, params 3, ret values 0


[341] print "User sorted array"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "User sorted array" (-197)
  end call method: start 52, params 3, ret values 0


[342] print([9 4 0 276 15 39 3].sort{|a b| (a % 10) <=> (b % 10)})

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new array 7: # (54)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 9 (-19)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 0 (-15)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 276 (-21)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 39 (-23)
      end call method: start 55, params 3, ret values 0
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
      begin function
        begin locals 6, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param a (2) [operator %] const number 10 (-11)
          # (7) = param b (3) [operator %] const number 10 (-11)
          # (6) = # (6) [operator <=>] # (7)
        return: # (6), count 1
      end function: # (56), index 40
    end call method: start 54, params 3, ret values 1
  end call method: start 52, params 3, ret values 0


[344] print "Sorted object by values"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Sorted object by values" (-198)
  end call method: start 52, params 3, ret values 0


[345] print({b=9 4 d=0 c=276 15 a=39 3}.sort())

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new object 7: # (54)
      set property: # (54) [const string "b" (-199)] = const number 9 (-19)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "d" (-200)] = const number 0 (-15)
      set property: # (54) [const string "c" (-145)] = const number 276 (-21)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "a" (-144)] = const number 39 (-23)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
    end call method: start 54, params 2, ret values 1
  end call method: start 52, params 3, ret values 0


[351] print "Sorted object by values (reverse)"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Sorted object by values (reverse)" (-201)
  end call method: start 52, params 3, ret values 0


[352] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b| b <=> a})

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new object 7: # (54)
      set property: # (54) [const string "b" (-199)] = const number 9 (-19)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "d" (-200)] = const number 0 (-15)
      set property: # (54) [const string "c" (-145)] = const number 276 (-21)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "a" (-144)] = const number 39 (-23)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (56), index 41
    end call method: start 54, params 3, ret values 1
  end call method: start 52, params 3, ret values 0


[354] print "Sorted object by keys"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Sorted object by keys" (-202)
  end call method: start 52, params 3, ret values 0


[355] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(ka kb) })

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new object 7: # (54)
      set property: # (54) [const string "b" (-199)] = const number 9 (-19)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "d" (-200)] = const number 0 (-15)
      set property: # (54) [const string "c" (-145)] = const number 276 (-21)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "a" (-144)] = const number 39 (-23)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-184)
            move: # (10) = param ka (4)
            move: # (11) = param kb (5)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (56), index 42
    end call method: start 54, params 3, ret values 1
  end call method: start 52, params 3, ret values 0


[357] print "Sorted object by keys (reverse)"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Sorted object by keys (reverse)" (-203)
  end call method: start 52, params 3, ret values 0


[358] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(kb ka) })

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      new object 7: # (54)
      set property: # (54) [const string "b" (-199)] = const number 9 (-19)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 4 (-5)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "d" (-200)] = const number 0 (-15)
      set property: # (54) [const string "c" (-145)] = const number 276 (-21)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 15 (-22)
      end call method: start 55, params 3, ret values 0
      set property: # (54) [const string "a" (-144)] = const number 39 (-23)
      begin call method
        move: # (55) = # (54)
        move: # (56) = const string "push" (-44)
        move: # (57) = const number 3 (-6)
      end call method: start 55, params 3, ret values 0
      move: # (55) = const string "sort" (-191)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-184)
            move: # (10) = param kb (5)
            move: # (11) = param ka (4)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (56), index 43
    end call method: start 54, params 3, ret values 1
  end call method: start 52, params 3, ret values 0


[360] var function testFunc(arg1, arg2){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 arg1 (param)
      3 arg2 (param)
      4 _E
      5 _G
      6 testFunc2
      7 i
    end locals

[361] var testFunc2 = {|arg1 arg2 arg3|

    begin function
      begin locals 9, stack 13
        0 _F (param)
        1 this (param)
        2 arg1 (param)
        3 arg2 (param)
        4 arg3 (param)
        5 _E
        6 _G
        7 testFunc3
        8 i
      end locals

[362] var testFunc3 = {|arg1|

      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 arg1 (param)
          3 _E
          4 _G
          5 i
        end locals

[363] printBackTrace()

        begin call method
          move: # (6) = var _E (3)
          move: # (7) = const string "printBackTrace" (-204)
        end call method: start 6, params 2, ret values 0

[364] var i = 0 // add some code at the end of function to prevent tail call

        move: var i (5) = const number 0 (-15)
      end function: var testFunc3 (7), index 46

[366] testFunc3(1, 2)

      begin call
        move: # (9) = var testFunc3 (7)
        move: # (10) = const null (-1)
        move: # (11) = const number 1 (-9)
        move: # (12) = const number 2 (-7)
      end call: start 9, params 4, ret values 0

[367] var i = 0 // add some code at the end of function to prevent tail call

      move: var i (8) = const number 0 (-15)
    end function: var testFunc2 (6), index 45

[369] testFunc2(1, 2)

    begin call
      move: # (8) = var testFunc2 (6)
      move: # (9) = const null (-1)
      move: # (10) = const number 1 (-9)
      move: # (11) = const number 2 (-7)
    end call: start 8, params 4, ret values 0

[370] var i = 0 // add some code at the end of function to prevent tail call

    move: var i (7) = const number 0 (-15)
  end function: var testFunc (49), index 44


[372] print "Test back trace"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Test back trace" (-205)
  end call method: start 52, params 3, ret values 0


[373] testFunc(1, 2)

  begin call
    move: # (52) = var testFunc (49)
    move: # (53) = const null (-1)
    move: # (54) = const number 1 (-9)
    move: # (55) = const number 2 (-7)
  end call: start 52, params 4, ret values 0


[375] print "Test 5 < 10 ? 7 : 3 --> "..(5 < 10 ? 7 : 3)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "Test 5 < 10 ? 7 : 3 --> " (-206)
      begin question
        begin bool exp
          move: # (57) = const number 5 (-4)
          move: # (58) = const number 10 (-11)
          # (57) = # (57) [logic <] # (58)
        end bool exp
        begin then value
          move: # (57) = const number 7 (-10)
        end then value
        begin else value
          move: # (57) = const number 3 (-6)
        end else value
      end question ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[376] print "Test in operator (should be true) "..("name" in {x = 0 y = 0 name = 0 index = 0})

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "Test in operator (should be true) " (-207)
      begin call method
        move: # (57) = var _G (3)
        move: # (58) = const string "__in" (-208)
        move: # (59) = const string "name" (-209)
        new object 4: # (60)
        set property: # (60) [const string "x" (-42)] = const number 0 (-15)
        set property: # (60) [const string "y" (-43)] = const number 0 (-15)
        set property: # (60) [const string "name" (-209)] = const number 0 (-15)
        set property: # (60) [const string "index" (-210)] = const number 0 (-15)
      end call method: start 57, params 4, ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[378] print "Test _F and recursion"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "Test _F and recursion" (-211)
  end call method: start 52, params 3, ret values 0


[379] print "factorial(20) = " .. {|a| a <= 1 ? 1 : a*_F(a-1)}(20)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    begin call method
      move: # (54) = var _G (3)
      move: # (55) = const string "concat" (-34)
      move: # (56) = const string "factorial(20) = " (-212)
      begin call
        begin function
          begin locals 5, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 _E
            4 _G
          end locals
            begin question
              begin bool exp
                move: # (5) = param a (2)
                move: # (6) = const number 1 (-9)
                # (5) = # (5) [logic <=] # (6)
              end bool exp
              begin then value
                move: # (5) = const number 1 (-9)
              end then value
              begin else value
                begin call
                  move: # (6) = param _F (0)
                  move: # (7) = const null (-1)
                  # (8) = param a (2) [operator -] const number 1 (-9)
                end call: start 6, params 3, ret values 1
                # (5) = param a (2) [operator *] # (6)
              end else value
            end question ret values 1
          return: # (5), count 1
        end function: # (57), index 47
        move: # (58) = const null (-1)
        move: # (59) = const number 20 (-12)
      end call: start 57, params 3, ret values 1
    end call method: start 54, params 4, ret values 1
  end call method: start 52, params 3, ret values 0


[381] function Object.each(func){

  begin function
    begin locals 9, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[382] for(var k, v in this){

    begin scope
      begin locals 4
        5 k
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = param this (1)
        move: # (10) = const string "__iter" (-65)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var k (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[383] func(v, k)

        begin scope
          begin call
            move: # (9) = param func (2)
            move: # (10) = const null (-1)
            move: # (11) = var v (6)
            move: # (12) = var k (5)
          end call: start 9, params 4, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (52), index 48

[381] function Object.each(func){

  get property: # (53) = var _E (2) [const string "Object" (-188)]
  set property: # (53) [const string "each" (-213)] = # (52)


[387] [10 20 30 40].each {|a|

  begin call method
    new array 4: # (52)
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const number 10 (-11)
    end call method: start 53, params 3, ret values 0
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const number 20 (-12)
    end call method: start 53, params 3, ret values 0
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const number 30 (-13)
    end call method: start 53, params 3, ret values 0
    begin call method
      move: # (53) = # (52)
      move: # (54) = const string "push" (-44)
      move: # (55) = const number 40 (-14)
    end call method: start 53, params 3, ret values 0
    move: # (53) = const string "each" (-213)
    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
      end locals

[388] print a

        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-31)
          move: # (7) = param a (2)
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (54), index 49
  end call method: start 52, params 3, ret values 0


[408] printf("def: %v, decimal: %d, string: %s, def:%v\n", "John", 123.45678, 123.45678, 123.45678)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "printf" (-214)
    move: # (54) = const string "def: %v, decimal: %d, string: %s, def:%v
" (-215)
    move: # (55) = const string "John" (-216)
    move: # (56) = const number 123.457 (-26)
    move: # (57) = const number 123.457 (-26)
    move: # (58) = const number 123.457 (-26)
  end call method: start 52, params 7, ret values 0


[409] printf("number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f\n", math.round(123.45678, 2), math.round(123.45678, 2), 123.45678, 123.45678)

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "printf" (-214)
    move: # (54) = const string "number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f
" (-217)
    begin call method
      get property: # (55) = var _E (2) [const string "math" (-148)]
      move: # (56) = const string "round" (-157)
      move: # (57) = const number 123.457 (-26)
      move: # (58) = const number 2 (-7)
    end call method: start 55, params 4, ret values 1
    begin call method
      get property: # (56) = var _E (2) [const string "math" (-148)]
      move: # (57) = const string "round" (-157)
      move: # (58) = const number 123.457 (-26)
      move: # (59) = const number 2 (-7)
    end call method: start 56, params 4, ret values 1
    move: # (57) = const number 123.457 (-26)
    move: # (58) = const number 123.457 (-26)
  end call method: start 52, params 7, ret values 0


[410] printf("%s\n", sprintf("number: %n, float(%%.-2f): %.-2f", 12876.54321, 12876.54321))

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "printf" (-214)
    move: # (54) = const string "%s
" (-218)
    begin call method
      move: # (55) = var _E (2)
      move: # (56) = const string "sprintf" (-219)
      move: # (57) = const string "number: %n, float(%%.-2f): %.-2f" (-220)
      move: # (58) = const number 12876.5 (-27)
      move: # (59) = const number 12876.5 (-27)
    end call method: start 55, params 5, ret values 1
  end call method: start 52, params 4, ret values 0


[413] print "Buffer usage"

  begin scope
    begin locals 1
      50 buf
    end locals
    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "Buffer usage" (-221)
    end call method: start 52, params 3, ret values 0


[414] var buf = Buffer(123, "abc", "def")

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "Buffer" (-222)
      move: # (54) = const number 123 (-28)
      move: # (55) = const string "abc" (-223)
      move: # (56) = const string "def" (-224)
    end call method: start 52, params 5, ret values 1
    move: var buf (50) = # (52)


[415] buf.append(4.5, "-append")

    begin call method
      move: # (52) = var buf (50)
      move: # (53) = const string "append" (-225)
      move: # (54) = const number 4.5 (-29)
      move: # (55) = const string "-append" (-226)
    end call method: start 52, params 4, ret values 0


[416] buf.printf("-%v\n", 123.4567)

    begin call method
      move: # (52) = var buf (50)
      move: # (53) = const string "printf" (-214)
      move: # (54) = const string "-%v
" (-227)
      move: # (55) = const number 123.457 (-30)
    end call method: start 52, params 4, ret values 0


[417] str = toString(buf)

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "toString" (-229)
      move: # (54) = var buf (50)
    end call method: start 52, params 3, ret values 1
    set property: var _E (2) [const string "str" (-228)] = # (52)


[418] echo str

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "echo" (-52)
      get property: # (54) = var _E (2) [const string "str" (-228)]
    end call method: start 52, params 3, ret values 0
  end scope ret values 0


[422] print "File usage"

  begin scope
    begin locals 1
      51 f
    end locals
    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "print" (-31)
      move: # (54) = const string "File usage" (-230)
    end call method: start 52, params 3, ret values 0


[423] var f = File("c:/Sources/OS/examples-os/test.os", "rb")

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "File" (-231)
      move: # (54) = const string "c:/Sources/OS/examples-os/test.os" (-232)
      move: # (55) = const string "rb" (-233)
    end call method: start 52, params 4, ret values 1
    move: var f (51) = # (52)


[424] str = f.read(100)

    begin call method
      move: # (52) = var f (51)
      move: # (53) = const string "read" (-234)
      move: # (54) = const number 100 (-20)
    end call method: start 52, params 3, ret values 1
    set property: var _E (2) [const string "str" (-228)] = # (52)


[426] echo str

    begin call method
      move: # (52) = var _E (2)
      move: # (53) = const string "echo" (-52)
      get property: # (54) = var _E (2) [const string "str" (-228)]
    end call method: start 52, params 3, ret values 0
  end scope ret values 0


[429] terminate()

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "terminate" (-235)
  end call method: start 52, params 2, ret values 0


[430] print "This text is never printed"

  begin call method
    move: # (52) = var _E (2)
    move: # (53) = const string "print" (-31)
    move: # (54) = const string "This text is never printed" (-236)
  end call method: start 52, params 3, ret values 0

  return: var _E (2), count 1
end function: <<->> (0), index 0
