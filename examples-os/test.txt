
[FILE] ../../examples-os/test.os
[1] echo("file: "__FILE__", line: "__LINE__"\n")

begin function
  begin locals 68, stack 81
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    34 Person
    35 p
    36 IvanPerson
    37 p
    38 vec3
    39 v1
    40 v2
    41 v3
    45 a
    46 core
    47 __planet
    56 testFunc
  end locals
  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "echo" (-31)
    move: # (70) = const string "file: " (-32)
    begin call method
      move: # (71) = var _G (3)
      move: # (72) = const string "__getfilename" (-33)
    end call method: start 71, params 2, ret values 1
    move: # (72) = const string ", line: " (-34)
    move: # (73) = const number 1 (-4)
    move: # (74) = const string "
" (-35)
  end call method: start 68, params 7, ret values 0


[4] print(5 " differences")

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const number 5 (-5)
    move: # (71) = const string " differences" (-37)
  end call method: start 68, params 4, ret values 0


[7] var i = 4

  begin scope
    begin locals 4
      4 i
      5 name
      6 count
      7 time
    end locals
    move: var i (4) = const number 4 (-6)


[9] var name, count, time = "Smith", 3 + 2/i, 1.23

    move: # (68) = const string "Smith" (-38)
    # (70) = const number 2 (-8) [operator /] var i (4)
    # (69) = const number 3 (-7) [operator +] # (70)
    move: var time (7) = const number 1.23 (-9)
    move: var count (6) = # (69)
    move: var name (5) = # (68)


[11] print concat("name: " name ", count: " count ", time: " time)

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _E (2)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "name: " (-40)
        move: # (73) = var name (5)
        move: # (74) = const string ", count: " (-41)
        move: # (75) = var count (6)
        move: # (76) = const string ", time: " (-42)
        move: # (77) = var time (7)
      end call method: start 70, params 8, ret values 1
    end call method: start 68, params 3, ret values 0
  end scope ret values 0


[15] print {firstname="Ivan" lastname="Petrov"}

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    new object 2: # (70)
    init property: # (70) [const string "firstname" (-43)] = const string "Ivan" (-44)
    init property: # (70) [const string "lastname" (-45)] = const string "Petrov" (-46)
  end call method: start 68, params 3, ret values 0


[19] var a = {x=1, y=3; "zero" "one", "two" last:7,}

  begin scope
    begin locals 11
      8 a
      9 b
      10 i
      11 j
      12 k
      13 test
      14 a
      15 b
      16 a
      17 b
      18 c
    end locals
    new object 6: # (68)
    init property: # (68) [const string "x" (-47)] = const number 1 (-4)
    init property: # (68) [const string "y" (-48)] = const number 3 (-7)
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const string "zero" (-50)
    end call method: start 69, params 3, ret values 0
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const string "one" (-51)
    end call method: start 69, params 3, ret values 0
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const string "two" (-52)
    end call method: start 69, params 3, ret values 0
    init property: # (68) [const string "last" (-53)] = const number 7 (-10)
    move: var a (8) = # (68)


[20] print a[1]

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      get property: # (70) = var a (8) [const number 1 (-4)]
    end call method: start 68, params 3, ret values 0


[21] print a

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = var a (8)
    end call method: start 68, params 3, ret values 0


[24] a = {[2+3]="five" y=3}

    new object 2: # (68)
    init property: # (68) [const number 5 (-5)] = const string "five" (-54)
    init property: # (68) [const string "y" (-48)] = const number 3 (-7)
    move: var a (8) = # (68)


[25] print a[5]

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      get property: # (70) = var a (8) [const number 5 (-5)]
    end call method: start 68, params 3, ret values 0


[26] print a

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = var a (8)
    end call method: start 68, params 3, ret values 0


[28] a = {x=1 y=2}

    new object 2: # (68)
    init property: # (68) [const string "x" (-47)] = const number 1 (-4)
    init property: # (68) [const string "y" (-48)] = const number 2 (-8)
    move: var a (8) = # (68)


[30] var b = {[a]="powerful" 7="greate"}

    new object 2: # (68)
    init property: # (68) [var a (8)] = const string "powerful" (-55)
    init property: # (68) [const number 7 (-10)] = const string "greate" (-56)
    move: var b (9) = # (68)


[31] print b[a]

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      get property: # (70) = var b (9) [var a (8)]
    end call method: start 68, params 3, ret values 0


[33] print([10, 20, 30, 40])

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      new array 4: # (70)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 10 (-11)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 20 (-12)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 30 (-13)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 40 (-14)
      end call method: start 71, params 3, ret values 0
    end call method: start 68, params 3, ret values 0


[35] print([10 20 30 40])

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      new array 4: # (70)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 10 (-11)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 20 (-12)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 30 (-13)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 40 (-14)
      end call method: start 71, params 3, ret values 0
    end call method: start 68, params 3, ret values 0


[38] var i, j, k = 0, 1, 3

    move: # (68) = const number 0 (-15)
    move: # (69) = const number 1 (-4)
    move: var k (12) = const number 3 (-7)
    move: var j (11) = # (69)
    move: var i (10) = # (68)


[39] echo("i="i", j="j", k="k"\n")

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "echo" (-31)
      move: # (70) = const string "i=" (-57)
      move: # (71) = var i (10)
      move: # (72) = const string ", j=" (-58)
      move: # (73) = var j (11)
      move: # (74) = const string ", k=" (-59)
      move: # (75) = var k (12)
      move: # (76) = const string "
" (-35)
    end call method: start 68, params 9, ret values 0


[42] i, j = j, i

    move: # (68) = var j (11)
    move: var j (11) = var i (10)
    move: var i (10) = # (68)


[43] echo("after swap: i="i", j="j"\n")

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "echo" (-31)
      move: # (70) = const string "after swap: i=" (-60)
      move: # (71) = var i (10)
      move: # (72) = const string ", j=" (-58)
      move: # (73) = var j (11)
      move: # (74) = const string "
" (-35)
    end call method: start 68, params 7, ret values 0


[46] var test = function(){ return 1, 2 }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        move: # (4) = const number 1 (-4)
        move: # (5) = const number 2 (-8)
      return: # (4), count 2
    end function: var test (13), index 1


[47] var a, b = test()

    begin call
      move: # (68) = var test (13)
      move: # (69) = const null (-1)
    end call: start 68, params 2, ret values 2
    move: var b (15) = # (69)
    move: var a (14) = # (68)


[48] print("results from function" "a="..a "b="..b)

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "results from function" (-61)
      begin call method
        move: # (71) = var _G (3)
        move: # (72) = const string "concat" (-39)
        move: # (73) = const string "a=" (-62)
        move: # (74) = var a (14)
      end call method: start 71, params 4, ret values 1
      begin call method
        move: # (72) = var _G (3)
        move: # (73) = const string "concat" (-39)
        move: # (74) = const string "b=" (-63)
        move: # (75) = var b (15)
      end call method: start 72, params 4, ret values 1
    end call method: start 68, params 5, ret values 0


[51] var a, b, c = test()

    begin call
      move: # (68) = var test (13)
      move: # (69) = const null (-1)
    end call: start 68, params 2, ret values 3
    move: var c (18) = # (70)
    move: var b (17) = # (69)
    move: var a (16) = # (68)


[52] print("results from function" "a="..a "b="..b "c="..c)

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "results from function" (-61)
      begin call method
        move: # (71) = var _G (3)
        move: # (72) = const string "concat" (-39)
        move: # (73) = const string "a=" (-62)
        move: # (74) = var a (16)
      end call method: start 71, params 4, ret values 1
      begin call method
        move: # (72) = var _G (3)
        move: # (73) = const string "concat" (-39)
        move: # (74) = const string "b=" (-63)
        move: # (75) = var b (17)
      end call method: start 72, params 4, ret values 1
      begin call method
        move: # (73) = var _G (3)
        move: # (74) = const string "concat" (-39)
        move: # (75) = const string "c=" (-64)
        move: # (76) = var c (18)
      end call method: start 73, params 4, ret values 1
    end call method: start 68, params 6, ret values 0
  end scope ret values 0


[56] print "Object iterator test"

  begin scope
    begin locals 2
      19 obj
      28 range
    end locals
    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Object iterator test" (-65)
    end call method: start 68, params 3, ret values 0


[57] var obj = { null awesome=true 12 "excellent" }

    new object 4: # (68)
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const null (-1)
    end call method: start 69, params 3, ret values 0
    init property: # (68) [const string "awesome" (-66)] = const true (-2)
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const number 12 (-16)
    end call method: start 69, params 3, ret values 0
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const string "excellent" (-67)
    end call method: start 69, params 3, ret values 0
    move: var obj (19) = # (68)


[58] for(var k, v in obj){

    begin scope
      begin locals 4
        20 k
        21 v
        22 #func
        23 #valid
      end locals




      begin call method
        move: # (68) = var obj (19)
        move: # (69) = const string "__iter" (-68)
      end call method: start 68, params 2, ret values 1
      move: var #func (22) = # (68)
      begin loop
        begin call
          move: # (68) = var #func (22)
          move: # (69) = const null (-1)
        end call: start 68, params 2, ret values 3
        move: var v (21) = # (70)
        move: var k (20) = # (69)
        move: var #valid (23) = # (68)

        begin if
          begin bool exp
            move: # (68) = var #valid (23)
            # (68) = [logic not] # (68)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[59] print( k " --> " v )

        begin scope
          begin call method
            move: # (68) = var _E (2)
            move: # (69) = const string "print" (-36)
            move: # (70) = var k (20)
            move: # (71) = const string " --> " (-69)
            move: # (72) = var v (21)
          end call method: start 68, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[62] print "Object iterator test, only keys"

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Object iterator test, only keys" (-70)
    end call method: start 68, params 3, ret values 0


[63] for(k in obj){

    begin scope
      begin locals 2
        24 #func
        25 #valid
      end locals



      begin call method
        move: # (68) = var obj (19)
        move: # (69) = const string "__iter" (-68)
      end call method: start 68, params 2, ret values 1
      move: var #func (24) = # (68)
      begin loop
        begin call
          move: # (68) = var #func (24)
          move: # (69) = const null (-1)
        end call: start 68, params 2, ret values 2
        set property: var _E (2) [const string "k" (-71)] = # (69)
        move: var #valid (25) = # (68)

        begin if
          begin bool exp
            move: # (68) = var #valid (25)
            # (68) = [logic not] # (68)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[64] print k

        begin scope
          begin call method
            move: # (68) = var _E (2)
            move: # (69) = const string "print" (-36)
            get property: # (70) = var _E (2) [const string "k" (-71)]
          end call method: start 68, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[67] print "Array iterator test"

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Array iterator test" (-72)
    end call method: start 68, params 3, ret values 0


[68] Array.__iter = function(){

    begin function
      begin locals 6, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
        4 i
        5 self
      end locals

[69] var i, self = 0, this

      move: # (6) = const number 0 (-15)
      move: var self (5) = param this (1)
      move: var i (4) = # (6)


[70] return function(){

        begin function
          begin locals 5, stack 11
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[71] if(i < #self){

          begin if
            begin bool exp
              get upvalue: # (5) = var i (4 1)
              begin call method
                get upvalue: # (6) = var self (5 1)
                move: # (7) = const string "__len" (-73)
              end call method: start 6, params 2, ret values 1
              # (5) = # (5) [logic <] # (6)
            end bool exp
            begin then

[72] print("... inside of array iter func: " i self[i])

              begin scope
                begin locals 1
                  4 #temp
                end locals
                begin call method
                  move: # (5) = var _E (2)
                  move: # (6) = const string "print" (-36)
                  move: # (7) = const string "... inside of array iter func: " (-74)
                  get upvalue: # (8) = var i (4 1)
                  get upvalue: # (9) = var self (5 1)
                  get upvalue: # (10) = var i (4 1)
                  get property: # (9) = # (9) [# (10)]
                end call method: start 5, params 5, ret values 0


[73] return true, i, self[i++]

                  move: # (5) = const true (-2)
                  get upvalue: # (6) = var i (4 1)
                  get upvalue: # (7) = var self (5 1)
                  get upvalue: var #temp (4) = var i (4 1)
                  get upvalue: # (8) = var i (4 1)
                  # (8) = # (8) [operator +] const number 1 (-4)
                  set upvalue: var i (4 1) = # (8)
                  move: # (8) = var #temp (4)
                  get property: # (7) = # (7) [# (8)]
                return: # (5), count 3
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 3
      return: # (6), count 1
    end function: # (68), index 2

[68] Array.__iter = function(){

    get property: # (69) = var _E (2) [const string "Array" (-75)]
    set property: # (69) [const string "__iter" (-68)] = # (68)


[77] for(k, v in [10 20 30 40 50]){

    begin scope
      begin locals 2
        26 #func
        27 #valid
      end locals




      begin call method
        new array 5: # (68)
        begin call method
          move: # (69) = # (68)
          move: # (70) = const string "push" (-49)
          move: # (71) = const number 10 (-11)
        end call method: start 69, params 3, ret values 0
        begin call method
          move: # (69) = # (68)
          move: # (70) = const string "push" (-49)
          move: # (71) = const number 20 (-12)
        end call method: start 69, params 3, ret values 0
        begin call method
          move: # (69) = # (68)
          move: # (70) = const string "push" (-49)
          move: # (71) = const number 30 (-13)
        end call method: start 69, params 3, ret values 0
        begin call method
          move: # (69) = # (68)
          move: # (70) = const string "push" (-49)
          move: # (71) = const number 40 (-14)
        end call method: start 69, params 3, ret values 0
        begin call method
          move: # (69) = # (68)
          move: # (70) = const string "push" (-49)
          move: # (71) = const number 50 (-17)
        end call method: start 69, params 3, ret values 0
        move: # (69) = const string "__iter" (-68)
      end call method: start 68, params 2, ret values 1
      move: var #func (26) = # (68)
      begin loop
        begin call
          move: # (68) = var #func (26)
          move: # (69) = const null (-1)
        end call: start 68, params 2, ret values 3
        set property: var _E (2) [const string "v" (-76)] = # (70)
        set property: var _E (2) [const string "k" (-71)] = # (69)
        move: var #valid (27) = # (68)

        begin if
          begin bool exp
            move: # (68) = var #valid (27)
            # (68) = [logic not] # (68)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[78] print( k " --> " v )

        begin scope
          begin call method
            move: # (68) = var _E (2)
            move: # (69) = const string "print" (-36)
            get property: # (70) = var _E (2) [const string "k" (-71)]
            move: # (71) = const string " --> " (-69)
            get property: # (72) = var _E (2) [const string "v" (-76)]
          end call method: start 68, params 5, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[81] print("Test array prototype:", [1 2 3].prototype === Array)

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Test array prototype:" (-77)
      new array 3: # (71)
      begin call method
        move: # (72) = # (71)
        move: # (73) = const string "push" (-49)
        move: # (74) = const number 1 (-4)
      end call method: start 72, params 3, ret values 0
      begin call method
        move: # (72) = # (71)
        move: # (73) = const string "push" (-49)
        move: # (74) = const number 2 (-8)
      end call method: start 72, params 3, ret values 0
      begin call method
        move: # (72) = # (71)
        move: # (73) = const string "push" (-49)
        move: # (74) = const number 3 (-7)
      end call method: start 72, params 3, ret values 0
      get property: # (71) = # (71) [const string "prototype" (-78)]
      get property: # (72) = var _E (2) [const string "Array" (-75)]
      # (71) = # (71) [logic ===] # (72)
    end call method: start 68, params 4, ret values 0


[83] print "Test range iterator"

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Test range iterator" (-79)
    end call method: start 68, params 3, ret values 0


[84] var range = function(a, b){

    begin function
      begin locals 6, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 b (param)
        4 _E
        5 _G
      end locals

[85] return function(){

        begin function
          begin locals 5, stack 8
            0 _F (param)
            1 this (param)
            2 _E
            3 _G
          end locals

[86] if(a <= b){

          begin if
            begin bool exp
              get upvalue: # (5) = param a (2 1)
              get upvalue: # (6) = param b (3 1)
              # (5) = # (5) [logic <=] # (6)
            end bool exp
            begin then

[87] return true, a++

              begin scope
                begin locals 1
                  4 #temp
                end locals
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = param a (2 1)
                  get upvalue: # (6) = param a (2 1)
                  # (6) = # (6) [operator +] const number 1 (-4)
                  set upvalue: param a (2 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
              end scope ret values 0
            end then
          end if ret values 0
        end function: # (6), index 5
      return: # (6), count 1
    end function: var range (28), index 4


[91] for(var i in range(10, 13)){

    begin scope
      begin locals 3
        29 i
        30 #func
        31 #valid
      end locals



      begin call method
        begin call
          move: # (68) = var range (28)
          move: # (69) = const null (-1)
          move: # (70) = const number 10 (-11)
          move: # (71) = const number 13 (-18)
        end call: start 68, params 4, ret values 1
        move: # (69) = const string "__iter" (-68)
      end call method: start 68, params 2, ret values 1
      move: var #func (30) = # (68)
      begin loop
        begin call
          move: # (68) = var #func (30)
          move: # (69) = const null (-1)
        end call: start 68, params 2, ret values 2
        move: var i (29) = # (69)
        move: var #valid (31) = # (68)

        begin if
          begin bool exp
            move: # (68) = var #valid (31)
            # (68) = [logic not] # (68)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[92] print "i = "..i

        begin scope
          begin call method
            move: # (68) = var _E (2)
            move: # (69) = const string "print" (-36)
            begin call method
              move: # (70) = var _G (3)
              move: # (71) = const string "concat" (-39)
              move: # (72) = const string "i = " (-80)
              move: # (73) = var i (29)
            end call method: start 70, params 4, ret values 1
          end call method: start 68, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end scope ret values 0


[97] print "7 && 9 = "..(7 && 9)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "7 && 9 = " (-81)
      move: # (73) = const number 7 (-10)
      logic &&: # (73)
        move: # (73) = const number 9 (-19)
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[98] print "7 || 9 = "..(7 || 9)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "7 || 9 = " (-82)
      move: # (73) = const number 7 (-10)
      logic ||: # (73)
        move: # (73) = const number 9 (-19)
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[103] var v1 = {x=1 y=2}

  begin scope
    begin locals 2
      32 v1
      33 a
    end locals
    new object 2: # (68)
    init property: # (68) [const string "x" (-47)] = const number 1 (-4)
    init property: # (68) [const string "y" (-48)] = const number 2 (-8)
    move: var v1 (32) = # (68)


[104] var a = {[v1]="vv1" v2="vv2"}

    new object 2: # (68)
    init property: # (68) [var v1 (32)] = const string "vv1" (-83)
    init property: # (68) [const string "v2" (-84)] = const string "vv2" (-85)
    move: var a (33) = # (68)


[105] print( a[v1] a.v2 )

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      get property: # (70) = var a (33) [var v1 (32)]
      get property: # (71) = var a (33) [const string "v2" (-84)]
    end call method: start 68, params 4, ret values 0
  end scope ret values 0


[110] var Person = {

  new object 3: # (68)

[111] __construct = function(firstname, lastname){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 firstname (param)
      3 lastname (param)
      4 _E
      5 _G
    end locals

[112] @firstname = firstname // equal to this.firstname = firstname

    set property: param this (1) [const string "firstname" (-43)] = param firstname (2)

[113] @lastname = lastname // equal to this.lastname = lastname

    set property: param this (1) [const string "lastname" (-45)] = param lastname (3)
  end function: # (70), index 6
  init property: # (68) [const string "__construct" (-86)] = # (70)

[115] walk = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[116] print @fullname .. " is walking!"

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "print" (-36)
        begin call method
          move: # (6) = var _G (3)
          move: # (7) = const string "concat" (-39)
          get property: # (8) = param this (1) [const string "fullname" (-88)]
          move: # (9) = const string " is walking!" (-89)
        end call method: start 6, params 4, ret values 1
      end call method: start 4, params 3, ret values 1
    return: # (4), count 1
  end function: # (70), index 7
  init property: # (68) [const string "walk" (-87)] = # (70)

[118] __get@fullname = function(){

  begin function
    begin locals 4, stack 10
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals

[119] return @firstname .. " " .. @lastname

      begin call method
        move: # (4) = var _G (3)
        move: # (5) = const string "concat" (-39)
        get property: # (6) = param this (1) [const string "firstname" (-43)]
        move: # (7) = const string " " (-91)
        get property: # (8) = param this (1) [const string "lastname" (-45)]
      end call method: start 4, params 5, ret values 1
    return: # (4), count 1
  end function: # (70), index 8
  init property: # (68) [const string "__get@fullname" (-90)] = # (70)
  move: var Person (34) = # (68)


[123] var p = Person("James", "Bond")

  begin call
    move: # (68) = var Person (34)
    move: # (69) = const null (-1)
    move: # (70) = const string "James" (-92)
    move: # (71) = const string "Bond" (-93)
  end call: start 68, params 4, ret values 1
  move: var p (35) = # (68)


[124] p.walk()

  begin call method
    move: # (68) = var p (35)
    move: # (69) = const string "walk" (-87)
  end call method: start 68, params 2, ret values 0


[125] print p

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = var p (35)
  end call method: start 68, params 3, ret values 0


[126] print "p is Person = " .. (p is Person)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "p is Person = " (-94)
      begin call method
        move: # (73) = var _G (3)
        move: # (74) = const string "__is" (-95)
        move: # (75) = var p (35)
        move: # (76) = var Person (34)
      end call method: start 73, params 4, ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[129] var IvanPerson = extends Person {

  begin call method
    move: # (68) = var _G (3)
    move: # (69) = const string "__extends" (-96)
    move: # (70) = var Person (34)
    new object 2: # (71)

[130] __construct = function(){

    begin function
      begin locals 4, stack 8
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[131] super("Ivan", "Petrov")

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
          move: # (6) = const string "Ivan" (-44)
          move: # (7) = const string "Petrov" (-46)
        end super call: start 4, params 4, ret values 1
      return: # (4), count 1
    end function: # (73), index 9
    init property: # (71) [const string "__construct" (-86)] = # (73)

[133] walk = function(){

    begin function
      begin locals 4, stack 7
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals

[134] echo "Someone named "

      begin call method
        move: # (4) = var _E (2)
        move: # (5) = const string "echo" (-31)
        move: # (6) = const string "Someone named " (-97)
      end call method: start 4, params 3, ret values 0


[135] super()

        begin super call
          move: # (4) = const null (-1)
          move: # (5) = const null (-1)
        end super call: start 4, params 2, ret values 1
      return: # (4), count 1
    end function: # (73), index 10
    init property: # (71) [const string "walk" (-87)] = # (73)
  end call method: start 68, params 4, ret values 1
  move: var IvanPerson (36) = # (68)


[140] var p = IvanPerson()

  begin call
    move: # (68) = var IvanPerson (36)
    move: # (69) = const null (-1)
  end call: start 68, params 2, ret values 1
  move: var p (37) = # (68)


[141] p.walk()

  begin call method
    move: # (68) = var p (37)
    move: # (69) = const string "walk" (-87)
  end call method: start 68, params 2, ret values 0


[142] print p

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = var p (37)
  end call method: start 68, params 3, ret values 0


[144] print "Person.walk.call"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Person.walk.call" (-98)
  end call method: start 68, params 3, ret values 0


[145] Person.walk.call(p)

  begin call method
    get property: # (68) = var Person (34) [const string "walk" (-87)]
    move: # (69) = const string "call" (-99)
    move: # (70) = var p (37)
  end call method: start 68, params 3, ret values 0


[149] function foo(a, b){ return a + b }

  begin function
    begin locals 6, stack 8
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals
      # (6) = param a (2) [operator +] param b (3)
    return: # (6), count 1
  end function: # (68), index 11
  set property: var _E (2) [const string "foo" (-100)] = # (68)


[150] function bar(){ return foo.apply(null, arguments) }

  begin function
    begin locals 4, stack 8
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      begin call method
        get property: # (4) = var _E (2) [const string "foo" (-100)]
        move: # (5) = const string "apply" (-102)
        move: # (6) = const null (-1)
        get arguments: # (7)
      end call method: start 4, params 4, ret values 1
    return: # (4), count 1
  end function: # (68), index 12
  set property: var _E (2) [const string "bar" (-101)] = # (68)


[151] print "should be 5: "..bar(2 3)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "should be 5: " (-103)
      begin call method
        move: # (73) = var _E (2)
        move: # (74) = const string "bar" (-101)
        move: # (75) = const number 2 (-8)
        move: # (76) = const number 3 (-7)
      end call method: start 73, params 4, ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[152] print "should be 9: "..bar(4 5)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "should be 9: " (-104)
      begin call method
        move: # (73) = var _E (2)
        move: # (74) = const string "bar" (-101)
        move: # (75) = const number 4 (-6)
        move: # (76) = const number 5 (-5)
      end call method: start 73, params 4, ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[156] var vec3 = {

  new object 3: # (68)

[157] __construct = function(x, y, z){

  begin function
    begin locals 7, stack 10
      0 _F (param)
      1 this (param)
      2 x (param)
      3 y (param)
      4 z (param)
      5 _E
      6 _G
    end locals

[158] this.x = x

    set property: param this (1) [const string "x" (-47)] = param x (2)

[159] this.y = y

    set property: param this (1) [const string "y" (-48)] = param y (3)

[160] this.z = z

    set property: param this (1) [const string "z" (-105)] = param z (4)
  end function: # (70), index 13
  init property: # (68) [const string "__construct" (-86)] = # (70)

[162] __add = {|b| vec3(@x + b.x, @y + b.y, @z + b.z)}

  begin function
    begin locals 5, stack 12
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals
      begin call
        get upvalue: # (5) = var vec3 (38 1)
        move: # (6) = const null (-1)
        get property: # (7) = param this (1) [const string "x" (-47)]
        get property: # (8) = param b (2) [const string "x" (-47)]
        # (7) = # (7) [operator +] # (8)
        get property: # (8) = param this (1) [const string "y" (-48)]
        get property: # (9) = param b (2) [const string "y" (-48)]
        # (8) = # (8) [operator +] # (9)
        get property: # (9) = param this (1) [const string "z" (-105)]
        get property: # (10) = param b (2) [const string "z" (-105)]
        # (9) = # (9) [operator +] # (10)
      end call: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (70), index 14
  init property: # (68) [const string "__add" (-106)] = # (70)

[164] __mul = {|b| vec3(@x * b.x, @y * b.y, @z * b.z)}

  begin function
    begin locals 5, stack 12
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals
      begin call
        get upvalue: # (5) = var vec3 (38 1)
        move: # (6) = const null (-1)
        get property: # (7) = param this (1) [const string "x" (-47)]
        get property: # (8) = param b (2) [const string "x" (-47)]
        # (7) = # (7) [operator *] # (8)
        get property: # (8) = param this (1) [const string "y" (-48)]
        get property: # (9) = param b (2) [const string "y" (-48)]
        # (8) = # (8) [operator *] # (9)
        get property: # (9) = param this (1) [const string "z" (-105)]
        get property: # (10) = param b (2) [const string "z" (-105)]
        # (9) = # (9) [operator *] # (10)
      end call: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (70), index 15
  init property: # (68) [const string "__mul" (-107)] = # (70)
  move: var vec3 (38) = # (68)


[167] var v1 = vec3(10 20 30)

  begin call
    move: # (68) = var vec3 (38)
    move: # (69) = const null (-1)
    move: # (70) = const number 10 (-11)
    move: # (71) = const number 20 (-12)
    move: # (72) = const number 30 (-13)
  end call: start 68, params 5, ret values 1
  move: var v1 (39) = # (68)


[168] var v2 = vec3(1 2 3)

  begin call
    move: # (68) = var vec3 (38)
    move: # (69) = const null (-1)
    move: # (70) = const number 1 (-4)
    move: # (71) = const number 2 (-8)
    move: # (72) = const number 3 (-7)
  end call: start 68, params 5, ret values 1
  move: var v2 (40) = # (68)


[169] var v3 = v1 + v2 * v2

  # (69) = var v2 (40) [operator *] var v2 (40)
  var v3 (41) = var v1 (39) [operator +] # (69)


[170] print "should be {x:11,y:24,z:39} " .. v3

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "should be {x:11,y:24,z:39} " (-108)
      move: # (73) = var v3 (41)
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[173] print "Test properties"

  begin scope
    begin locals 1
      42 a
    end locals
    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Test properties" (-109)
    end call method: start 68, params 3, ret values 0


[175] var a = {

    new object 3: # (68)

[176] _color = "red"

    init property: # (68) [const string "_color" (-110)] = const string "red" (-111)

[177] __get@color = {|| @_color }

    begin function
      begin locals 4, stack 6
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
      end locals
        get property: # (4) = param this (1) [const string "_color" (-110)]
      return: # (4), count 1
    end function: # (70), index 16
    init property: # (68) [const string "__get@color" (-112)] = # (70)

[178] __set@color = {|v| @_color = v }

    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 v (param)
        3 _E
        4 _G
      end locals
        set property: param this (1) [const string "_color" (-110)] = param v (2)
      return: param v (2), count 1
    end function: # (70), index 17
    init property: # (68) [const string "__set@color" (-113)] = # (70)
    move: var a (42) = # (68)


[182] print "should be red: " .. a["color"]

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be red: " (-114)
        get property: # (73) = var a (42) [const string "color" (-115)]
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[184] a.color = "blue"

    set property: var a (42) [const string "color" (-115)] = const string "blue" (-116)


[185] print "should be blue: " .. a.color

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be blue: " (-117)
        get property: # (73) = var a (42) [const string "color" (-115)]
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[187] a = {

    new object 4: # (68)

[188] _color = "white"

    init property: # (68) [const string "_color" (-110)] = const string "white" (-118)

[189] __get = function(name){

    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[190] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-115)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[191] return this._color

            get property: # (5) = param this (1) [const string "_color" (-110)]
          return: # (5), count 1
        end then
      end if ret values 0
    end function: # (70), index 18
    init property: # (68) [const string "__get" (-119)] = # (70)

[193] __set = function(name, v){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 v (param)
        4 _E
        5 _G
      end locals

[194] if(name == "color")

      begin if
        begin bool exp
          move: # (6) = param name (2)
          move: # (7) = const string "color" (-115)
          # (6) = # (6) [logic ==] # (7)
        end bool exp
        begin then

[195] this._color = v

          set property: param this (1) [const string "_color" (-110)] = param v (3)
        end then
      end if ret values 0
    end function: # (70), index 19
    init property: # (68) [const string "__set" (-120)] = # (70)

[197] __del = function(name){

    begin function
      begin locals 5, stack 9
        0 _F (param)
        1 this (param)
        2 name (param)
        3 _E
        4 _G
      end locals

[198] if(name == "color")

      begin if
        begin bool exp
          move: # (5) = param name (2)
          move: # (6) = const string "color" (-115)
          # (5) = # (5) [logic ==] # (6)
        end bool exp
        begin then

[199] delete this._color

          begin call method
            move: # (5) = var _G (4)
            move: # (6) = const string "__delete" (-122)
            move: # (7) = param this (1)
            move: # (8) = const string "_color" (-110)
          end call method: start 5, params 4, ret values 0
        end then
      end if ret values 0
    end function: # (70), index 20
    init property: # (68) [const string "__del" (-121)] = # (70)
    move: var a (42) = # (68)


[204] print "should be white: " .. a.color

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be white: " (-123)
        get property: # (73) = var a (42) [const string "color" (-115)]
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[205] print "should be null: " .. a.color2

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be null: " (-124)
        get property: # (73) = var a (42) [const string "color2" (-125)]
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[207] a.color = "green"

    set property: var a (42) [const string "color" (-115)] = const string "green" (-126)


[208] print "should be green: " .. a.color

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be green: " (-127)
        get property: # (73) = var a (42) [const string "color" (-115)]
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[210] delete a.color

    begin call method
      move: # (68) = var _G (3)
      move: # (69) = const string "__delete" (-122)
      move: # (70) = var a (42)
      move: # (71) = const string "color" (-115)
    end call method: start 68, params 4, ret values 0


[212] print "should be null: " .. a.color

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be null: " (-124)
        get property: # (73) = var a (42) [const string "color" (-115)]
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[213] print "Test multi dimensional properties"

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Test multi dimensional properties" (-128)
    end call method: start 68, params 3, ret values 0


[215] a = {

    new object 4: # (68)

[216] _matrix = {}

    new object 0: # (70)
    init property: # (68) [const string "_matrix" (-129)] = # (70)

[217] __getdim = function(x, y){

    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[218] return this._matrix[y*4 + x]

        get property: # (6) = param this (1) [const string "_matrix" (-129)]
        # (7) = param y (3) [operator *] const number 4 (-6)
        # (7) = # (7) [operator +] param x (2)
        get property: # (6) = # (6) [# (7)]
      return: # (6), count 1
    end function: # (70), index 21
    init property: # (68) [const string "__getdim" (-130)] = # (70)

[220] __setdim = function(value, x, y){

    begin function
      begin locals 7, stack 11
        0 _F (param)
        1 this (param)
        2 value (param)
        3 x (param)
        4 y (param)
        5 _E
        6 _G
      end locals

[221] this._matrix[y*4 + x] = value

        get property: # (8) = param this (1) [const string "_matrix" (-129)]
        # (9) = param y (4) [operator *] const number 4 (-6)
        # (9) = # (9) [operator +] param x (3)
        set property: # (8) [# (9)] = param value (2)
      return: param value (2), count 1
    end function: # (70), index 22
    init property: # (68) [const string "__setdim" (-131)] = # (70)

[223] __deldim = function(x, y){

    begin function
      begin locals 6, stack 11
        0 _F (param)
        1 this (param)
        2 x (param)
        3 y (param)
        4 _E
        5 _G
      end locals

[224] delete this._matrix[y*4 + x]

      begin call method
        move: # (6) = var _G (5)
        move: # (7) = const string "__delete" (-122)
        get property: # (8) = param this (1) [const string "_matrix" (-129)]
        # (9) = param y (3) [operator *] const number 4 (-6)
        # (9) = # (9) [operator +] param x (2)
      end call method: start 6, params 4, ret values 0
    end function: # (70), index 23
    init property: # (68) [const string "__deldim" (-132)] = # (70)
    move: var a (42) = # (68)


[228] a[1, 2] = 5		// a.__setdim(5, 1, 2)

    begin call method
      move: # (68) = const number 5 (-5)
      move: # (69) = var a (42)
      move: # (70) = const string "__setdim" (-131)
      move: # (71) = # (68)
      move: # (72) = const number 1 (-4)
      move: # (73) = const number 2 (-8)
    end call method: start 69, params 5, ret values 0


[230] print "should be 5: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be 5: " (-103)
        begin call method
          move: # (73) = var a (42)
          move: # (74) = const string "__getdim" (-130)
          move: # (75) = const number 1 (-4)
          move: # (76) = const number 2 (-8)
        end call method: start 73, params 4, ret values 1
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0


[232] delete a[1, 2]	// a.__deldim(1, 2)

    begin call method
      move: # (68) = var a (42)
      move: # (69) = const string "__deldim" (-132)
      move: # (70) = const number 1 (-4)
      move: # (71) = const number 2 (-8)
    end call method: start 68, params 4, ret values 0


[233] print "should be null: " .. a[1, 2]	// print(a.__getdim(1, 2))

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "concat" (-39)
        move: # (72) = const string "should be null: " (-124)
        begin call method
          move: # (73) = var a (42)
          move: # (74) = const string "__getdim" (-130)
          move: # (75) = const number 1 (-4)
          move: # (76) = const number 2 (-8)
        end call method: start 73, params 4, ret values 1
      end call method: start 70, params 4, ret values 1
    end call method: start 68, params 3, ret values 0
  end scope ret values 0


[237] print "Test function inline call"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test function inline call" (-133)
  end call method: start 68, params 3, ret values 0


[238] print "should be 7: " .. {|a b c| a + b * c }(1 2 3)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "should be 7: " (-134)
      begin call
        begin function
          begin locals 7, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 b (param)
            4 c (param)
            5 _E
            6 _G
          end locals
            # (8) = param b (3) [operator *] param c (4)
            # (7) = param a (2) [operator +] # (8)
          return: # (7), count 1
        end function: # (73), index 24
        move: # (74) = const null (-1)
        move: # (75) = const number 1 (-4)
        move: # (76) = const number 2 (-8)
        move: # (77) = const number 3 (-7)
      end call: start 73, params 5, ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[241] print "Test local vars scope"

  begin scope
    begin locals 1
      43 i
    end locals
    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Test local vars scope" (-135)
    end call method: start 68, params 3, ret values 0


[242] var i = 1;

    move: var i (43) = const number 1 (-4)


[244] var i = i

    begin scope
      begin locals 1
        44 i
      end locals
      move: var i (44) = var i (43)


[245] i++

      var i (44) = var i (44) [operator +] const number 1 (-4)


[246] print i

      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "print" (-36)
        move: # (70) = var i (44)
      end call method: start 68, params 3, ret values 0
    end scope ret values 0


[248] print i

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = var i (43)
    end call method: start 68, params 3, ret values 0
  end scope ret values 0


[251] print "Test debuglocals"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test debuglocals" (-136)
  end call method: start 68, params 3, ret values 0


[258] }(10)

  begin call

[252] function(a){

    begin function
      begin locals 7, stack 12
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
        5 c
      end locals

[253] var c = a * 2;

      var c (5) = param a (2) [operator *] const number 2 (-8)

[255] var c = a - 1

      begin scope
        begin locals 1
          6 c
        end locals
        var c (6) = param a (2) [operator -] const number 1 (-4)


[256] print debuglocals

        begin call method
          move: # (7) = var _E (3)
          move: # (8) = const string "print" (-36)
          new object 12: # (9)
          get upvalue: # (11) = var Person (34 1)
          init property: # (9) [const string "Person" (-137)] = # (11)
          get upvalue: # (11) = var IvanPerson (36 1)
          init property: # (9) [const string "IvanPerson" (-138)] = # (11)
          get upvalue: # (11) = var p (37 1)
          init property: # (9) [const string "p" (-139)] = # (11)
          get upvalue: # (11) = var vec3 (38 1)
          init property: # (9) [const string "vec3" (-140)] = # (11)
          get upvalue: # (11) = var v1 (39 1)
          init property: # (9) [const string "v1" (-141)] = # (11)
          get upvalue: # (11) = var v2 (40 1)
          init property: # (9) [const string "v2" (-84)] = # (11)
          get upvalue: # (11) = var v3 (41 1)
          init property: # (9) [const string "v3" (-142)] = # (11)
          get upvalue: # (11) = var core (46 1)
          init property: # (9) [const string "core" (-143)] = # (11)
          get upvalue: # (11) = var __planet (47 1)
          init property: # (9) [const string "__planet" (-144)] = # (11)
          get upvalue: # (11) = var testFunc (56 1)
          init property: # (9) [const string "testFunc" (-145)] = # (11)
          init property: # (9) [const string "a" (-146)] = param a (2)
          init property: # (9) [const string "c" (-147)] = var c (6)
        end call method: start 7, params 3, ret values 0
      end scope ret values 0
    end function: # (68), index 25

[258] }(10)

    move: # (69) = const null (-1)
    move: # (70) = const number 10 (-11)
  end call: start 68, params 3, ret values 0


[260] print "Script environment"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Script environment" (-148)
  end call method: start 68, params 3, ret values 0


[261] print _E

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = var _E (2)
  end call method: start 68, params 3, ret values 0


[263] print "Math functions"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Math functions" (-149)
  end call method: start 68, params 3, ret values 0


[264] var a = [math.random() math.random() math.random() math.random() math.random() math.random()]

  new array 6: # (68)
  begin call method
    move: # (69) = # (68)
    move: # (70) = const string "push" (-49)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "random" (-151)
    end call method: start 71, params 2, ret values 1
  end call method: start 69, params 3, ret values 0
  begin call method
    move: # (69) = # (68)
    move: # (70) = const string "push" (-49)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "random" (-151)
    end call method: start 71, params 2, ret values 1
  end call method: start 69, params 3, ret values 0
  begin call method
    move: # (69) = # (68)
    move: # (70) = const string "push" (-49)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "random" (-151)
    end call method: start 71, params 2, ret values 1
  end call method: start 69, params 3, ret values 0
  begin call method
    move: # (69) = # (68)
    move: # (70) = const string "push" (-49)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "random" (-151)
    end call method: start 71, params 2, ret values 1
  end call method: start 69, params 3, ret values 0
  begin call method
    move: # (69) = # (68)
    move: # (70) = const string "push" (-49)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "random" (-151)
    end call method: start 71, params 2, ret values 1
  end call method: start 69, params 3, ret values 0
  begin call method
    move: # (69) = # (68)
    move: # (70) = const string "push" (-49)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "random" (-151)
    end call method: start 71, params 2, ret values 1
  end call method: start 69, params 3, ret values 0
  move: var a (45) = # (68)


[265] print("random" a)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "random" (-151)
    move: # (71) = var a (45)
  end call method: start 68, params 4, ret values 0


[268] delete Array.__iter // delete our iterator, use default one

  begin call method
    move: # (68) = var _G (3)
    move: # (69) = const string "__delete" (-122)
    get property: # (70) = var _E (2) [const string "Array" (-75)]
    move: # (71) = const string "__iter" (-68)
  end call method: start 68, params 4, ret values 0


[270] function Object.map(func){

  begin function
    begin locals 10, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
      5 r
    end locals

[271] var r = {}

    new object 0: # (10)
    move: var r (5) = # (10)


[272] for(var i, v in a) r[i] = func(v)

    begin scope
      begin locals 4
        6 i
        7 v
        8 #func
        9 #valid
      end locals




      begin call method
        get upvalue: # (10) = var a (45 1)
        move: # (11) = const string "__iter" (-68)
      end call method: start 10, params 2, ret values 1
      move: var #func (8) = # (10)
      begin loop
        begin call
          move: # (10) = var #func (8)
          move: # (11) = const null (-1)
        end call: start 10, params 2, ret values 3
        move: var v (7) = # (12)
        move: var i (6) = # (11)
        move: var #valid (9) = # (10)

        begin if
          begin bool exp
            move: # (10) = var #valid (9)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0

        begin call
          move: # (10) = param func (2)
          move: # (11) = const null (-1)
          move: # (12) = var v (7)
        end call: start 10, params 3, ret values 1
        set property: var r (5) [var i (6)] = # (10)
      end loop ret values 0
    end scope ret values 0


[273] return r

    return: var r (5), count 1
  end function: # (68), index 26

[270] function Object.map(func){

  get property: # (69) = var _E (2) [const string "Object" (-152)]
  set property: # (69) [const string "map" (-153)] = # (68)


[276] function Array.map(func){

  begin function
    begin locals 10, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
      5 r
    end locals

[277] var r = []

    new array 0: # (10)
    move: var r (5) = # (10)


[278] for(var i, v in a) r[i] = func(v)

    begin scope
      begin locals 4
        6 i
        7 v
        8 #func
        9 #valid
      end locals




      begin call method
        get upvalue: # (10) = var a (45 1)
        move: # (11) = const string "__iter" (-68)
      end call method: start 10, params 2, ret values 1
      move: var #func (8) = # (10)
      begin loop
        begin call
          move: # (10) = var #func (8)
          move: # (11) = const null (-1)
        end call: start 10, params 2, ret values 3
        move: var v (7) = # (12)
        move: var i (6) = # (11)
        move: var #valid (9) = # (10)

        begin if
          begin bool exp
            move: # (10) = var #valid (9)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0

        begin call
          move: # (10) = param func (2)
          move: # (11) = const null (-1)
          move: # (12) = var v (7)
        end call: start 10, params 3, ret values 1
        set property: var r (5) [var i (6)] = # (10)
      end loop ret values 0
    end scope ret values 0


[279] return r

    return: var r (5), count 1
  end function: # (68), index 27

[276] function Array.map(func){

  get property: # (69) = var _E (2) [const string "Array" (-75)]
  set property: # (69) [const string "map" (-153)] = # (68)


[282] a = a.map {|a| a*100}

  begin call method
    move: # (68) = var a (45)
    move: # (69) = const string "map" (-153)
    begin function
      begin locals 5, stack 7
        0 _F (param)
        1 this (param)
        2 a (param)
        3 _E
        4 _G
      end locals
        # (5) = param a (2) [operator *] const number 100 (-20)
      return: # (5), count 1
    end function: # (70), index 28
  end call method: start 68, params 3, ret values 1
  move: var a (45) = # (68)


[283] print("mult 100" a)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "mult 100" (-154)
    move: # (71) = var a (45)
  end call method: start 68, params 4, ret values 0


[284] print("math.ceil" a.map(math.ceil))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.ceil" (-155)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      get property: # (73) = var _E (2) [const string "math" (-150)]
      get property: # (73) = # (73) [const string "ceil" (-156)]
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[285] print("math.floor" a.map(math.floor))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.floor" (-157)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      get property: # (73) = var _E (2) [const string "math" (-150)]
      get property: # (73) = # (73) [const string "floor" (-158)]
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[286] print("math.round(-1)" a.map{|a| math.round(a, -1)})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.round(-1)" (-159)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-150)]
            move: # (6) = const string "round" (-160)
            move: # (7) = param a (2)
            # (8) = [neg] const number 1 (-4)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (73), index 29
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[287] print("math.round(2)" a.map{|a| math.round(a, 2)})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.round(2)" (-161)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            get property: # (5) = var _E (3) [const string "math" (-150)]
            move: # (6) = const string "round" (-160)
            move: # (7) = param a (2)
            move: # (8) = const number 2 (-8)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (73), index 30
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[288] print("math.sin" a.map(math.sin))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.sin" (-162)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      get property: # (73) = var _E (2) [const string "math" (-150)]
      get property: # (73) = # (73) [const string "sin" (-163)]
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[289] print("math.cos" a.map(math.cos))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.cos" (-164)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      get property: # (73) = var _E (2) [const string "math" (-150)]
      get property: # (73) = # (73) [const string "cos" (-165)]
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[290] print("math.tan" a.map(math.tan))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "math.tan" (-166)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      get property: # (73) = var _E (2) [const string "math" (-150)]
      get property: # (73) = # (73) [const string "tan" (-167)]
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[292] _E = math

  get property: var _E (2) = var _E (2) [const string "math" (-150)]


[293] print "Extend local environment to be able to use math module without namespace"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Extend local environment to be able to use math module without namespace" (-168)
  end call method: start 68, params 3, ret values 0


[294] print("round(3)" a.map{|a| round(a, 3)})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "round(3)" (-169)
    begin call method
      move: # (71) = var a (45)
      move: # (72) = const string "map" (-153)
      begin function
        begin locals 5, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 _E
          4 _G
        end locals
          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "round" (-160)
            move: # (7) = param a (2)
            move: # (8) = const number 3 (-7)
          end call method: start 5, params 4, ret values 1
        return: # (5), count 1
      end function: # (73), index 31
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[295] print("PI" PI)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "PI" (-170)
    get property: # (71) = var _E (2) [const string "PI" (-170)]
  end call method: start 68, params 4, ret values 0


[297] var core = require("core")

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "require" (-171)
    move: # (70) = const string "core" (-143)
  end call method: start 68, params 3, ret values 1
  move: var core (46) = # (68)


[298] print("core.eval(math.round(13.5))" core.eval("math.round(13.5)"))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "core.eval(math.round(13.5))" (-172)
    begin call method
      move: # (71) = var core (46)
      move: # (72) = const string "eval" (-173)
      move: # (73) = const string "math.round(13.5)" (-174)
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[299] print("eval(math.round(13.5))" eval("math.round(13.5)"))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "eval(math.round(13.5))" (-175)
    begin call method
      move: # (71) = var _E (2)
      move: # (72) = const string "eval" (-173)
      move: # (73) = const string "math.round(13.5)" (-174)
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[300] print("==============")

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "==============" (-176)
  end call method: start 68, params 3, ret values 0


[301] print("Next: math namespace is not used\nbut eval executes code in global environment by default\nso eval(round(13.5))" eval("round(13.5)"))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Next: math namespace is not used
but eval execut...obal environment by default
so eval(round(13.5))" (-177)
    begin call method
      move: # (71) = var _E (2)
      move: # (72) = const string "eval" (-173)
      move: # (73) = const string "round(13.5)" (-178)
    end call method: start 71, params 3, ret values 1
  end call method: start 68, params 4, ret values 0


[302] print("run eval in space of the current environment (round(13.5))" eval("round(13.5)", _E))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "run eval in space of the current environment (round(13.5))" (-179)
    begin call method
      move: # (71) = var _E (2)
      move: # (72) = const string "eval" (-173)
      move: # (73) = const string "round(13.5)" (-178)
      move: # (74) = var _E (2)
    end call method: start 71, params 4, ret values 1
  end call method: start 68, params 4, ret values 0


[304] var __planet = "Mars"

  move: var __planet (47) = const string "Mars" (-180)


[305] function get planet(){ return __planet }

  begin function
    begin locals 4, stack 5
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
    end locals
      get upvalue: # (4) = var __planet (47 1)
    return: # (4), count 1
  end function: # (68), index 32
  set property: var _E (2) [const string "__get@planet" (-181)] = # (68)


[306] function set planet(a){ __planet = a }

  begin function
    begin locals 5, stack 6
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
    end locals
      move: # (5) = param a (2)
      set upvalue: var __planet (47 1) = # (5)
    return: # (5), count 1
  end function: # (68), index 33
  set property: var _E (2) [const string "__set@planet" (-182)] = # (68)


[308] print "Planet should be Mars: "..planet

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "Planet should be Mars: " (-183)
      get property: # (73) = var _E (2) [const string "planet" (-184)]
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[309] planet = "Mercury"

  move: # (68) = const string "Mercury" (-185)
  set property: var _E (2) [const string "planet" (-184)] = # (68)


[310] print "Planet should be Mercury: "..planet

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "Planet should be Mercury: " (-186)
      get property: # (73) = var _E (2) [const string "planet" (-184)]
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[312] function compareValues(a, b){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
      6 x
      7 y
    end locals

[313] var x, y = numberOf(a), numberOf(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "numberOf" (-188)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "numberOf" (-188)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[314] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[315] x, y = stringOf(a), stringOf(b)

    begin call method
      move: # (8) = var _E (4)
      move: # (9) = const string "stringOf" (-189)
      move: # (10) = param a (2)
    end call method: start 8, params 3, ret values 1
    begin call method
      move: # (9) = var _E (4)
      move: # (10) = const string "stringOf" (-189)
      move: # (11) = param b (3)
    end call method: start 9, params 3, ret values 1
    move: var y (7) = # (9)
    move: var x (6) = # (8)


[316] x && y && return x <=> y

    begin pop
      move: # (8) = var x (6)
      logic &&: # (8)
        move: # (8) = var y (7)
      logic &&: # (8)
          # (8) = var x (6) [operator <=>] var y (7)
        return: # (8), count 1
    end pop ret values 0


[317] return a <=> b

      # (8) = param a (2) [operator <=>] param b (3)
    return: # (8), count 1
  end function: # (68), index 34
  set property: var _E (2) [const string "compareValues" (-187)] = # (68)


[320] function Object.__getdim(i, count){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 i (param)
      3 count (param)
      4 _E
      5 _G
    end locals

[321] return this.sub(i, count)

      begin call method
        move: # (6) = param this (1)
        move: # (7) = const string "sub" (-190)
        move: # (8) = param i (2)
        move: # (9) = param count (3)
      end call method: start 6, params 4, ret values 1
    return: # (6), count 1
  end function: # (68), index 35

[320] function Object.__getdim(i, count){

  get property: # (69) = var _E (2) [const string "Object" (-152)]
  set property: # (69) [const string "__getdim" (-130)] = # (68)


[324] function String.__get(i){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 i (param)
      3 _E
      4 _G
    end locals

[325] return this.sub(i, 1)

      begin call method
        move: # (5) = param this (1)
        move: # (6) = const string "sub" (-190)
        move: # (7) = param i (2)
        move: # (8) = const number 1 (-4)
      end call method: start 5, params 4, ret values 1
    return: # (5), count 1
  end function: # (68), index 36

[324] function String.__get(i){

  get property: # (69) = var _E (2) [const string "String" (-191)]
  set property: # (69) [const string "__get" (-119)] = # (68)


[328] print "Sorted array"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Sorted array" (-192)
  end call method: start 68, params 3, ret values 0


[329] print([9 4 0 276 15 39 3].sort())

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new array 7: # (70)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 9 (-19)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 0 (-15)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 276 (-21)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 39 (-23)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
    end call method: start 70, params 2, ret values 1
  end call method: start 68, params 3, ret values 0


[331] function Object.do(func){

  begin function
    begin locals 5, stack 8
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[332] func.call(this)

    begin call method
      move: # (5) = param func (2)
      move: # (6) = const string "call" (-99)
      move: # (7) = param this (1)
    end call method: start 5, params 3, ret values 0


[333] return this

    return: param this (1), count 1
  end function: # (68), index 37

[331] function Object.do(func){

  get property: # (69) = var _E (2) [const string "Object" (-152)]
  set property: # (69) [const string "do" (-194)] = # (68)


[336] print "User sorted array by keys"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "User sorted array by keys" (-195)
  end call method: start 68, params 3, ret values 0


[337] print([0 1 2 3 4 5 6 7 8 9].do {||

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new array 10: # (70)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 0 (-15)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 1 (-4)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 2 (-8)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 5 (-5)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 6 (-24)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 7 (-10)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 8 (-25)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 9 (-19)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "do" (-194)
      begin function
        begin locals 10, stack 13
          0 _F (param)
          1 this (param)
          2 _E
          3 _G
          4 keys
          5 values
        end locals

[338] var keys = this.keys.sort{|a b| (a % 3) <=> (b % 3)}

        begin call method
          get property: # (10) = param this (1) [const string "keys" (-196)]
          move: # (11) = const string "sort" (-193)
          begin function
            begin locals 6, stack 9
              0 _F (param)
              1 this (param)
              2 a (param)
              3 b (param)
              4 _E
              5 _G
            end locals
              # (6) = param a (2) [operator %] const number 3 (-7)
              # (7) = param b (3) [operator %] const number 3 (-7)
              # (6) = # (6) [operator <=>] # (7)
            return: # (6), count 1
          end function: # (12), index 39
        end call method: start 10, params 3, ret values 1
        move: var keys (4) = # (10)

[339] var values = this.clone()

        begin call method
          move: # (10) = param this (1)
          move: # (11) = const string "clone" (-197)
        end call method: start 10, params 2, ret values 1
        move: var values (5) = # (10)

[340] for(var k, v in keys){

        begin scope
          begin locals 4
            6 k
            7 v
            8 #func
            9 #valid
          end locals




          begin call method
            move: # (10) = var keys (4)
            move: # (11) = const string "__iter" (-68)
          end call method: start 10, params 2, ret values 1
          move: var #func (8) = # (10)
          begin loop
            begin call
              move: # (10) = var #func (8)
              move: # (11) = const null (-1)
            end call: start 10, params 2, ret values 3
            move: var v (7) = # (12)
            move: var k (6) = # (11)
            move: var #valid (9) = # (10)

            begin if
              begin bool exp
                move: # (10) = var #valid (9)
                # (10) = [logic not] # (10)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[341] this[v] = values[v]

            begin scope
              get property: # (10) = var values (5) [var v (7)]
              set property: param this (1) [var v (7)] = # (10)
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end function: # (72), index 38
    end call method: start 70, params 3, ret values 1
  end call method: start 68, params 3, ret values 0


[345] print "Sorted array (reverse)"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Sorted array (reverse)" (-198)
  end call method: start 68, params 3, ret values 0


[346] print([9 4 0 276 15 39 3].sort{|a b| b <=> a})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new array 7: # (70)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 9 (-19)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 0 (-15)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 276 (-21)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 39 (-23)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (72), index 40
    end call method: start 70, params 3, ret values 1
  end call method: start 68, params 3, ret values 0


[348] print "User sorted array"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "User sorted array" (-199)
  end call method: start 68, params 3, ret values 0


[349] print([9 4 0 276 15 39 3].sort{|a b| (a % 10) <=> (b % 10)})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new array 7: # (70)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 9 (-19)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 0 (-15)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 276 (-21)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 39 (-23)
      end call method: start 71, params 3, ret values 0
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
      begin function
        begin locals 6, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param a (2) [operator %] const number 10 (-11)
          # (7) = param b (3) [operator %] const number 10 (-11)
          # (6) = # (6) [operator <=>] # (7)
        return: # (6), count 1
      end function: # (72), index 41
    end call method: start 70, params 3, ret values 1
  end call method: start 68, params 3, ret values 0


[351] print "Sorted object by values"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Sorted object by values" (-200)
  end call method: start 68, params 3, ret values 0


[352] print({b=9 4 d=0 c=276 15 a=39 3}.sort())

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new object 7: # (70)
      init property: # (70) [const string "b" (-201)] = const number 9 (-19)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "d" (-202)] = const number 0 (-15)
      init property: # (70) [const string "c" (-147)] = const number 276 (-21)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "a" (-146)] = const number 39 (-23)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
    end call method: start 70, params 2, ret values 1
  end call method: start 68, params 3, ret values 0


[354] print "Sorted object by values (reverse)"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Sorted object by values (reverse)" (-203)
  end call method: start 68, params 3, ret values 0


[355] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b| b <=> a})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new object 7: # (70)
      init property: # (70) [const string "b" (-201)] = const number 9 (-19)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "d" (-202)] = const number 0 (-15)
      init property: # (70) [const string "c" (-147)] = const number 276 (-21)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "a" (-146)] = const number 39 (-23)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (72), index 42
    end call method: start 70, params 3, ret values 1
  end call method: start 68, params 3, ret values 0


[357] print "Sorted object by keys"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Sorted object by keys" (-204)
  end call method: start 68, params 3, ret values 0


[358] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(ka kb) })

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new object 7: # (70)
      init property: # (70) [const string "b" (-201)] = const number 9 (-19)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "d" (-202)] = const number 0 (-15)
      init property: # (70) [const string "c" (-147)] = const number 276 (-21)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "a" (-146)] = const number 39 (-23)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-187)
            move: # (10) = param ka (4)
            move: # (11) = param kb (5)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (72), index 43
    end call method: start 70, params 3, ret values 1
  end call method: start 68, params 3, ret values 0


[360] print "Sorted object by keys (reverse)"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Sorted object by keys (reverse)" (-205)
  end call method: start 68, params 3, ret values 0


[361] print({b=9 4 d=0 c=276 15 a=39 3}.sort{|a b ka kb| compareValues(kb ka) })

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      new object 7: # (70)
      init property: # (70) [const string "b" (-201)] = const number 9 (-19)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 4 (-6)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "d" (-202)] = const number 0 (-15)
      init property: # (70) [const string "c" (-147)] = const number 276 (-21)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 15 (-22)
      end call method: start 71, params 3, ret values 0
      init property: # (70) [const string "a" (-146)] = const number 39 (-23)
      begin call method
        move: # (71) = # (70)
        move: # (72) = const string "push" (-49)
        move: # (73) = const number 3 (-7)
      end call method: start 71, params 3, ret values 0
      move: # (71) = const string "sort" (-193)
      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 ka (param)
          5 kb (param)
          6 _E
          7 _G
        end locals
          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "compareValues" (-187)
            move: # (10) = param kb (5)
            move: # (11) = param ka (4)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (72), index 44
    end call method: start 70, params 3, ret values 1
  end call method: start 68, params 3, ret values 0


[363] function printBackTrace(skipNumFuncs){

  begin function
    begin locals 9, stack 22
      0 _F (param)
      1 this (param)
      2 skipNumFuncs (param)
      3 _E
      4 _G
    end locals

[364] for(var i, t in debugBackTrace(skipNumFuncs + 1)){ // skip printBackTrace

    begin scope
      begin locals 4
        5 i
        6 t
        7 #func
        8 #valid
      end locals




      begin call method
        begin call method
          move: # (9) = var _E (3)
          move: # (10) = const string "debugBackTrace" (-207)
          # (11) = param skipNumFuncs (2) [operator +] const number 1 (-4)
        end call method: start 9, params 3, ret values 1
        move: # (10) = const string "__iter" (-68)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var t (6) = # (11)
        move: var i (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[365] printf("#%d %s(%d): %s, args: %s\n", i, t.file, t.line, t.object ? "{obj-"..t.object.osValueId.."}."..t.name : t.name, t.arguments);

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-208)
            move: # (11) = const string "#%d %s(%d): %s, args: %s
" (-209)
            move: # (12) = var i (5)
            get property: # (13) = var t (6) [const string "file" (-210)]
            get property: # (14) = var t (6) [const string "line" (-211)]
            begin question
              begin bool exp
                get property: # (15) = var t (6) [const string "object" (-212)]
              end bool exp
              begin then value
                begin call method
                  move: # (15) = var _G (4)
                  move: # (16) = const string "concat" (-39)
                  move: # (17) = const string "{obj-" (-213)
                  get property: # (18) = var t (6) [const string "object" (-212)]
                  get property: # (18) = # (18) [const string "osValueId" (-214)]
                  move: # (19) = const string "}." (-215)
                  get property: # (20) = var t (6) [const string "name" (-216)]
                end call method: start 15, params 6, ret values 1
              end then value
              begin else value
                get property: # (15) = var t (6) [const string "name" (-216)]
              end else value
            end question ret values 1
            get property: # (16) = var t (6) [const string "arguments" (-217)]
          end call method: start 9, params 8, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (68), index 45
  set property: var _E (2) [const string "printBackTrace" (-206)] = # (68)


[370] print "simulate exception..."

  begin try catch
    begin scope
      begin locals 3
        48 a
        49 b
        50 c
      end locals
      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "print" (-36)
        move: # (70) = const string "simulate exception..." (-218)
      end call method: start 68, params 3, ret values 0


[371] var a, b = 2, 0

      move: # (68) = const number 2 (-8)
      move: var b (49) = const number 0 (-15)
      move: var a (48) = # (68)


[372] var c = a / b

      var c (50) = var a (48) [operator /] var b (49)
    end scope ret values 0
  catch

[373] }catch(e){

    begin scope
      begin locals 1
        51 e
      end locals

[374] print "exception: "..e.message

      begin scope
        begin call method
          move: # (68) = var _E (2)
          move: # (69) = const string "print" (-36)
          begin call method
            move: # (70) = var _G (3)
            move: # (71) = const string "concat" (-39)
            move: # (72) = const string "exception: " (-219)
            get property: # (73) = var e (51) [const string "message" (-220)]
          end call method: start 70, params 4, ret values 1
        end call method: start 68, params 3, ret values 0


[375] for(var i, t in e.trace){

        begin scope
          begin locals 4
            52 i
            53 t
            54 #func
            55 #valid
          end locals




          begin call method
            get property: # (68) = var e (51) [const string "trace" (-221)]
            move: # (69) = const string "__iter" (-68)
          end call method: start 68, params 2, ret values 1
          move: var #func (54) = # (68)
          begin loop
            begin call
              move: # (68) = var #func (54)
              move: # (69) = const null (-1)
            end call: start 68, params 2, ret values 3
            move: var t (53) = # (70)
            move: var i (52) = # (69)
            move: var #valid (55) = # (68)

            begin if
              begin bool exp
                move: # (68) = var #valid (55)
                # (68) = [logic not] # (68)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[376] printf("#%d %s(%d): %s, args: %s\n", i, t.file, t.line, t.object ? "{obj-"..t.object.osValueId.."}."..t.name : t.name, t.arguments);

            begin scope
              begin call method
                move: # (68) = var _E (2)
                move: # (69) = const string "printf" (-208)
                move: # (70) = const string "#%d %s(%d): %s, args: %s
" (-209)
                move: # (71) = var i (52)
                get property: # (72) = var t (53) [const string "file" (-210)]
                get property: # (73) = var t (53) [const string "line" (-211)]
                begin question
                  begin bool exp
                    get property: # (74) = var t (53) [const string "object" (-212)]
                  end bool exp
                  begin then value
                    begin call method
                      move: # (74) = var _G (3)
                      move: # (75) = const string "concat" (-39)
                      move: # (76) = const string "{obj-" (-213)
                      get property: # (77) = var t (53) [const string "object" (-212)]
                      get property: # (77) = # (77) [const string "osValueId" (-214)]
                      move: # (78) = const string "}." (-215)
                      get property: # (79) = var t (53) [const string "name" (-216)]
                    end call method: start 74, params 6, ret values 1
                  end then value
                  begin else value
                    get property: # (74) = var t (53) [const string "name" (-216)]
                  end else value
                end question ret values 1
                get property: # (75) = var t (53) [const string "arguments" (-217)]
              end call method: start 68, params 8, ret values 0
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end scope ret values 0
    end scope ret values 0
  end try catch


[381] var function testFunc(arg1, arg2){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 arg1 (param)
      3 arg2 (param)
      4 _E
      5 _G
      6 testFunc2
      7 i
    end locals

[382] var testFunc2 = {|arg1 arg2 arg3|

    begin function
      begin locals 9, stack 13
        0 _F (param)
        1 this (param)
        2 arg1 (param)
        3 arg2 (param)
        4 arg3 (param)
        5 _E
        6 _G
        7 testFunc3
        8 i
      end locals

[383] var testFunc3 = {|arg1|

      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 arg1 (param)
          3 _E
          4 _G
          5 i
        end locals

[384] printBackTrace()

        begin call method
          move: # (6) = var _E (3)
          move: # (7) = const string "printBackTrace" (-206)
        end call method: start 6, params 2, ret values 0

[385] var i = 0 // add some code at the end of function to prevent tail call

        move: var i (5) = const number 0 (-15)
      end function: var testFunc3 (7), index 48

[387] testFunc3(1, 2)

      begin call
        move: # (9) = var testFunc3 (7)
        move: # (10) = const null (-1)
        move: # (11) = const number 1 (-4)
        move: # (12) = const number 2 (-8)
      end call: start 9, params 4, ret values 0

[388] var i = 0 // add some code at the end of function to prevent tail call

      move: var i (8) = const number 0 (-15)
    end function: var testFunc2 (6), index 47

[390] testFunc2(1, 2)

    begin call
      move: # (8) = var testFunc2 (6)
      move: # (9) = const null (-1)
      move: # (10) = const number 1 (-4)
      move: # (11) = const number 2 (-8)
    end call: start 8, params 4, ret values 0

[391] var i = 0 // add some code at the end of function to prevent tail call

    move: var i (7) = const number 0 (-15)
  end function: var testFunc (56), index 46


[393] print "Test back trace"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test back trace" (-222)
  end call method: start 68, params 3, ret values 0


[394] testFunc(1, 2)

  begin call
    move: # (68) = var testFunc (56)
    move: # (69) = const null (-1)
    move: # (70) = const number 1 (-4)
    move: # (71) = const number 2 (-8)
  end call: start 68, params 4, ret values 0


[396] print "Test 5 < 10 ? 7 : 3 --> "..(5 < 10 ? 7 : 3)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "Test 5 < 10 ? 7 : 3 --> " (-223)
      begin question
        begin bool exp
          move: # (73) = const number 5 (-5)
          move: # (74) = const number 10 (-11)
          # (73) = # (73) [logic <] # (74)
        end bool exp
        begin then value
          move: # (73) = const number 7 (-10)
        end then value
        begin else value
          move: # (73) = const number 3 (-7)
        end else value
      end question ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[397] print "Test in operator (should be true) "..("name" in {x = 0 y = 0 name = 0 index = 0})

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "Test in operator (should be true) " (-224)
      begin call method
        move: # (73) = var _G (3)
        move: # (74) = const string "__in" (-225)
        move: # (75) = const string "name" (-216)
        new object 4: # (76)
        init property: # (76) [const string "x" (-47)] = const number 0 (-15)
        init property: # (76) [const string "y" (-48)] = const number 0 (-15)
        init property: # (76) [const string "name" (-216)] = const number 0 (-15)
        init property: # (76) [const string "index" (-226)] = const number 0 (-15)
      end call method: start 73, params 4, ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[399] print "Test _F and recursion"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test _F and recursion" (-227)
  end call method: start 68, params 3, ret values 0


[400] print "factorial(20) = " .. {|a| a <= 1 ? 1 : a*_F(a-1)}(20)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    begin call method
      move: # (70) = var _G (3)
      move: # (71) = const string "concat" (-39)
      move: # (72) = const string "factorial(20) = " (-228)
      begin call
        begin function
          begin locals 5, stack 10
            0 _F (param)
            1 this (param)
            2 a (param)
            3 _E
            4 _G
          end locals
            begin question
              begin bool exp
                move: # (5) = param a (2)
                move: # (6) = const number 1 (-4)
                # (5) = # (5) [logic <=] # (6)
              end bool exp
              begin then value
                move: # (5) = const number 1 (-4)
              end then value
              begin else value
                begin call
                  move: # (6) = param _F (0)
                  move: # (7) = const null (-1)
                  # (8) = param a (2) [operator -] const number 1 (-4)
                end call: start 6, params 3, ret values 1
                # (5) = param a (2) [operator *] # (6)
              end else value
            end question ret values 1
          return: # (5), count 1
        end function: # (73), index 49
        move: # (74) = const null (-1)
        move: # (75) = const number 20 (-12)
      end call: start 73, params 3, ret values 1
    end call method: start 70, params 4, ret values 1
  end call method: start 68, params 3, ret values 0


[402] function Object.each(func){

  begin function
    begin locals 9, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[403] for(var k, v in this){

    begin scope
      begin locals 4
        5 k
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = param this (1)
        move: # (10) = const string "__iter" (-68)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var k (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[404] func(k, v)

        begin scope
          begin call
            move: # (9) = param func (2)
            move: # (10) = const null (-1)
            move: # (11) = var k (5)
            move: # (12) = var v (6)
          end call: start 9, params 4, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (68), index 50

[402] function Object.each(func){

  get property: # (69) = var _E (2) [const string "Object" (-152)]
  set property: # (69) [const string "each" (-229)] = # (68)


[408] [10 20 30 40].each {|i a|

  begin call method
    new array 4: # (68)
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const number 10 (-11)
    end call method: start 69, params 3, ret values 0
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const number 20 (-12)
    end call method: start 69, params 3, ret values 0
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const number 30 (-13)
    end call method: start 69, params 3, ret values 0
    begin call method
      move: # (69) = # (68)
      move: # (70) = const string "push" (-49)
      move: # (71) = const number 40 (-14)
    end call method: start 69, params 3, ret values 0
    move: # (69) = const string "each" (-229)
    begin function
      begin locals 6, stack 9
        0 _F (param)
        1 this (param)
        2 i (param)
        3 a (param)
        4 _E
        5 _G
      end locals

[409] print a

        begin call method
          move: # (6) = var _E (4)
          move: # (7) = const string "print" (-36)
          move: # (8) = param a (3)
        end call method: start 6, params 3, ret values 1
      return: # (6), count 1
    end function: # (70), index 51
  end call method: start 68, params 3, ret values 0


[429] printf("def: %v, decimal: %d, string: %s, def:%v\n", "John", 123.45678, 123.45678, 123.45678)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "printf" (-208)
    move: # (70) = const string "def: %v, decimal: %d, string: %s, def:%v
" (-230)
    move: # (71) = const string "John" (-231)
    move: # (72) = const number 123.457 (-26)
    move: # (73) = const number 123.457 (-26)
    move: # (74) = const number 123.457 (-26)
  end call method: start 68, params 7, ret values 0


[430] printf("number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f\n", math.round(123.45678, 2), math.round(123.45678, 2), 123.45678, 123.45678)

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "printf" (-208)
    move: # (70) = const string "number: %n, float: %f, float(%%.2f): %.2f, float(%%.-1f): %.-1f
" (-232)
    begin call method
      get property: # (71) = var _E (2) [const string "math" (-150)]
      move: # (72) = const string "round" (-160)
      move: # (73) = const number 123.457 (-26)
      move: # (74) = const number 2 (-8)
    end call method: start 71, params 4, ret values 1
    begin call method
      get property: # (72) = var _E (2) [const string "math" (-150)]
      move: # (73) = const string "round" (-160)
      move: # (74) = const number 123.457 (-26)
      move: # (75) = const number 2 (-8)
    end call method: start 72, params 4, ret values 1
    move: # (73) = const number 123.457 (-26)
    move: # (74) = const number 123.457 (-26)
  end call method: start 68, params 7, ret values 0


[431] printf("%s\n", sprintf("number: %n, float(%%.-2f): %.-2f", 12876.54321, 12876.54321))

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "printf" (-208)
    move: # (70) = const string "%s
" (-233)
    begin call method
      move: # (71) = var _E (2)
      move: # (72) = const string "sprintf" (-234)
      move: # (73) = const string "number: %n, float(%%.-2f): %.-2f" (-235)
      move: # (74) = const number 12876.5 (-27)
      move: # (75) = const number 12876.5 (-27)
    end call method: start 71, params 5, ret values 1
  end call method: start 68, params 4, ret values 0


[434] print "Buffer usage"

  begin scope
    begin locals 1
      57 buf
    end locals
    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "Buffer usage" (-236)
    end call method: start 68, params 3, ret values 0


[435] var buf = Buffer(123, "abc", "def")

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "Buffer" (-237)
      move: # (70) = const number 123 (-28)
      move: # (71) = const string "abc" (-238)
      move: # (72) = const string "def" (-239)
    end call method: start 68, params 5, ret values 1
    move: var buf (57) = # (68)


[436] buf.append(4.5, "-append")

    begin call method
      move: # (68) = var buf (57)
      move: # (69) = const string "append" (-240)
      move: # (70) = const number 4.5 (-29)
      move: # (71) = const string "-append" (-241)
    end call method: start 68, params 4, ret values 0


[437] buf.printf("-%v\n", 123.4567)

    begin call method
      move: # (68) = var buf (57)
      move: # (69) = const string "printf" (-208)
      move: # (70) = const string "-%v
" (-242)
      move: # (71) = const number 123.457 (-30)
    end call method: start 68, params 4, ret values 0


[438] str = toString(buf)

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "toString" (-244)
      move: # (70) = var buf (57)
    end call method: start 68, params 3, ret values 1
    set property: var _E (2) [const string "str" (-243)] = # (68)


[439] print str

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      get property: # (70) = var _E (2) [const string "str" (-243)]
    end call method: start 68, params 3, ret values 0
  end scope ret values 0


[443] print "File usage"

  begin scope
    begin locals 1
      58 f
    end locals
    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      move: # (70) = const string "File usage" (-245)
    end call method: start 68, params 3, ret values 0


[444] var f = File(__FILE__, "rb")

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "File" (-246)
      begin call method
        move: # (70) = var _G (3)
        move: # (71) = const string "__getfilename" (-33)
      end call method: start 70, params 2, ret values 1
      move: # (71) = const string "rb" (-247)
    end call method: start 68, params 4, ret values 1
    move: var f (58) = # (68)


[445] str = f.read(100)

    begin call method
      move: # (68) = var f (58)
      move: # (69) = const string "read" (-248)
      move: # (70) = const number 100 (-20)
    end call method: start 68, params 3, ret values 1
    set property: var _E (2) [const string "str" (-243)] = # (68)


[447] print str

    begin call method
      move: # (68) = var _E (2)
      move: # (69) = const string "print" (-36)
      get property: # (70) = var _E (2) [const string "str" (-243)]
    end call method: start 68, params 3, ret values 0
  end scope ret values 0


[450] function Number.times(func){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[451] for(var i = 0; i < this; i++){

    begin scope
      begin locals 1
        5 i
      end locals
      move: var i (5) = const number 0 (-15)

      begin loop
        begin if
          begin bool exp
            move: # (6) = var i (5)
            move: # (7) = param this (1)
            # (6) = # (6) [logic <] # (7)
            # (6) = [logic not] # (6)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[452] func(i)

        begin scope
          begin call
            move: # (6) = param func (2)
            move: # (7) = const null (-1)
            move: # (8) = var i (5)
          end call: start 6, params 3, ret values 0
        end scope ret values 0


[451] for(var i = 0; i < this; i++){

        var i (5) = var i (5) [operator +] const number 1 (-4)
      end loop ret values 0
    end scope ret values 0
  end function: # (68), index 52

[450] function Number.times(func){

  get property: # (69) = var _E (2) [const string "Number" (-249)]
  set property: # (69) [const string "times" (-250)] = # (68)


[455] print "Test 10.times"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test 10.times" (-251)
  end call method: start 68, params 3, ret values 0


[456] 10.times{|i| print i }

  begin call method
    move: # (68) = const number 10 (-11)
    move: # (69) = const string "times" (-250)
    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 i (param)
        3 _E
        4 _G
      end locals
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-36)
          move: # (7) = param i (2)
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (70), index 53
  end call method: start 68, params 3, ret values 0


[458] Range = {

  new object 2: # (68)

[459] __construct = function(a, b){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 a (param)
      3 b (param)
      4 _E
      5 _G
    end locals

[460] if(b){

    begin if
      begin bool exp
        move: # (6) = param b (3)
      end bool exp
      begin then

[461] @a, @b = a, b

        begin scope
          move: # (6) = param a (2)
          move: # (7) = param b (3)
          set property: param this (1) [const string "b" (-201)] = # (7)
          set property: param this (1) [const string "a" (-146)] = # (6)
        end scope ret values 0
      end then
      begin else

[463] @a, @b = 0, a - 1

        begin scope
          move: # (6) = const number 0 (-15)
          # (7) = param a (2) [operator -] const number 1 (-4)
          set property: param this (1) [const string "b" (-201)] = # (7)
          set property: param this (1) [const string "a" (-146)] = # (6)
        end scope ret values 0
      end else
    end if ret values 0
  end function: # (70), index 54
  init property: # (68) [const string "__construct" (-86)] = # (70)

[466] __iter = function(){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
      4 a
      5 b
    end locals

[467] var a, b = @a, @b

    get property: # (6) = param this (1) [const string "a" (-146)]
    get property: var b (5) = param this (1) [const string "b" (-201)]
    move: var a (4) = # (6)


[468] return a <= b


[469] ? {|| a <= b && return true, a++ }

      begin question
        begin bool exp

[468] return a <= b

          move: # (6) = var a (4)
          move: # (7) = var b (5)
          # (6) = # (6) [logic <=] # (7)
        end bool exp
        begin then value

[469] ? {|| a <= b && return true, a++ }

          begin function
            begin locals 5, stack 8
              0 _F (param)
              1 this (param)
              2 _E
              3 _G
              4 #temp
            end locals
              get upvalue: # (5) = var a (4 1)
              get upvalue: # (6) = var b (5 1)
              # (5) = # (5) [logic <=] # (6)
              logic &&: # (5)
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = var a (4 1)
                  get upvalue: # (6) = var a (4 1)
                  # (6) = # (6) [operator +] const number 1 (-4)
                  set upvalue: var a (4 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
            return: # (5), count 1
          end function: # (6), index 56
        end then value
        begin else value

[470] : {|| a >= b && return true, a-- }

          begin function
            begin locals 5, stack 8
              0 _F (param)
              1 this (param)
              2 _E
              3 _G
              4 #temp
            end locals
              get upvalue: # (5) = var a (4 1)
              get upvalue: # (6) = var b (5 1)
              # (5) = # (5) [logic >=] # (6)
              logic &&: # (5)
                  move: # (5) = const true (-2)
                  get upvalue: var #temp (4) = var a (4 1)
                  get upvalue: # (6) = var a (4 1)
                  # (6) = # (6) [operator -] const number 1 (-4)
                  set upvalue: var a (4 1) = # (6)
                  move: # (6) = var #temp (4)
                return: # (5), count 2
            return: # (5), count 1
          end function: # (6), index 57
        end else value
      end question ret values 1
    return: # (6), count 1
  end function: # (70), index 55
  init property: # (68) [const string "__iter" (-68)] = # (70)
  set property: var _E (2) [const string "Range" (-252)] = # (68)


[474] print "Test for in Range(5)"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test for in Range(5)" (-253)
  end call method: start 68, params 3, ret values 0


[475] for(var i in Range(5))

  begin scope
    begin locals 3
      59 i
      60 #func
      61 #valid
    end locals



    begin call method
      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "Range" (-252)
        move: # (70) = const number 5 (-5)
      end call method: start 68, params 3, ret values 1
      move: # (69) = const string "__iter" (-68)
    end call method: start 68, params 2, ret values 1
    move: var #func (60) = # (68)

[476] print i

    begin loop

[475] for(var i in Range(5))


[476] print i

      begin call

[475] for(var i in Range(5))

        move: # (68) = var #func (60)

[476] print i

        move: # (69) = const null (-1)
      end call: start 68, params 2, ret values 2
      move: var i (59) = # (69)
      move: var #valid (61) = # (68)

      begin if
        begin bool exp

[475] for(var i in Range(5))

          move: # (68) = var #valid (61)
          # (68) = [logic not] # (68)
        end bool exp
        begin then

[476] print i

          break
        end then
      end if ret values 0

      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "print" (-36)
        move: # (70) = var i (59)
      end call method: start 68, params 3, ret values 0
    end loop ret values 0
  end scope ret values 0


[478] print "Test for in Range(-2, -6)"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    move: # (70) = const string "Test for in Range(-2, -6)" (-254)
  end call method: start 68, params 3, ret values 0


[479] for(var i in Range(-2, -6))

  begin scope
    begin locals 3
      62 i
      63 #func
      64 #valid
    end locals



    begin call method
      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "Range" (-252)
        # (70) = [neg] const number 2 (-8)
        # (71) = [neg] const number 6 (-24)
      end call method: start 68, params 4, ret values 1
      move: # (69) = const string "__iter" (-68)
    end call method: start 68, params 2, ret values 1
    move: var #func (63) = # (68)

[480] print i

    begin loop

[479] for(var i in Range(-2, -6))


[480] print i

      begin call

[479] for(var i in Range(-2, -6))

        move: # (68) = var #func (63)

[480] print i

        move: # (69) = const null (-1)
      end call: start 68, params 2, ret values 2
      move: var i (62) = # (69)
      move: var #valid (64) = # (68)

      begin if
        begin bool exp

[479] for(var i in Range(-2, -6))

          move: # (68) = var #valid (64)
          # (68) = [logic not] # (68)
        end bool exp
        begin then

[480] print i

          break
        end then
      end if ret values 0

      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "print" (-36)
        move: # (70) = var i (62)
      end call method: start 68, params 3, ret values 0
    end loop ret values 0
  end scope ret values 0


[482] function Number.to(b){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 b (param)
      3 _E
      4 _G
    end locals

[483] return Range(this, b)

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "Range" (-252)
        move: # (7) = param this (1)
        move: # (8) = param b (2)
      end call method: start 5, params 4, ret values 1
    return: # (5), count 1
  end function: # (68), index 58

[482] function Number.to(b){

  get property: # (69) = var _E (2) [const string "Number" (-249)]
  set property: # (69) [const string "to" (-255)] = # (68)


[486] print "Test for in 5.to(7)"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    get xconst: # (70) = const string "Test for in 5.to(7)" (-256)
  end call method: start 68, params 3, ret values 0


[487] for(var i in 5.to(7))

  begin scope
    begin locals 3
      65 i
      66 #func
      67 #valid
    end locals



    begin call method
      begin call method
        move: # (68) = const number 5 (-5)
        move: # (69) = const string "to" (-255)
        move: # (70) = const number 7 (-10)
      end call method: start 68, params 3, ret values 1
      move: # (69) = const string "__iter" (-68)
    end call method: start 68, params 2, ret values 1
    move: var #func (66) = # (68)

[488] print i

    begin loop

[487] for(var i in 5.to(7))


[488] print i

      begin call

[487] for(var i in 5.to(7))

        move: # (68) = var #func (66)

[488] print i

        move: # (69) = const null (-1)
      end call: start 68, params 2, ret values 2
      move: var i (65) = # (69)
      move: var #valid (67) = # (68)

      begin if
        begin bool exp

[487] for(var i in 5.to(7))

          move: # (68) = var #valid (67)
          # (68) = [logic not] # (68)
        end bool exp
        begin then

[488] print i

          break
        end then
      end if ret values 0

      begin call method
        move: # (68) = var _E (2)
        move: # (69) = const string "print" (-36)
        move: # (70) = var i (65)
      end call method: start 68, params 3, ret values 0
    end loop ret values 0
  end scope ret values 0


[490] print "Test 7.to(2).each"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    get xconst: # (70) = const string "Test 7.to(2).each" (-257)
  end call method: start 68, params 3, ret values 0


[491] 7.to(2).each{|i| print i}

  begin call method
    begin call method
      move: # (68) = const number 7 (-10)
      move: # (69) = const string "to" (-255)
      move: # (70) = const number 2 (-8)
    end call method: start 68, params 3, ret values 1
    move: # (69) = const string "each" (-229)
    begin function
      begin locals 5, stack 8
        0 _F (param)
        1 this (param)
        2 i (param)
        3 _E
        4 _G
      end locals
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "print" (-36)
          move: # (7) = param i (2)
        end call method: start 5, params 3, ret values 1
      return: # (5), count 1
    end function: # (70), index 59
  end call method: start 68, params 3, ret values 0


[493] terminate()

  begin call method
    move: # (68) = var _E (2)
    get xconst: # (69) = const string "terminate" (-258)
  end call method: start 68, params 2, ret values 0


[494] print "This text is never printed"

  begin call method
    move: # (68) = var _E (2)
    move: # (69) = const string "print" (-36)
    get xconst: # (70) = const string "This text is never printed" (-259)
  end call method: start 68, params 3, ret values 0

  return: var _E (2), count 1
end function: {main} (0), index 0
