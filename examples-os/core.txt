
[FILE] ../../examples-os/core.os
[1] typeof = typeOf

begin function
  begin locals 5, stack 5
    0 this (param)
    1 _E
    2 _G
    3 events
    4 timers
  end locals
  get property: # (5) = var _E (1) [const string "typeOf" (-8)]
  set property: var _E (1) [const string "typeof" (-7)] = # (5)


[2] numberof = numberOf

  get property: # (5) = var _E (1) [const string "numberOf" (-10)]
  set property: var _E (1) [const string "numberof" (-9)] = # (5)


[3] stringof = stringOf

  get property: # (5) = var _E (1) [const string "stringOf" (-12)]
  set property: var _E (1) [const string "stringof" (-11)] = # (5)


[4] arrayof = arrayOf

  get property: # (5) = var _E (1) [const string "arrayOf" (-14)]
  set property: var _E (1) [const string "arrayof" (-13)] = # (5)


[5] objectof = objectOf

  get property: # (5) = var _E (1) [const string "objectOf" (-16)]
  set property: var _E (1) [const string "objectof" (-15)] = # (5)


[6] userdataof = userdataOf

  get property: # (5) = var _E (1) [const string "userdataOf" (-18)]
  set property: var _E (1) [const string "userdataof" (-17)] = # (5)


[8] function __get(name){

  begin function
    begin locals 4, stack 5
      0 this (param)
      1 name (param)
      2 _E
      3 _G
    end locals

[9] echo("global property \""name"\" is not declared\n")

    begin call method
      move: # (4) = var _E (2)
      move: # (5) = const string "echo" (-20)
      move: # (6) = const string "global property "" (-21)
      move: # (7) = param name (1)
      move: # (8) = const string "" is not declared
" (-22)
    end call method: start 4, params 5, ret values 0


[10] echo "back trace\n"

    begin call method
      move: # (4) = var _E (2)
      move: # (5) = const string "echo" (-20)
      move: # (6) = const string "back trace
" (-23)
    end call method: start 4, params 3, ret values 0


[11] printBackTrace(1)

    begin call method
      move: # (4) = var _E (2)
      move: # (5) = const string "printBackTrace" (-24)
      move: # (6) = const number 1 (-4)
    end call method: start 4, params 3, ret values 0


[12] echo "\n"

    begin tail call method
      move: # (4) = var _E (2)
      move: # (5) = const string "echo" (-20)
      move: # (6) = const string "
" (-25)
    end tail call method
  end function: # (5), index 1
  set property: var _E (1) [const string "__get" (-19)] = # (5)


[15] function Object.__get(name, autoCreate){

  begin function
    begin locals 5, stack 5
      0 this (param)
      1 name (param)
      2 autoCreate (param)
      3 _E
      4 _G
    end locals

[16] if(autoCreate) return;

    begin if
      begin bool exp
        move: # (5) = param autoCreate (2)
      end bool exp
      begin then
        return: # (5), count 0
      end then
    end if ret values 0


[17] echo("object property \""name"\" is not declared\n")

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "object property "" (-26)
      move: # (8) = param name (1)
      move: # (9) = const string "" is not declared
" (-22)
    end call method: start 5, params 5, ret values 0


[18] echo "back trace\n"

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "back trace
" (-23)
    end call method: start 5, params 3, ret values 0


[19] printBackTrace(1) // skip current function

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "printBackTrace" (-24)
      move: # (7) = const number 1 (-4)
    end call method: start 5, params 3, ret values 0


[20] echo("=======\ntarget "this"\n\n")

    begin tail call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "=======
target " (-27)
      move: # (8) = param this (0)
      move: # (9) = const string "

" (-28)
    end tail call method
  end function: # (5), index 2

[15] function Object.__get(name, autoCreate){

  get property: # (6) = var _E (1) [const string "Object" (-29)]
  set property: # (6) [const string "__get" (-19)] = # (5)


[23] function Userdata.__set(name, value){

  begin function
    begin locals 5, stack 7
      0 this (param)
      1 name (param)
      2 value (param)
      3 _E
      4 _G
    end locals

[24] echo("userdata property \""name"\" is not declared, set value "value"\n")

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "userdata property "" (-30)
      move: # (8) = param name (1)
      move: # (9) = const string "" is not declared, set value " (-31)
      move: # (10) = param value (2)
      move: # (11) = const string "
" (-25)
    end call method: start 5, params 7, ret values 0


[25] echo "back trace\n"

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "back trace
" (-23)
    end call method: start 5, params 3, ret values 0


[26] printBackTrace(1) // skip current function

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "printBackTrace" (-24)
      move: # (7) = const number 1 (-4)
    end call method: start 5, params 3, ret values 0


[27] echo("=======\ntarget "this"\n\n")

    begin tail call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "=======
target " (-27)
      move: # (8) = param this (0)
      move: # (9) = const string "

" (-28)
    end tail call method
  end function: # (5), index 3

[23] function Userdata.__set(name, value){

  get property: # (6) = var _E (1) [const string "Userdata" (-32)]
  set property: # (6) [const string "__set" (-33)] = # (5)


[30] function assert(a, message){

  begin function
    begin locals 5, stack 3
      0 this (param)
      1 a (param)
      2 message (param)
      3 _E
      4 _G
    end locals

[31] if(!a){

    begin if
      begin bool exp
        move: # (5) = param a (1)
        # (5) = [logic not] # (5)
      end bool exp
      begin then

[32] print(message || "assert failed")

        begin scope
          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "print" (-35)
            move: # (7) = param message (2)
            logic ||: # (7)
              move: # (7) = const string "assert failed" (-36)
          end call method: start 5, params 3, ret values 0


[33] printBackTrace(1)

          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "printBackTrace" (-24)
            move: # (7) = const number 1 (-4)
          end call method: start 5, params 3, ret values 0


[34] terminate()

          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "terminate" (-37)
          end call method: start 5, params 2, ret values 0
        end scope ret values 0
      end then
    end if ret values 0
  end function: # (5), index 4
  set property: var _E (1) [const string "assert" (-34)] = # (5)


[38] setErrorHandler {|code message file line|

  begin call method
    move: # (5) = var _E (1)
    move: # (6) = const string "setErrorHandler" (-38)
    begin function
      begin locals 8, stack 7
        0 this (param)
        1 code (param)
        2 message (param)
        3 file (param)
        4 line (param)
        5 _E
        6 _G
        7 type
      end locals

[39] var type = "ERROR"

      move: var type (7) = const string "ERROR" (-39)


[40] if(code == E_WARNING)

      begin if
        begin bool exp
          move: # (8) = param code (1)
          get property: # (9) = var _E (5) [const string "E_WARNING" (-40)]
          # (8) = # (8) [logic ==] # (9)
        end bool exp
        begin then

[41] type = "WARNING"

          move: var type (7) = const string "WARNING" (-41)
        end then
        begin else

[42] else if(code == E_NOTICE)

          begin if
            begin bool exp
              move: # (8) = param code (1)
              get property: # (9) = var _E (5) [const string "E_NOTICE" (-42)]
              # (8) = # (8) [logic ==] # (9)
            end bool exp
            begin then

[43] type = "NOTICE"

              move: var type (7) = const string "NOTICE" (-43)
            end then
          end if ret values 0
        end else
      end if ret values 0


[44] echo("["type"] "message"\n")

      begin call method
        move: # (8) = var _E (5)
        move: # (9) = const string "echo" (-20)
        move: # (10) = const string "[" (-44)
        move: # (11) = var type (7)
        move: # (12) = const string "] " (-45)
        move: # (13) = param message (2)
        move: # (14) = const string "
" (-25)
      end call method: start 8, params 7, ret values 0


[45] echo "back trace\n"

      begin call method
        move: # (8) = var _E (5)
        move: # (9) = const string "echo" (-20)
        move: # (10) = const string "back trace
" (-23)
      end call method: start 8, params 3, ret values 0


[46] printBackTrace(1) // skip current function

      begin tail call method
        move: # (8) = var _E (5)
        move: # (9) = const string "printBackTrace" (-24)
        move: # (10) = const number 1 (-4)
      end tail call method
    end function: # (7), index 5
  end call method: start 5, params 3, ret values 0


[49] function printBackTrace(skipNumFuncs){

  begin function
    begin locals 8, stack 9
      0 this (param)
      1 skipNumFuncs (param)
      2 _E
      3 _G
    end locals

[50] for(var i, t in debugBackTrace(skipNumFuncs + 1)){ // skip printBackTrace

    begin scope
      begin locals 4
        4 i
        5 t
        6 #func
        7 #valid
      end locals




      begin call method
        begin call method
          move: # (8) = var _E (2)
          move: # (9) = const string "debugBackTrace" (-46)
          # (10) = param skipNumFuncs (1) [operator +] const number 1 (-4)
        end call method: start 8, params 3, ret values 1
        move: # (9) = const string "__iter" (-47)
      end call method: start 8, params 2, ret values 1
      move: var #func (6) = # (8)
      begin loop
        begin call
          move: # (8) = var #func (6)
          move: # (9) = const null (-1)
        end call: start 8, params 2, ret values 3
        move: var t (5) = # (10)
        move: var i (4) = # (9)
        move: var #valid (7) = # (8)

        begin if
          begin bool exp
            move: # (8) = var #valid (7)
            # (8) = [logic not] # (8)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[51] echo("======= ["i"]\n")

        begin scope
          begin call method
            move: # (8) = var _E (2)
            move: # (9) = const string "echo" (-20)
            move: # (10) = const string "======= [" (-48)
            move: # (11) = var i (4)
            move: # (12) = const string "]
" (-49)
          end call method: start 8, params 5, ret values 0


[53] echo("  line: "t.line", pos: "t.pos", file: "t.file"\n")

          begin call method
            move: # (8) = var _E (2)
            move: # (9) = const string "echo" (-20)
            move: # (10) = const string "  line: " (-50)
            get property: # (11) = var t (5) [const string "line" (-51)]
            move: # (12) = const string ", pos: " (-52)
            get property: # (13) = var t (5) [const string "pos" (-53)]
            move: # (14) = const string ", file: " (-54)
            get property: # (15) = var t (5) [const string "file" (-55)]
            move: # (16) = const string "
" (-25)
          end call method: start 8, params 9, ret values 0


[54] echo("  function: "t.name", arguments: "t.arguments"\n")

          begin call method
            move: # (8) = var _E (2)
            move: # (9) = const string "echo" (-20)
            move: # (10) = const string "  function: " (-56)
            get property: # (11) = var t (5) [const string "name" (-57)]
            move: # (12) = const string ", arguments: " (-58)
            get property: # (13) = var t (5) [const string "arguments" (-59)]
            move: # (14) = const string "
" (-25)
          end call method: start 8, params 7, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (5), index 6
  set property: var _E (1) [const string "printBackTrace" (-24)] = # (5)


[59] function eval(str, env){

  begin function
    begin locals 5, stack 5
      0 this (param)
      1 str (param)
      2 env (param)
      3 _E
      4 _G
    end locals

[60] return compileText(str).applyEnv(env || _G, null, ...)

    begin tail call method
      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "compileText" (-61)
        move: # (7) = param str (1)
      end call method: start 5, params 3, ret values 1
      move: # (6) = const string "applyEnv" (-62)
      move: # (7) = param env (2)
      logic ||: # (7)
        move: # (7) = var _G (4)
      move: # (8) = const null (-1)
      push rest arguments: # (9)
    end tail call method
  end function: # (5), index 7
  set property: var _E (1) [const string "eval" (-60)] = # (5)


[63] var events = {}

  new object 0: # (5)
  move: var events (3) = # (5)


[65] function addEventListener(eventName, func, zOrder){

  begin function
    begin locals 6, stack 4
      0 this (param)
      1 eventName (param)
      2 func (param)
      3 zOrder (param)
      4 _E
      5 _G
    end locals

[66] functionOf(func) || return;

    begin pop
      begin call method
        move: # (6) = var _E (4)
        move: # (7) = const string "functionOf" (-64)
        move: # (8) = param func (2)
      end call method: start 6, params 3, ret values 1
      logic ||: # (6)
        return: # (6), count 0
    end pop ret values 0


[67] events[eventName][func] = zOrder || 0

    move: # (6) = param zOrder (3)
    logic ||: # (6)
      move: # (6) = const number 0 (-5)
    get upvalue: # (7) = var events (3 1)
    get property: # (7) = # (7) [param eventName (1)]
    set property: # (7) [param func (2)] = # (6)


[68] events[eventName].rsort()

    begin call method
      get upvalue: # (6) = var events (3 1)
      get property: # (6) = # (6) [param eventName (1)]
      move: # (7) = const string "rsort" (-65)
    end call method: start 6, params 2, ret values 0


[69] return [eventName func]

      new array 2: # (6)
      begin call method
        move: # (7) = # (6)
        move: # (8) = const string "push" (-66)
        move: # (9) = param eventName (1)
      end call method: start 7, params 3, ret values 0
      begin call method
        move: # (7) = # (6)
        move: # (8) = const string "push" (-66)
        move: # (9) = param func (2)
      end call method: start 7, params 3, ret values 0
    return: # (6), count 1
  end function: # (5), index 8
  set property: var _E (1) [const string "addEventListener" (-63)] = # (5)


[72] function removeEventListener(eventName, func){

  begin function
    begin locals 5, stack 4
      0 this (param)
      1 eventName (param)
      2 func (param)
      3 _E
      4 _G
    end locals

[73] if(arrayOf(eventName)){

    begin if
      begin bool exp
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "arrayOf" (-14)
          move: # (7) = param eventName (1)
        end call method: start 5, params 3, ret values 1
      end bool exp
      begin then

[74] eventName, func = eventName[0], eventName[1]

        begin scope
          get property: # (5) = param eventName (1) [const number 0 (-5)]
          get property: param func (2) = param eventName (1) [const number 1 (-4)]
          move: param eventName (1) = # (5)
        end scope ret values 0
      end then
    end if ret values 0

[76] if(eventName in events){

    begin if
      begin bool exp
        begin call method
          move: # (5) = var _E (3)
          move: # (6) = const string "__in" (-68)
          move: # (7) = param eventName (1)
          get upvalue: # (8) = var events (3 1)
        end call method: start 5, params 4, ret values 1
      end bool exp
      begin then

[77] delete events[eventName][func]

        begin scope
          begin call method
            move: # (5) = var _E (3)
            move: # (6) = const string "__delete" (-69)
            get upvalue: # (7) = var events (3 1)
            get property: # (7) = # (7) [param eventName (1)]
            move: # (8) = param func (2)
          end call method: start 5, params 4, ret values 0
        end scope ret values 0
      end then
    end if ret values 0
  end function: # (5), index 9
  set property: var _E (1) [const string "removeEventListener" (-67)] = # (5)


[81] function triggerEvent(eventName, params){

  begin function
    begin locals 9, stack 3
      0 this (param)
      1 eventName (param)
      2 params (param)
      3 _E
      4 _G
    end locals

[83] for(var func, zOrder in events[eventName]){

    begin scope
      begin locals 4
        5 func
        6 zOrder
        7 #func
        8 #valid
      end locals




      begin call method
        get upvalue: # (9) = var events (3 1)
        get property: # (9) = # (9) [param eventName (1)]
        move: # (10) = const string "__iter" (-47)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var zOrder (6) = # (11)
        move: var func (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[84] func(params)

        begin scope
          begin call
            move: # (9) = var func (5)
            move: # (10) = const null (-1)
            move: # (11) = param params (2)
          end call: start 9, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (5), index 10
  set property: var _E (1) [const string "triggerEvent" (-70)] = # (5)


[88] var timers = {}

  new object 0: # (5)
  move: var timers (4) = # (5)


[90] function isCallable(f){

  begin function
    begin locals 5, stack 3
      0 this (param)
      1 f (param)
      2 _E
      3 _G
      4 type
    end locals

[91] var type = typeOf(f)

    begin call method
      move: # (5) = var _E (2)
      move: # (6) = const string "typeOf" (-8)
      move: # (7) = param f (1)
    end call method: start 5, params 3, ret values 1
    move: var type (4) = # (5)


[92] return type === "function" || type === "object" || type === "userdata"

      move: # (5) = var type (4)
      move: # (6) = const string "function" (-72)
      # (5) = # (5) [logic ===] # (6)
      logic ||: # (5)
        move: # (5) = var type (4)
        move: # (6) = const string "object" (-73)
        # (5) = # (5) [logic ===] # (6)
      logic ||: # (5)
        move: # (5) = var type (4)
        move: # (6) = const string "userdata" (-74)
        # (5) = # (5) [logic ===] # (6)
    return: # (5), count 1
  end function: # (5), index 11
  set property: var _E (1) [const string "isCallable" (-71)] = # (5)


[95] function setTimeout(func, delay, count, priority){

  begin function
    begin locals 8, stack 4
      0 this (param)
      1 func (param)
      2 delay (param)
      3 count (param)
      4 priority (param)
      5 _E
      6 _G
      7 i
    end locals

[96] count = count || 1

    move: # (8) = param count (3)
    logic ||: # (8)
      move: # (8) = const number 1 (-4)
    move: param count (3) = # (8)


[97] count > 0 && functionOf(func) || return;

    begin pop
      move: # (8) = param count (3)
      move: # (9) = const number 0 (-5)
      # (8) = # (8) [logic >] # (9)
      logic &&: # (8)
        begin call method
          move: # (8) = var _E (5)
          move: # (9) = const string "functionOf" (-64)
          move: # (10) = param func (1)
        end call method: start 8, params 3, ret values 1
      logic ||: # (8)
        return: # (8), count 0
    end pop ret values 0


[98] var i = func // #timers

    move: var i (7) = param func (1)


[99] timers[i] = {

    new object 5: # (8)

[100] nextTime = app.timeSec + delay

    get property: # (10) = var _E (5) [const string "app" (-77)]
    get property: # (10) = # (10) [const string "timeSec" (-78)]
    # (10) = # (10) [operator +] param delay (2)
    set property: # (8) [const string "nextTime" (-76)] = # (10)

[101] delay = delay

    set property: # (8) [const string "delay" (-79)] = param delay (2)

[102] func = func

    set property: # (8) [const string "func" (-80)] = param func (1)

[103] count = count

    set property: # (8) [const string "count" (-81)] = param count (3)

[104] priority = priority || 0

    move: # (10) = param priority (4)
    logic ||: # (10)
      move: # (10) = const number 0 (-5)
    set property: # (8) [const string "priority" (-82)] = # (10)

[99] timers[i] = {

    get upvalue: # (9) = var timers (4 1)
    set property: # (9) [var i (7)] = # (8)


[107] timers.rsort "priority"

    begin call method
      get upvalue: # (8) = var timers (4 1)
      move: # (9) = const string "rsort" (-65)
      move: # (10) = const string "priority" (-82)
    end call method: start 8, params 3, ret values 0


[108] return i

    return: var i (7), count 1
  end function: # (5), index 12
  set property: var _E (1) [const string "setTimeout" (-75)] = # (5)


[111] function clearTimeout(t){

  begin function
    begin locals 4, stack 4
      0 this (param)
      1 t (param)
      2 _E
      3 _G
    end locals

[112] delete timers[t]

    begin call method
      move: # (4) = var _E (2)
      move: # (5) = const string "__delete" (-69)
      get upvalue: # (6) = var timers (4 1)
      move: # (7) = param t (1)
    end call method: start 4, params 4, ret values 0
  end function: # (5), index 13
  set property: var _E (1) [const string "clearTimeout" (-83)] = # (5)


[115] HIGH_PRIORITY = 999999

  move: # (5) = const number 999999 (-6)
  set property: var _E (1) [const string "HIGH_PRIORITY" (-84)] = # (5)


[117] addEventListener("enterFrame" {||

  begin call method
    move: # (5) = var _E (1)
    move: # (6) = const string "addEventListener" (-63)
    begin call
      move: # (7) = const string "enterFrame" (-85)
      move: # (8) = const null (-1)
      begin function
        begin locals 8, stack 4
          0 this (param)
          1 _E
          2 _G
          3 time
        end locals

[118] var time = app.timeSec

        get property: # (8) = var _E (1) [const string "app" (-77)]
        get property: var time (3) = # (8) [const string "timeSec" (-78)]

[119] for(var i, t in timers){

        begin scope
          begin locals 4
            4 i
            5 t
            6 #func
            7 #valid
          end locals




          begin call method
            get upvalue: # (8) = var timers (4 1)
            move: # (9) = const string "__iter" (-47)
          end call method: start 8, params 2, ret values 1
          move: var #func (6) = # (8)
          begin loop
            begin call
              move: # (8) = var #func (6)
              move: # (9) = const null (-1)
            end call: start 8, params 2, ret values 3
            move: var t (5) = # (10)
            move: var i (4) = # (9)
            move: var #valid (7) = # (8)

            begin if
              begin bool exp
                move: # (8) = var #valid (7)
                # (8) = [logic not] # (8)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[120] if(t.nextTime <= time){

            begin scope
              begin if
                begin bool exp
                  get property: # (8) = var t (5) [const string "nextTime" (-76)]
                  move: # (9) = var time (3)
                  # (8) = # (8) [logic <=] # (9)
                end bool exp
                begin then

[121] t.nextTime = time + t.delay

                  begin scope
                    get property: # (9) = var t (5) [const string "delay" (-79)]
                    # (8) = var time (3) [operator +] # (9)
                    set property: var t (5) [const string "nextTime" (-76)] = # (8)


[122] if(t.count === true){

                    begin if
                      begin bool exp
                        get property: # (8) = var t (5) [const string "count" (-81)]
                        move: # (9) = const true (-2)
                        # (8) = # (8) [logic ===] # (9)
                      end bool exp
                      begin then

[123] t.func.call(null)

                        begin scope
                          begin call method
                            get property: # (8) = var t (5) [const string "func" (-80)]
                            move: # (9) = const string "call" (-86)
                            move: # (10) = const null (-1)
                          end call method: start 8, params 3, ret values 0
                        end scope ret values 0
                      end then
                      begin else

[125] if(t.count <= 1){

                        begin scope
                          begin if
                            begin bool exp
                              get property: # (8) = var t (5) [const string "count" (-81)]
                              move: # (9) = const number 1 (-4)
                              # (8) = # (8) [logic <=] # (9)
                            end bool exp
                            begin then

[126] delete timers[i]

                              begin scope
                                begin call method
                                  move: # (8) = var _E (1)
                                  move: # (9) = const string "__delete" (-69)
                                  get upvalue: # (10) = var timers (4 1)
                                  move: # (11) = var i (4)
                                end call method: start 8, params 4, ret values 0
                              end scope ret values 0
                            end then
                            begin else

[128] t.count = t.count - 1

                              begin scope
                                get property: # (8) = var t (5) [const string "count" (-81)]
                                # (8) = # (8) [operator -] const number 1 (-4)
                                set property: var t (5) [const string "count" (-81)] = # (8)
                              end scope ret values 0
                            end else
                          end if ret values 0


[130] t.func.call(null)

                          begin call method
                            get property: # (8) = var t (5) [const string "func" (-80)]
                            move: # (9) = const string "call" (-86)
                            move: # (10) = const null (-1)
                          end call method: start 8, params 3, ret values 0
                        end scope ret values 0
                      end else
                    end if ret values 0
                  end scope ret values 0
                end then
              end if ret values 0
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end function: # (9), index 14
    end call: start 7, params 3, ret values 1

[134] } HIGH_PRIORITY+1)

    get property: # (8) = var _E (1) [const string "HIGH_PRIORITY" (-84)]
    # (8) = # (8) [operator +] const number 1 (-4)
  end call method: start 5, params 4, ret values 0


[136] function toArray(a){

  begin function
    begin locals 10, stack 4
      0 this (param)
      1 a (param)
      2 _E
      3 _G
      4 type
    end locals

[137] arrayOf(a) && return arr;

    begin pop
      begin call method
        move: # (10) = var _E (2)
        move: # (11) = const string "arrayOf" (-14)
        move: # (12) = param a (1)
      end call method: start 10, params 3, ret values 1
      logic &&: # (10)
          get property: # (10) = var _E (2) [const string "arr" (-88)]
        return: # (10), count 1
    end pop ret values 0


[138] var type = typeOf(a)

    begin call method
      move: # (10) = var _E (2)
      move: # (11) = const string "typeOf" (-8)
      move: # (12) = param a (1)
    end call method: start 10, params 3, ret values 1
    move: var type (4) = # (10)


[139] if(type == "object"){

    begin if
      begin bool exp
        move: # (10) = var type (4)
        move: # (11) = const string "object" (-73)
        # (10) = # (10) [logic ==] # (11)
      end bool exp
      begin then

[140] var arr = []

        begin scope
          begin locals 1
            5 arr
          end locals
          new array 0: # (10)
          move: var arr (5) = # (10)


[141] for(var i, v in a){

          begin scope
            begin locals 4
              6 i
              7 v
              8 #func
              9 #valid
            end locals




            begin call method
              move: # (10) = param a (1)
              move: # (11) = const string "__iter" (-47)
            end call method: start 10, params 2, ret values 1
            move: var #func (8) = # (10)
            begin loop
              begin call
                move: # (10) = var #func (8)
                move: # (11) = const null (-1)
              end call: start 10, params 2, ret values 3
              move: var v (7) = # (12)
              move: var i (6) = # (11)
              move: var #valid (9) = # (10)

              begin if
                begin bool exp
                  move: # (10) = var #valid (9)
                  # (10) = [logic not] # (10)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[142] arr.push(v)

              begin scope
                begin call method
                  move: # (10) = var arr (5)
                  move: # (11) = const string "push" (-66)
                  move: # (12) = var v (7)
                end call method: start 10, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0


[144] return arr

          return: var arr (5), count 1
        end scope ret values 0
      end then
    end if ret values 0


[146] if(type == "null"){

    begin if
      begin bool exp
        move: # (10) = var type (4)
        move: # (11) = const string "null" (-89)
        # (10) = # (10) [logic ==] # (11)
      end bool exp
      begin then

[147] return null

        begin scope
            move: # (10) = const null (-1)
          return: # (10), count 1
        end scope ret values 0
      end then
    end if ret values 0


[149] return [a]

      new array 1: # (10)
      begin call method
        move: # (11) = # (10)
        move: # (12) = const string "push" (-66)
        move: # (13) = param a (1)
      end call method: start 11, params 3, ret values 0
    return: # (10), count 1
  end function: # (5), index 15
  set property: var _E (1) [const string "toArray" (-87)] = # (5)


[152] function toObject(a){

  begin function
    begin locals 10, stack 4
      0 this (param)
      1 a (param)
      2 _E
      3 _G
      4 type
    end locals

[153] objectOf(a) && return object;

    begin pop
      begin call method
        move: # (10) = var _E (2)
        move: # (11) = const string "objectOf" (-16)
        move: # (12) = param a (1)
      end call method: start 10, params 3, ret values 1
      logic &&: # (10)
          get property: # (10) = var _E (2) [const string "object" (-73)]
        return: # (10), count 1
    end pop ret values 0


[154] var type = typeOf(a)

    begin call method
      move: # (10) = var _E (2)
      move: # (11) = const string "typeOf" (-8)
      move: # (12) = param a (1)
    end call method: start 10, params 3, ret values 1
    move: var type (4) = # (10)


[155] if(type == "array"){

    begin if
      begin bool exp
        move: # (10) = var type (4)
        move: # (11) = const string "array" (-91)
        # (10) = # (10) [logic ==] # (11)
      end bool exp
      begin then

[156] var object = {}

        begin scope
          begin locals 1
            5 object
          end locals
          new object 0: # (10)
          move: var object (5) = # (10)


[157] for(var i, v in a){

          begin scope
            begin locals 4
              6 i
              7 v
              8 #func
              9 #valid
            end locals




            begin call method
              move: # (10) = param a (1)
              move: # (11) = const string "__iter" (-47)
            end call method: start 10, params 2, ret values 1
            move: var #func (8) = # (10)
            begin loop
              begin call
                move: # (10) = var #func (8)
                move: # (11) = const null (-1)
              end call: start 10, params 2, ret values 3
              move: var v (7) = # (12)
              move: var i (6) = # (11)
              move: var #valid (9) = # (10)

              begin if
                begin bool exp
                  move: # (10) = var #valid (9)
                  # (10) = [logic not] # (10)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[158] object.push(v)

              begin scope
                begin call method
                  move: # (10) = var object (5)
                  move: # (11) = const string "push" (-66)
                  move: # (12) = var v (7)
                end call method: start 10, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0


[160] return object

          return: var object (5), count 1
        end scope ret values 0
      end then
    end if ret values 0


[162] if(type == "null"){

    begin if
      begin bool exp
        move: # (10) = var type (4)
        move: # (11) = const string "null" (-89)
        # (10) = # (10) [logic ==] # (11)
      end bool exp
      begin then

[163] return null

        begin scope
            move: # (10) = const null (-1)
          return: # (10), count 1
        end scope ret values 0
      end then
    end if ret values 0


[165] return {a}

      new object 1: # (10)
      begin call method
        move: # (11) = # (10)
        move: # (12) = const string "push" (-66)
        move: # (13) = param a (1)
      end call method: start 11, params 3, ret values 0
    return: # (10), count 1
  end function: # (5), index 16
  set property: var _E (1) [const string "toObject" (-90)] = # (5)


[168] function Object.deepClone(){

  begin function
    begin locals 8, stack 3
      0 this (param)
      1 _E
      2 _G
      3 t
    end locals

[169] var t = this.clone()

    begin call method
      move: # (8) = param this (0)
      move: # (9) = const string "clone" (-92)
    end call method: start 8, params 2, ret values 1
    move: var t (3) = # (8)


[170] for(var k, v in t){

    begin scope
      begin locals 4
        4 k
        5 v
        6 #func
        7 #valid
      end locals




      begin call method
        move: # (8) = var t (3)
        move: # (9) = const string "__iter" (-47)
      end call method: start 8, params 2, ret values 1
      move: var #func (6) = # (8)
      begin loop
        begin call
          move: # (8) = var #func (6)
          move: # (9) = const null (-1)
        end call: start 8, params 2, ret values 3
        move: var v (5) = # (10)
        move: var k (4) = # (9)
        move: var #valid (7) = # (8)

        begin if
          begin bool exp
            move: # (8) = var #valid (7)
            # (8) = [logic not] # (8)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[171] t[k] = v.deepClone()

        begin scope
          begin call method
            move: # (8) = var v (5)
            move: # (9) = const string "deepClone" (-93)
          end call method: start 8, params 2, ret values 1
          set property: var t (3) [var k (4)] = # (8)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[173] return t

    return: var t (3), count 1
  end function: # (5), index 17

[168] function Object.deepClone(){

  get property: # (6) = var _E (1) [const string "Object" (-29)]
  set property: # (6) [const string "deepClone" (-93)] = # (5)


[174] }

  return: var _E (1), count 1
end function: <<->> (0), index 0
