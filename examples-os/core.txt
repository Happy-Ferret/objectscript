
[FILE] ../../examples-os/core.os
[1] typeof = typeOf

begin function
  begin locals 6, stack 11
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    4 events
    5 timers
  end locals
  get property: # (6) = var _E (2) [const string "typeOf" (-8)]
  set property: var _E (2) [const string "typeof" (-7)] = # (6)


[2] numberof = numberOf

  get property: # (6) = var _E (2) [const string "numberOf" (-10)]
  set property: var _E (2) [const string "numberof" (-9)] = # (6)


[3] stringof = stringOf

  get property: # (6) = var _E (2) [const string "stringOf" (-12)]
  set property: var _E (2) [const string "stringof" (-11)] = # (6)


[4] arrayof = arrayOf

  get property: # (6) = var _E (2) [const string "arrayOf" (-14)]
  set property: var _E (2) [const string "arrayof" (-13)] = # (6)


[5] objectof = objectOf

  get property: # (6) = var _E (2) [const string "objectOf" (-16)]
  set property: var _E (2) [const string "objectof" (-15)] = # (6)


[6] userdataof = userdataOf

  get property: # (6) = var _E (2) [const string "userdataOf" (-18)]
  set property: var _E (2) [const string "userdataof" (-17)] = # (6)


[8] function __get(name){

  begin function
    begin locals 5, stack 10
      0 _F (param)
      1 this (param)
      2 name (param)
      3 _E
      4 _G
    end locals

[9] echo("global property \""name"\" is not declared\n")

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "global property "" (-21)
      move: # (8) = param name (2)
      move: # (9) = const string "" is not declared
" (-22)
    end call method: start 5, params 5, ret values 0


[10] echo "back trace\n"

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "back trace
" (-23)
    end call method: start 5, params 3, ret values 0


[11] printBackTrace(1)

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "printBackTrace" (-24)
      move: # (7) = const number 1 (-4)
    end call method: start 5, params 3, ret values 0


[12] echo "\n"

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "echo" (-20)
        move: # (7) = const string "
" (-25)
      end call method: start 5, params 3, ret values 1
    return: # (5), count 1
  end function: # (6), index 1
  set property: var _E (2) [const string "__get" (-19)] = # (6)


[15] function Object.__get(name){

  begin function
    begin locals 5, stack 10
      0 _F (param)
      1 this (param)
      2 name (param)
      3 _E
      4 _G
    end locals

[16] echo("object property \""name"\" is not declared\n")

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "object property "" (-26)
      move: # (8) = param name (2)
      move: # (9) = const string "" is not declared
" (-22)
    end call method: start 5, params 5, ret values 0


[17] echo "back trace\n"

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "back trace
" (-23)
    end call method: start 5, params 3, ret values 0


[18] printBackTrace(1) // skip current function

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "printBackTrace" (-24)
      move: # (7) = const number 1 (-4)
    end call method: start 5, params 3, ret values 0


[19] echo("=======\ntarget "this"\n\n")

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "echo" (-20)
        move: # (7) = const string "=======
target " (-27)
        move: # (8) = param this (1)
        move: # (9) = const string "

" (-28)
      end call method: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (6), index 2

[15] function Object.__get(name){

  get property: # (7) = var _E (2) [const string "Object" (-29)]
  set property: # (7) [const string "__get" (-19)] = # (6)


[22] function assert(a, message){

  begin function
    begin locals 6, stack 7
      0 _F (param)
      1 this (param)
      2 a (param)
      3 message (param)
      4 _E
      5 _G
    end locals

[23] if(!a){

    begin if
      begin bool exp
        move: # (6) = param a (2)
        # (6) = [logic not] # (6)
      end bool exp
      begin then

[24] throw(message || "assert failed")

        begin scope
          move: # (6) = param message (3)
          logic ||: # (6)
            move: # (6) = const string "assert failed" (-31)
          throw: # (6)
        end scope ret values 0
      end then
    end if ret values 0
  end function: # (6), index 3
  set property: var _E (2) [const string "assert" (-30)] = # (6)


[28] function unhandledException(e){

  begin function
    begin locals 9, stack 22
      0 _F (param)
      1 this (param)
      2 e (param)
      3 _E
      4 _G
    end locals

[29] if("trace" in e){

    begin if
      begin bool exp
        begin call method
          move: # (9) = var _G (4)
          move: # (10) = const string "__in" (-33)
          move: # (11) = const string "trace" (-34)
          move: # (12) = param e (2)
        end call method: start 9, params 4, ret values 1
      end bool exp
      begin then

[30] printf("Unhandled exception: '%s'\n", e.message);

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-35)
            move: # (11) = const string "Unhandled exception: '%s'
" (-36)
            get property: # (12) = param e (2) [const string "message" (-37)]
          end call method: start 9, params 4, ret values 0


[31] for(var i, t in e.trace){

          begin scope
            begin locals 4
              5 i
              6 t
              7 #func
              8 #valid
            end locals




            begin call method
              get property: # (9) = param e (2) [const string "trace" (-34)]
              move: # (10) = const string "__iter" (-38)
            end call method: start 9, params 2, ret values 1
            move: var #func (7) = # (9)
            begin loop
              begin call
                move: # (9) = var #func (7)
                move: # (10) = const null (-1)
              end call: start 9, params 2, ret values 3
              move: var t (6) = # (11)
              move: var i (5) = # (10)
              move: var #valid (8) = # (9)

              begin if
                begin bool exp
                  move: # (9) = var #valid (8)
                  # (9) = [logic not] # (9)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[32] printf("#%d %s(%d): %s, args: %s\n", i, t.file, t.line, t.object ? "{obj-"..t.object.osValueId.."}."..t.name : t.name, t.arguments);

              begin scope
                begin call method
                  move: # (9) = var _E (3)
                  move: # (10) = const string "printf" (-35)
                  move: # (11) = const string "#%d %s(%d): %s, args: %s
" (-39)
                  move: # (12) = var i (5)
                  get property: # (13) = var t (6) [const string "file" (-40)]
                  get property: # (14) = var t (6) [const string "line" (-41)]
                  begin question
                    begin bool exp
                      get property: # (15) = var t (6) [const string "object" (-42)]
                    end bool exp
                    begin then value
                      begin call method
                        move: # (15) = var _G (4)
                        move: # (16) = const string "concat" (-43)
                        move: # (17) = const string "{obj-" (-44)
                        get property: # (18) = var t (6) [const string "object" (-42)]
                        get property: # (18) = # (18) [const string "osValueId" (-45)]
                        move: # (19) = const string "}." (-46)
                        get property: # (20) = var t (6) [const string "name" (-47)]
                      end call method: start 15, params 6, ret values 1
                    end then value
                    begin else value
                      get property: # (15) = var t (6) [const string "name" (-47)]
                    end else value
                  end question ret values 1
                  get property: # (16) = var t (6) [const string "arguments" (-48)]
                end call method: start 9, params 8, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0
        end scope ret values 0
      end then
      begin else

[35] printf("Unhandled exception: '%s' in %s(%d)\n", e.message, e.file, e.line);

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-35)
            move: # (11) = const string "Unhandled exception: '%s' in %s(%d)
" (-49)
            get property: # (12) = param e (2) [const string "message" (-37)]
            get property: # (13) = param e (2) [const string "file" (-40)]
            get property: # (14) = param e (2) [const string "line" (-41)]
          end call method: start 9, params 6, ret values 0
        end scope ret values 0
      end else
    end if ret values 0
  end function: # (6), index 4
  set property: var _E (2) [const string "unhandledException" (-32)] = # (6)


[39] function printBackTrace(skipNumFuncs){

  begin function
    begin locals 9, stack 22
      0 _F (param)
      1 this (param)
      2 skipNumFuncs (param)
      3 _E
      4 _G
    end locals

[40] for(var i, t in debugBackTrace(skipNumFuncs + 1)){ // skip printBackTrace

    begin scope
      begin locals 4
        5 i
        6 t
        7 #func
        8 #valid
      end locals




      begin call method
        begin call method
          move: # (9) = var _E (3)
          move: # (10) = const string "debugBackTrace" (-50)
          # (11) = param skipNumFuncs (2) [operator +] const number 1 (-4)
        end call method: start 9, params 3, ret values 1
        move: # (10) = const string "__iter" (-38)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var t (6) = # (11)
        move: var i (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[41] printf("#%d %s(%d): %s, args: %s\n", i, t.file, t.line, t.object ? "{obj-"..t.object.osValueId.."}."..t.name : t.name, t.arguments);

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-35)
            move: # (11) = const string "#%d %s(%d): %s, args: %s
" (-39)
            move: # (12) = var i (5)
            get property: # (13) = var t (6) [const string "file" (-40)]
            get property: # (14) = var t (6) [const string "line" (-41)]
            begin question
              begin bool exp
                get property: # (15) = var t (6) [const string "object" (-42)]
              end bool exp
              begin then value
                begin call method
                  move: # (15) = var _G (4)
                  move: # (16) = const string "concat" (-43)
                  move: # (17) = const string "{obj-" (-44)
                  get property: # (18) = var t (6) [const string "object" (-42)]
                  get property: # (18) = # (18) [const string "osValueId" (-45)]
                  move: # (19) = const string "}." (-46)
                  get property: # (20) = var t (6) [const string "name" (-47)]
                end call method: start 15, params 6, ret values 1
              end then value
              begin else value
                get property: # (15) = var t (6) [const string "name" (-47)]
              end else value
            end question ret values 1
            get property: # (16) = var t (6) [const string "arguments" (-48)]
          end call method: start 9, params 8, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (6), index 5
  set property: var _E (2) [const string "printBackTrace" (-24)] = # (6)


[45] function eval(str, env){

  begin function
    begin locals 6, stack 11
      0 _F (param)
      1 this (param)
      2 str (param)
      3 env (param)
      4 _E
      5 _G
    end locals

[46] return compileText(str).applyEnv(env || _G, null, ...)

      begin call method
        begin call method
          move: # (6) = var _E (4)
          move: # (7) = const string "compileText" (-52)
          move: # (8) = param str (2)
        end call method: start 6, params 3, ret values 1
        move: # (7) = const string "applyEnv" (-53)
        move: # (8) = param env (3)
        logic ||: # (8)
          move: # (8) = var _G (5)
        move: # (9) = const null (-1)
        get rest arguments: # (10)
      end call method: start 6, params 5, ret values 1
    return: # (6), count 1
  end function: # (6), index 6
  set property: var _E (2) [const string "eval" (-51)] = # (6)


[49] var events = {}

  new object 0: # (6)
  move: var events (4) = # (6)


[51] function addEventListener(eventName, func, zOrder){

  begin function
    begin locals 7, stack 11
      0 _F (param)
      1 this (param)
      2 eventName (param)
      3 func (param)
      4 zOrder (param)
      5 _E
      6 _G
    end locals

[52] functionOf(func) || return;

    begin pop
      begin call method
        move: # (7) = var _E (5)
        move: # (8) = const string "functionOf" (-55)
        move: # (9) = param func (3)
      end call method: start 7, params 3, ret values 1
      logic ||: # (7)
        return: # (7), count 0
    end pop ret values 0


[53] if(!(eventName in events)){

    begin if
      begin bool exp
        begin call method
          move: # (7) = var _G (6)
          move: # (8) = const string "__in" (-33)
          move: # (9) = param eventName (2)
          get upvalue: # (10) = var events (4 1)
        end call method: start 7, params 4, ret values 1
        # (7) = [logic not] # (7)
      end bool exp
      begin then

[54] events[eventName] = {}

        begin scope
          new object 0: # (7)
          get upvalue: # (8) = var events (4 1)
          set property: # (8) [param eventName (2)] = # (7)
        end scope ret values 0
      end then
    end if ret values 0


[56] events[eventName][func] = zOrder || 0

    move: # (7) = param zOrder (4)
    logic ||: # (7)
      move: # (7) = const number 0 (-5)
    get upvalue: # (8) = var events (4 1)
    get property: # (8) = # (8) [param eventName (2)]
    set property: # (8) [param func (3)] = # (7)


[57] events[eventName].rsort()

    begin call method
      get upvalue: # (7) = var events (4 1)
      get property: # (7) = # (7) [param eventName (2)]
      move: # (8) = const string "rsort" (-56)
    end call method: start 7, params 2, ret values 0


[58] return [eventName func]

      new array 2: # (7)
      begin call method
        move: # (8) = # (7)
        move: # (9) = const string "push" (-57)
        move: # (10) = param eventName (2)
      end call method: start 8, params 3, ret values 0
      begin call method
        move: # (8) = # (7)
        move: # (9) = const string "push" (-57)
        move: # (10) = param func (3)
      end call method: start 8, params 3, ret values 0
    return: # (7), count 1
  end function: # (6), index 7
  set property: var _E (2) [const string "addEventListener" (-54)] = # (6)


[61] function removeEventListener(eventName, func){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 eventName (param)
      3 func (param)
      4 _E
      5 _G
    end locals

[62] if(arrayOf(eventName)){

    begin if
      begin bool exp
        begin call method
          move: # (6) = var _E (4)
          move: # (7) = const string "arrayOf" (-14)
          move: # (8) = param eventName (2)
        end call method: start 6, params 3, ret values 1
      end bool exp
      begin then

[63] eventName, func = eventName[0], eventName[1]

        begin scope
          get property: # (6) = param eventName (2) [const number 0 (-5)]
          get property: param func (3) = param eventName (2) [const number 1 (-4)]
          move: param eventName (2) = # (6)
        end scope ret values 0
      end then
    end if ret values 0

[65] if(eventName in events){

    begin if
      begin bool exp
        begin call method
          move: # (6) = var _G (5)
          move: # (7) = const string "__in" (-33)
          move: # (8) = param eventName (2)
          get upvalue: # (9) = var events (4 1)
        end call method: start 6, params 4, ret values 1
      end bool exp
      begin then

[66] delete events[eventName][func]

        begin scope
          begin call method
            move: # (6) = var _G (5)
            move: # (7) = const string "__delete" (-59)
            get upvalue: # (8) = var events (4 1)
            get property: # (8) = # (8) [param eventName (2)]
            move: # (9) = param func (3)
          end call method: start 6, params 4, ret values 0
        end scope ret values 0
      end then
    end if ret values 0
  end function: # (6), index 8
  set property: var _E (2) [const string "removeEventListener" (-58)] = # (6)


[70] function triggerEvent(eventName, params){

  begin function
    begin locals 10, stack 13
      0 _F (param)
      1 this (param)
      2 eventName (param)
      3 params (param)
      4 _E
      5 _G
    end locals

[72] for(var func, zOrder in events[eventName]){

    begin scope
      begin locals 4
        6 func
        7 zOrder
        8 #func
        9 #valid
      end locals




      begin call method
        get upvalue: # (10) = var events (4 1)
        get property: # (10) = # (10) [param eventName (2)]
        move: # (11) = const string "__iter" (-38)
      end call method: start 10, params 2, ret values 1
      move: var #func (8) = # (10)
      begin loop
        begin call
          move: # (10) = var #func (8)
          move: # (11) = const null (-1)
        end call: start 10, params 2, ret values 3
        move: var zOrder (7) = # (12)
        move: var func (6) = # (11)
        move: var #valid (9) = # (10)

        begin if
          begin bool exp
            move: # (10) = var #valid (9)
            # (10) = [logic not] # (10)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[73] func(params)

        begin scope
          begin call
            move: # (10) = var func (6)
            move: # (11) = const null (-1)
            move: # (12) = param params (3)
          end call: start 10, params 3, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (6), index 9
  set property: var _E (2) [const string "triggerEvent" (-60)] = # (6)


[77] var timers = {}

  new object 0: # (6)
  move: var timers (5) = # (6)


[79] function isCallable(f){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 f (param)
      3 _E
      4 _G
      5 type
    end locals

[80] var type = typeOf(f)

    begin call method
      move: # (6) = var _E (3)
      move: # (7) = const string "typeOf" (-8)
      move: # (8) = param f (2)
    end call method: start 6, params 3, ret values 1
    move: var type (5) = # (6)


[81] return type === "function" || type === "object" || type === "userdata"

      move: # (6) = var type (5)
      move: # (7) = const string "function" (-62)
      # (6) = # (6) [logic ===] # (7)
      logic ||: # (6)
        move: # (6) = var type (5)
        move: # (7) = const string "object" (-42)
        # (6) = # (6) [logic ===] # (7)
      logic ||: # (6)
        move: # (6) = var type (5)
        move: # (7) = const string "userdata" (-63)
        # (6) = # (6) [logic ===] # (7)
    return: # (6), count 1
  end function: # (6), index 10
  set property: var _E (2) [const string "isCallable" (-61)] = # (6)


[84] function setTimeout(func, delay, count, priority){

  begin function
    begin locals 9, stack 13
      0 _F (param)
      1 this (param)
      2 func (param)
      3 delay (param)
      4 count (param)
      5 priority (param)
      6 _E
      7 _G
      8 i
    end locals

[85] count = count || 1

    move: # (9) = param count (4)
    logic ||: # (9)
      move: # (9) = const number 1 (-4)
    move: param count (4) = # (9)


[86] count > 0 && functionOf(func) || return;

    begin pop
      move: # (9) = param count (4)
      move: # (10) = const number 0 (-5)
      # (9) = # (9) [logic >] # (10)
      logic &&: # (9)
        begin call method
          move: # (9) = var _E (6)
          move: # (10) = const string "functionOf" (-55)
          move: # (11) = param func (2)
        end call method: start 9, params 3, ret values 1
      logic ||: # (9)
        return: # (9), count 0
    end pop ret values 0


[87] var i = func // #timers

    move: var i (8) = param func (2)


[88] timers[i] = {

    new object 5: # (9)

[89] nextTime = app.timeSec + delay

    get property: # (11) = var _E (6) [const string "app" (-66)]
    get property: # (11) = # (11) [const string "timeSec" (-67)]
    # (11) = # (11) [operator +] param delay (3)
    init property: # (9) [const string "nextTime" (-65)] = # (11)

[90] delay = delay

    init property: # (9) [const string "delay" (-68)] = param delay (3)

[91] func = func

    init property: # (9) [const string "func" (-69)] = param func (2)

[92] count = count

    init property: # (9) [const string "count" (-70)] = param count (4)

[93] priority = priority || 0

    move: # (11) = param priority (5)
    logic ||: # (11)
      move: # (11) = const number 0 (-5)
    init property: # (9) [const string "priority" (-71)] = # (11)

[88] timers[i] = {

    get upvalue: # (10) = var timers (5 1)
    set property: # (10) [var i (8)] = # (9)


[96] timers.rsort "priority"

    begin call method
      get upvalue: # (9) = var timers (5 1)
      move: # (10) = const string "rsort" (-56)
      move: # (11) = const string "priority" (-71)
    end call method: start 9, params 3, ret values 0


[97] return i

    return: var i (8), count 1
  end function: # (6), index 11
  set property: var _E (2) [const string "setTimeout" (-64)] = # (6)


[100] function clearTimeout(t){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 t (param)
      3 _E
      4 _G
    end locals

[101] delete timers[t]

    begin call method
      move: # (5) = var _G (4)
      move: # (6) = const string "__delete" (-59)
      get upvalue: # (7) = var timers (5 1)
      move: # (8) = param t (2)
    end call method: start 5, params 4, ret values 0
  end function: # (6), index 12
  set property: var _E (2) [const string "clearTimeout" (-72)] = # (6)


[104] HIGH_PRIORITY = 999999

  move: # (6) = const number 999999 (-6)
  set property: var _E (2) [const string "HIGH_PRIORITY" (-73)] = # (6)


[106] addEventListener("enterFrame" {||

  begin call method
    move: # (6) = var _E (2)
    move: # (7) = const string "addEventListener" (-54)
    begin call
      move: # (8) = const string "enterFrame" (-74)
      move: # (9) = const null (-1)
      begin function
        begin locals 9, stack 13
          0 _F (param)
          1 this (param)
          2 _E
          3 _G
          4 time
        end locals

[107] var time = app.timeSec

        get property: # (9) = var _E (2) [const string "app" (-66)]
        get property: var time (4) = # (9) [const string "timeSec" (-67)]

[108] for(var i, t in timers){

        begin scope
          begin locals 4
            5 i
            6 t
            7 #func
            8 #valid
          end locals




          begin call method
            get upvalue: # (9) = var timers (5 1)
            move: # (10) = const string "__iter" (-38)
          end call method: start 9, params 2, ret values 1
          move: var #func (7) = # (9)
          begin loop
            begin call
              move: # (9) = var #func (7)
              move: # (10) = const null (-1)
            end call: start 9, params 2, ret values 3
            move: var t (6) = # (11)
            move: var i (5) = # (10)
            move: var #valid (8) = # (9)

            begin if
              begin bool exp
                move: # (9) = var #valid (8)
                # (9) = [logic not] # (9)
              end bool exp
              begin then
                break
              end then
            end if ret values 0


[109] if(t.nextTime <= time){

            begin scope
              begin if
                begin bool exp
                  get property: # (9) = var t (6) [const string "nextTime" (-65)]
                  move: # (10) = var time (4)
                  # (9) = # (9) [logic <=] # (10)
                end bool exp
                begin then

[110] t.nextTime = time + t.delay

                  begin scope
                    get property: # (10) = var t (6) [const string "delay" (-68)]
                    # (9) = var time (4) [operator +] # (10)
                    set property: var t (6) [const string "nextTime" (-65)] = # (9)


[111] if(t.count === true){

                    begin if
                      begin bool exp
                        get property: # (9) = var t (6) [const string "count" (-70)]
                        move: # (10) = const true (-2)
                        # (9) = # (9) [logic ===] # (10)
                      end bool exp
                      begin then

[112] t.func.call(null)

                        begin scope
                          begin call method
                            get property: # (9) = var t (6) [const string "func" (-69)]
                            move: # (10) = const string "call" (-75)
                            move: # (11) = const null (-1)
                          end call method: start 9, params 3, ret values 0
                        end scope ret values 0
                      end then
                      begin else

[114] if(t.count <= 1){

                        begin scope
                          begin if
                            begin bool exp
                              get property: # (9) = var t (6) [const string "count" (-70)]
                              move: # (10) = const number 1 (-4)
                              # (9) = # (9) [logic <=] # (10)
                            end bool exp
                            begin then

[115] delete timers[i]

                              begin scope
                                begin call method
                                  move: # (9) = var _G (3)
                                  move: # (10) = const string "__delete" (-59)
                                  get upvalue: # (11) = var timers (5 1)
                                  move: # (12) = var i (5)
                                end call method: start 9, params 4, ret values 0
                              end scope ret values 0
                            end then
                            begin else

[117] t.count = t.count - 1

                              begin scope
                                get property: # (9) = var t (6) [const string "count" (-70)]
                                # (9) = # (9) [operator -] const number 1 (-4)
                                set property: var t (6) [const string "count" (-70)] = # (9)
                              end scope ret values 0
                            end else
                          end if ret values 0


[119] t.func.call(null)

                          begin call method
                            get property: # (9) = var t (6) [const string "func" (-69)]
                            move: # (10) = const string "call" (-75)
                            move: # (11) = const null (-1)
                          end call method: start 9, params 3, ret values 0
                        end scope ret values 0
                      end else
                    end if ret values 0
                  end scope ret values 0
                end then
              end if ret values 0
            end scope ret values 0
          end loop ret values 0
        end scope ret values 0
      end function: # (10), index 13
    end call: start 8, params 3, ret values 1

[123] } HIGH_PRIORITY+1)

    get property: # (9) = var _E (2) [const string "HIGH_PRIORITY" (-73)]
    # (9) = # (9) [operator +] const number 1 (-4)
  end call method: start 6, params 4, ret values 0


[125] function toArray(a){

  begin function
    begin locals 11, stack 15
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
      5 type
    end locals

[126] arrayOf(a) && return arr;

    begin pop
      begin call method
        move: # (11) = var _E (3)
        move: # (12) = const string "arrayOf" (-14)
        move: # (13) = param a (2)
      end call method: start 11, params 3, ret values 1
      logic &&: # (11)
          get property: # (11) = var _E (3) [const string "arr" (-77)]
        return: # (11), count 1
    end pop ret values 0


[127] var type = typeOf(a)

    begin call method
      move: # (11) = var _E (3)
      move: # (12) = const string "typeOf" (-8)
      move: # (13) = param a (2)
    end call method: start 11, params 3, ret values 1
    move: var type (5) = # (11)


[128] if(type == "object"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "object" (-42)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[129] var arr = []

        begin scope
          begin locals 1
            6 arr
          end locals
          new array 0: # (11)
          move: var arr (6) = # (11)


[130] for(var i, v in a){

          begin scope
            begin locals 4
              7 i
              8 v
              9 #func
              10 #valid
            end locals




            begin call method
              move: # (11) = param a (2)
              move: # (12) = const string "__iter" (-38)
            end call method: start 11, params 2, ret values 1
            move: var #func (9) = # (11)
            begin loop
              begin call
                move: # (11) = var #func (9)
                move: # (12) = const null (-1)
              end call: start 11, params 2, ret values 3
              move: var v (8) = # (13)
              move: var i (7) = # (12)
              move: var #valid (10) = # (11)

              begin if
                begin bool exp
                  move: # (11) = var #valid (10)
                  # (11) = [logic not] # (11)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[131] arr.push(v)

              begin scope
                begin call method
                  move: # (11) = var arr (6)
                  move: # (12) = const string "push" (-57)
                  move: # (13) = var v (8)
                end call method: start 11, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0


[133] return arr

          return: var arr (6), count 1
        end scope ret values 0
      end then
    end if ret values 0


[135] if(type == "null"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "null" (-78)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[136] return null

        begin scope
            move: # (11) = const null (-1)
          return: # (11), count 1
        end scope ret values 0
      end then
    end if ret values 0


[138] return [a]

      new array 1: # (11)
      begin call method
        move: # (12) = # (11)
        move: # (13) = const string "push" (-57)
        move: # (14) = param a (2)
      end call method: start 12, params 3, ret values 0
    return: # (11), count 1
  end function: # (6), index 14
  set property: var _E (2) [const string "toArray" (-76)] = # (6)


[141] function toObject(a){

  begin function
    begin locals 11, stack 15
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
      5 type
    end locals

[142] objectOf(a) && return object;

    begin pop
      begin call method
        move: # (11) = var _E (3)
        move: # (12) = const string "objectOf" (-16)
        move: # (13) = param a (2)
      end call method: start 11, params 3, ret values 1
      logic &&: # (11)
          get property: # (11) = var _E (3) [const string "object" (-42)]
        return: # (11), count 1
    end pop ret values 0


[143] var type = typeOf(a)

    begin call method
      move: # (11) = var _E (3)
      move: # (12) = const string "typeOf" (-8)
      move: # (13) = param a (2)
    end call method: start 11, params 3, ret values 1
    move: var type (5) = # (11)


[144] if(type == "array"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "array" (-80)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[145] var object = {}

        begin scope
          begin locals 1
            6 object
          end locals
          new object 0: # (11)
          move: var object (6) = # (11)


[146] for(var i, v in a){

          begin scope
            begin locals 4
              7 i
              8 v
              9 #func
              10 #valid
            end locals




            begin call method
              move: # (11) = param a (2)
              move: # (12) = const string "__iter" (-38)
            end call method: start 11, params 2, ret values 1
            move: var #func (9) = # (11)
            begin loop
              begin call
                move: # (11) = var #func (9)
                move: # (12) = const null (-1)
              end call: start 11, params 2, ret values 3
              move: var v (8) = # (13)
              move: var i (7) = # (12)
              move: var #valid (10) = # (11)

              begin if
                begin bool exp
                  move: # (11) = var #valid (10)
                  # (11) = [logic not] # (11)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[147] object.push(v)

              begin scope
                begin call method
                  move: # (11) = var object (6)
                  move: # (12) = const string "push" (-57)
                  move: # (13) = var v (8)
                end call method: start 11, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0


[149] return object

          return: var object (6), count 1
        end scope ret values 0
      end then
    end if ret values 0


[151] if(type == "null"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "null" (-78)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[152] return null

        begin scope
            move: # (11) = const null (-1)
          return: # (11), count 1
        end scope ret values 0
      end then
    end if ret values 0


[154] return {a}

      new object 1: # (11)
      begin call method
        move: # (12) = # (11)
        move: # (13) = const string "push" (-57)
        move: # (14) = param a (2)
      end call method: start 12, params 3, ret values 0
    return: # (11), count 1
  end function: # (6), index 15
  set property: var _E (2) [const string "toObject" (-79)] = # (6)


[157] function Object.deepClone(){

  begin function
    begin locals 9, stack 12
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
      4 t
    end locals

[158] var t = this.clone()

    begin call method
      move: # (9) = param this (1)
      move: # (10) = const string "clone" (-81)
    end call method: start 9, params 2, ret values 1
    move: var t (4) = # (9)


[159] for(var k, v in t){

    begin scope
      begin locals 4
        5 k
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = var t (4)
        move: # (10) = const string "__iter" (-38)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var k (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[160] t[k] = v.deepClone()

        begin scope
          begin call method
            move: # (9) = var v (6)
            move: # (10) = const string "deepClone" (-82)
          end call method: start 9, params 2, ret values 1
          set property: var t (4) [var k (5)] = # (9)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[162] return t

    return: var t (4), count 1
  end function: # (6), index 16

[157] function Object.deepClone(){

  get property: # (7) = var _E (2) [const string "Object" (-29)]
  set property: # (7) [const string "deepClone" (-82)] = # (6)


[165] function Object.flip(){

  begin function
    begin locals 9, stack 12
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
      4 r
    end locals

[166] var r = {}

    new object 0: # (9)
    move: var r (4) = # (9)


[167] for(var i, v in this){

    begin scope
      begin locals 4
        5 i
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = param this (1)
        move: # (10) = const string "__iter" (-38)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var i (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[168] r[v] = i

        begin scope
          set property: var r (4) [var v (6)] = var i (5)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[170] return r

    return: var r (4), count 1
  end function: # (6), index 17

[165] function Object.flip(){

  get property: # (7) = var _E (2) [const string "Object" (-29)]
  set property: # (7) [const string "flip" (-83)] = # (6)


[173] function math.clamp(a, min, max){

  begin function
    begin locals 7, stack 9
      0 _F (param)
      1 this (param)
      2 a (param)
      3 min (param)
      4 max (param)
      5 _E
      6 _G
    end locals

[174] return a < min ? min : a > max ? max : a

      begin question
        begin bool exp
          move: # (7) = param a (2)
          move: # (8) = param min (3)
          # (7) = # (7) [logic <] # (8)
        end bool exp
        begin then value
          move: # (7) = param min (3)
        end then value
        begin else value
          begin question
            begin bool exp
              move: # (7) = param a (2)
              move: # (8) = param max (4)
              # (7) = # (7) [logic >] # (8)
            end bool exp
            begin then value
              move: # (7) = param max (4)
            end then value
            begin else value
              move: # (7) = param a (2)
            end else value
          end question ret values 1
        end else value
      end question ret values 1
    return: # (7), count 1
  end function: # (6), index 18

[173] function math.clamp(a, min, max){

  get property: # (7) = var _E (2) [const string "math" (-84)]
  set property: # (7) [const string "clamp" (-85)] = # (6)


[175] }

  return: var _E (2), count 1
end function: {main} (0), index 0
