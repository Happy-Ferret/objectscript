
[FILE] ../../examples-os/core.os
[1] typeof = typeOf

begin function
  begin locals 6, stack 12
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    4 events
    5 timers
  end locals
  get property: # (6) = var _E (2) [const string "typeOf" (-8)]
  set property: var _E (2) [const string "typeof" (-7)] = # (6)


[2] numberof = numberOf

  get property: # (6) = var _E (2) [const string "numberOf" (-10)]
  set property: var _E (2) [const string "numberof" (-9)] = # (6)


[3] stringof = stringOf

  get property: # (6) = var _E (2) [const string "stringOf" (-12)]
  set property: var _E (2) [const string "stringof" (-11)] = # (6)


[4] arrayof = arrayOf

  get property: # (6) = var _E (2) [const string "arrayOf" (-14)]
  set property: var _E (2) [const string "arrayof" (-13)] = # (6)


[5] objectof = objectOf

  get property: # (6) = var _E (2) [const string "objectOf" (-16)]
  set property: var _E (2) [const string "objectof" (-15)] = # (6)


[6] userdataof = userdataOf

  get property: # (6) = var _E (2) [const string "userdataOf" (-18)]
  set property: var _E (2) [const string "userdataof" (-17)] = # (6)


[8] function __get(name){

  begin function
    begin locals 5, stack 10
      0 _F (param)
      1 this (param)
      2 name (param)
      3 _E
      4 _G
    end locals

[9] echo("global property \""name"\" is not declared\n")

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "global property "" (-21)
      move: # (8) = param name (2)
      move: # (9) = const string "" is not declared
" (-22)
    end call method: start 5, params 5, ret values 0


[10] echo "back trace\n"

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "back trace
" (-23)
    end call method: start 5, params 3, ret values 0


[11] printBackTrace(1)

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "printBackTrace" (-24)
      move: # (7) = const number 1 (-4)
    end call method: start 5, params 3, ret values 0


[12] echo "\n"

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "echo" (-20)
        move: # (7) = const string "
" (-25)
      end call method: start 5, params 3, ret values 1
    return: # (5), count 1
  end function: # (6), index 1
  set property: var _E (2) [const string "__get" (-19)] = # (6)


[15] function Object.__get(name){

  begin function
    begin locals 5, stack 10
      0 _F (param)
      1 this (param)
      2 name (param)
      3 _E
      4 _G
    end locals

[16] echo("object property \""name"\" is not declared\n")

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "object property "" (-26)
      move: # (8) = param name (2)
      move: # (9) = const string "" is not declared
" (-22)
    end call method: start 5, params 5, ret values 0


[17] echo "back trace\n"

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "echo" (-20)
      move: # (7) = const string "back trace
" (-23)
    end call method: start 5, params 3, ret values 0


[18] printBackTrace(1) // skip current function

    begin call method
      move: # (5) = var _E (3)
      move: # (6) = const string "printBackTrace" (-24)
      move: # (7) = const number 1 (-4)
    end call method: start 5, params 3, ret values 0


[19] echo("=======\ntarget "this"\n\n")

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "echo" (-20)
        move: # (7) = const string "=======
target " (-27)
        move: # (8) = param this (1)
        move: # (9) = const string "

" (-28)
      end call method: start 5, params 5, ret values 1
    return: # (5), count 1
  end function: # (6), index 2

[15] function Object.__get(name){

  get property: # (7) = var _E (2) [const string "Object" (-29)]
  set property: # (7) [const string "__get" (-19)] = # (6)


[22] function assert(a, message){

  begin function
    begin locals 6, stack 7
      0 _F (param)
      1 this (param)
      2 a (param)
      3 message (param)
      4 _E
      5 _G
    end locals

[23] a || throw(message || "assert failed")

      move: # (6) = param a (2)
      logic ||: # (6)
        move: # (6) = param message (3)
        logic ||: # (6)
          move: # (6) = const string "assert failed" (-31)
        throw: # (6)
        move: # (6) = const null (-1)
    return: # (6), count 1
  end function: # (6), index 3
  set property: var _E (2) [const string "assert" (-30)] = # (6)


[26] function unhandledException(e){

  begin function
    begin locals 9, stack 22
      0 _F (param)
      1 this (param)
      2 e (param)
      3 _E
      4 _G
    end locals

[27] if("trace" in e){

    begin if
      begin bool exp
        begin call method
          move: # (9) = var _G (4)
          move: # (10) = const string "__in" (-33)
          move: # (11) = const string "trace" (-34)
          move: # (12) = param e (2)
        end call method: start 9, params 4, ret values 1
      end bool exp
      begin then

[28] printf("Unhandled exception: '%s'\n", e.message);

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-35)
            move: # (11) = const string "Unhandled exception: '%s'
" (-36)
            get property: # (12) = param e (2) [const string "message" (-37)]
          end call method: start 9, params 4, ret values 0


[29] for(var i, t in e.trace){

          begin scope
            begin locals 4
              5 i
              6 t
              7 #func
              8 #valid
            end locals




            begin call method
              get property: # (9) = param e (2) [const string "trace" (-34)]
              move: # (10) = const string "__iter" (-38)
            end call method: start 9, params 2, ret values 1
            move: var #func (7) = # (9)
            begin loop
              begin call
                move: # (9) = var #func (7)
                move: # (10) = const null (-1)
              end call: start 9, params 2, ret values 3
              move: var t (6) = # (11)
              move: var i (5) = # (10)
              move: var #valid (8) = # (9)

              begin if
                begin bool exp
                  move: # (9) = var #valid (8)
                  # (9) = [logic not] # (9)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[30] printf("#%d %s%s: %s, args: %s\n", i, t.file,

              begin scope
                begin call method
                  move: # (9) = var _E (3)
                  move: # (10) = const string "printf" (-35)
                  move: # (11) = const string "#%d %s%s: %s, args: %s
" (-39)
                  move: # (12) = var i (5)
                  get property: # (13) = var t (6) [const string "file" (-40)]

[31] t.line > 0 ? "("..t.line..","..t.pos..")" : ""

                  begin question
                    begin bool exp
                      get property: # (14) = var t (6) [const string "line" (-41)]
                      move: # (15) = const number 0 (-5)
                      # (14) = # (14) [logic >] # (15)
                    end bool exp
                    begin then value
                      begin call method
                        move: # (14) = var _G (4)
                        move: # (15) = const string "concat" (-42)
                        move: # (16) = const string "(" (-43)
                        get property: # (17) = var t (6) [const string "line" (-41)]
                        move: # (18) = const string "," (-44)
                        get property: # (19) = var t (6) [const string "pos" (-45)]
                        move: # (20) = const string ")" (-46)
                      end call method: start 14, params 7, ret values 1
                    end then value
                    begin else value
                      move: # (14) = const string "" (-47)
                    end else value
                  end question ret values 1

[32] t.object === _G ? t.name : t.object ? "{obj-"..t.object.osValueId.."}."..t.name : t.name, t.arguments);

                  begin question
                    begin bool exp
                      get property: # (15) = var t (6) [const string "object" (-48)]
                      move: # (16) = var _G (4)
                      # (15) = # (15) [logic ===] # (16)
                    end bool exp
                    begin then value
                      get property: # (15) = var t (6) [const string "name" (-49)]
                    end then value
                    begin else value
                      begin question
                        begin bool exp
                          get property: # (15) = var t (6) [const string "object" (-48)]
                        end bool exp
                        begin then value
                          begin call method
                            move: # (15) = var _G (4)
                            move: # (16) = const string "concat" (-42)
                            move: # (17) = const string "{obj-" (-50)
                            get property: # (18) = var t (6) [const string "object" (-48)]
                            get property: # (18) = # (18) [const string "osValueId" (-51)]
                            move: # (19) = const string "}." (-52)
                            get property: # (20) = var t (6) [const string "name" (-49)]
                          end call method: start 15, params 6, ret values 1
                        end then value
                        begin else value
                          get property: # (15) = var t (6) [const string "name" (-49)]
                        end else value
                      end question ret values 1
                    end else value
                  end question ret values 1
                  get property: # (16) = var t (6) [const string "arguments" (-53)]
                end call method: start 9, params 8, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0
        end scope ret values 0
      end then
      begin else

[35] printf("Unhandled exception: '%s' in %s(%d,%d)\n", e.message, e.file, e.line, e.pos);

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-35)
            move: # (11) = const string "Unhandled exception: '%s' in %s(%d,%d)
" (-54)
            get property: # (12) = param e (2) [const string "message" (-37)]
            get property: # (13) = param e (2) [const string "file" (-40)]
            get property: # (14) = param e (2) [const string "line" (-41)]
            get property: # (15) = param e (2) [const string "pos" (-45)]
          end call method: start 9, params 7, ret values 0
        end scope ret values 0
      end else
    end if ret values 0
  end function: # (6), index 4
  set property: var _E (2) [const string "unhandledException" (-32)] = # (6)


[39] function printBackTrace(skipNumFuncs){

  begin function
    begin locals 9, stack 22
      0 _F (param)
      1 this (param)
      2 skipNumFuncs (param)
      3 _E
      4 _G
    end locals

[40] for(var i, t in debugBackTrace(skipNumFuncs + 1)){ // skip printBackTrace

    begin scope
      begin locals 4
        5 i
        6 t
        7 #func
        8 #valid
      end locals




      begin call method
        begin call method
          move: # (9) = var _E (3)
          move: # (10) = const string "debugBackTrace" (-55)
          # (11) = param skipNumFuncs (2) [operator +] const number 1 (-4)
        end call method: start 9, params 3, ret values 1
        move: # (10) = const string "__iter" (-38)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var t (6) = # (11)
        move: var i (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[41] printf("#%d %s%s: %s, args: %s\n", i, t.file,

        begin scope
          begin call method
            move: # (9) = var _E (3)
            move: # (10) = const string "printf" (-35)
            move: # (11) = const string "#%d %s%s: %s, args: %s
" (-39)
            move: # (12) = var i (5)
            get property: # (13) = var t (6) [const string "file" (-40)]

[42] t.line > 0 ? "("..t.line..","..t.pos..")" : ""

            begin question
              begin bool exp
                get property: # (14) = var t (6) [const string "line" (-41)]
                move: # (15) = const number 0 (-5)
                # (14) = # (14) [logic >] # (15)
              end bool exp
              begin then value
                begin call method
                  move: # (14) = var _G (4)
                  move: # (15) = const string "concat" (-42)
                  move: # (16) = const string "(" (-43)
                  get property: # (17) = var t (6) [const string "line" (-41)]
                  move: # (18) = const string "," (-44)
                  get property: # (19) = var t (6) [const string "pos" (-45)]
                  move: # (20) = const string ")" (-46)
                end call method: start 14, params 7, ret values 1
              end then value
              begin else value
                move: # (14) = const string "" (-47)
              end else value
            end question ret values 1

[43] t.object === _G ? t.name : t.object ? "{obj-"..t.object.osValueId.."}."..t.name : t.name, t.arguments);

            begin question
              begin bool exp
                get property: # (15) = var t (6) [const string "object" (-48)]
                move: # (16) = var _G (4)
                # (15) = # (15) [logic ===] # (16)
              end bool exp
              begin then value
                get property: # (15) = var t (6) [const string "name" (-49)]
              end then value
              begin else value
                begin question
                  begin bool exp
                    get property: # (15) = var t (6) [const string "object" (-48)]
                  end bool exp
                  begin then value
                    begin call method
                      move: # (15) = var _G (4)
                      move: # (16) = const string "concat" (-42)
                      move: # (17) = const string "{obj-" (-50)
                      get property: # (18) = var t (6) [const string "object" (-48)]
                      get property: # (18) = # (18) [const string "osValueId" (-51)]
                      move: # (19) = const string "}." (-52)
                      get property: # (20) = var t (6) [const string "name" (-49)]
                    end call method: start 15, params 6, ret values 1
                  end then value
                  begin else value
                    get property: # (15) = var t (6) [const string "name" (-49)]
                  end else value
                end question ret values 1
              end else value
            end question ret values 1
            get property: # (16) = var t (6) [const string "arguments" (-53)]
          end call method: start 9, params 8, ret values 0
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0
  end function: # (6), index 5
  set property: var _E (2) [const string "printBackTrace" (-24)] = # (6)


[47] function eval(str, env){

  begin function
    begin locals 6, stack 11
      0 _F (param)
      1 this (param)
      2 str (param)
      3 env (param)
      4 _E
      5 _G
    end locals

[48] return compileText(str).applyEnv(env || _G, null, ...)

      begin call method
        begin call method
          move: # (6) = var _E (4)
          move: # (7) = const string "compileText" (-57)
          move: # (8) = param str (2)
        end call method: start 6, params 3, ret values 1
        move: # (7) = const string "applyEnv" (-58)
        move: # (8) = param env (3)
        logic ||: # (8)
          move: # (8) = var _G (5)
        move: # (9) = const null (-1)
        get rest arguments: # (10)
      end call method: start 6, params 5, ret values 1
    return: # (6), count 1
  end function: # (6), index 6
  set property: var _E (2) [const string "eval" (-56)] = # (6)


[51] var events = {}

  new object 0: # (6)
  move: var events (4) = # (6)


[53] function addEventListener(eventName, func, zOrder){

  begin function
    begin locals 7, stack 11
      0 _F (param)
      1 this (param)
      2 eventName (param)
      3 func (param)
      4 zOrder (param)
      5 _E
      6 _G
    end locals

[54] functionOf(func) || return;

    begin pop
      begin call method
        move: # (7) = var _E (5)
        move: # (8) = const string "functionOf" (-60)
        move: # (9) = param func (3)
      end call method: start 7, params 3, ret values 1
      logic ||: # (7)
        return: # (7), count 0
    end pop ret values 0


[55] if(!(eventName in events)){

    begin if
      begin bool exp
        begin call method
          move: # (7) = var _G (6)
          move: # (8) = const string "__in" (-33)
          move: # (9) = param eventName (2)
          get upvalue: # (10) = var events (4 1)
        end call method: start 7, params 4, ret values 1
        # (7) = [logic not] # (7)
      end bool exp
      begin then

[56] events[eventName] = {}

        begin scope
          new object 0: # (7)
          get upvalue: # (8) = var events (4 1)
          set property: # (8) [param eventName (2)] = # (7)
        end scope ret values 0
      end then
    end if ret values 0


[58] events[eventName][func] = zOrder || 0

    move: # (7) = param zOrder (4)
    logic ||: # (7)
      move: # (7) = const number 0 (-5)
    get upvalue: # (8) = var events (4 1)
    get property: # (8) = # (8) [param eventName (2)]
    set property: # (8) [param func (3)] = # (7)


[59] events[eventName].sort {|a b| b <=> a}

    begin call method
      get upvalue: # (7) = var events (4 1)
      get property: # (7) = # (7) [param eventName (2)]
      move: # (8) = const string "sort" (-61)
      begin function
        begin locals 6, stack 8
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          # (6) = param b (3) [operator <=>] param a (2)
        return: # (6), count 1
      end function: # (9), index 8
    end call method: start 7, params 3, ret values 0


[60] return [eventName func]

      new array 2: # (7)
      begin call method
        move: # (8) = # (7)
        move: # (9) = const string "push" (-62)
        move: # (10) = param eventName (2)
      end call method: start 8, params 3, ret values 0
      begin call method
        move: # (8) = # (7)
        move: # (9) = const string "push" (-62)
        move: # (10) = param func (3)
      end call method: start 8, params 3, ret values 0
    return: # (7), count 1
  end function: # (6), index 7
  set property: var _E (2) [const string "addEventListener" (-59)] = # (6)


[63] function removeEventListener(eventName, func){

  begin function
    begin locals 6, stack 10
      0 _F (param)
      1 this (param)
      2 eventName (param)
      3 func (param)
      4 _E
      5 _G
    end locals

[64] if(arrayOf(eventName)){

    begin if
      begin bool exp
        begin call method
          move: # (6) = var _E (4)
          move: # (7) = const string "arrayOf" (-14)
          move: # (8) = param eventName (2)
        end call method: start 6, params 3, ret values 1
      end bool exp
      begin then

[65] eventName, func = eventName[0], eventName[1]

        begin scope
          get property: # (6) = param eventName (2) [const number 0 (-5)]
          get property: param func (3) = param eventName (2) [const number 1 (-4)]
          move: param eventName (2) = # (6)
        end scope ret values 0
      end then
    end if ret values 0

[67] if(eventName in events){

    begin if
      begin bool exp
        begin call method
          move: # (6) = var _G (5)
          move: # (7) = const string "__in" (-33)
          move: # (8) = param eventName (2)
          get upvalue: # (9) = var events (4 1)
        end call method: start 6, params 4, ret values 1
      end bool exp
      begin then

[68] delete events[eventName][func]

        begin scope
          begin call method
            move: # (6) = var _G (5)
            move: # (7) = const string "__delete" (-64)
            get upvalue: # (8) = var events (4 1)
            get property: # (8) = # (8) [param eventName (2)]
            move: # (9) = param func (3)
          end call method: start 6, params 4, ret values 0
        end scope ret values 0
      end then
    end if ret values 0
  end function: # (6), index 9
  set property: var _E (2) [const string "removeEventListener" (-63)] = # (6)


[72] function triggerEvent(eventName, params){

  begin function
    begin locals 10, stack 14
      0 _F (param)
      1 this (param)
      2 eventName (param)
      3 params (param)
      4 _E
      5 _G
    end locals

[74] if(eventName in events){

    begin if
      begin bool exp
        begin call method
          move: # (10) = var _G (5)
          move: # (11) = const string "__in" (-33)
          move: # (12) = param eventName (2)
          get upvalue: # (13) = var events (4 1)
        end call method: start 10, params 4, ret values 1
      end bool exp
      begin then

[75] for(var func, zOrder in events[eventName]){

        begin scope
          begin scope
            begin locals 4
              6 func
              7 zOrder
              8 #func
              9 #valid
            end locals




            begin call method
              get upvalue: # (10) = var events (4 1)
              get property: # (10) = # (10) [param eventName (2)]
              move: # (11) = const string "__iter" (-38)
            end call method: start 10, params 2, ret values 1
            move: var #func (8) = # (10)
            begin loop
              begin call
                move: # (10) = var #func (8)
                move: # (11) = const null (-1)
              end call: start 10, params 2, ret values 3
              move: var zOrder (7) = # (12)
              move: var func (6) = # (11)
              move: var #valid (9) = # (10)

              begin if
                begin bool exp
                  move: # (10) = var #valid (9)
                  # (10) = [logic not] # (10)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[76] func(params)

              begin scope
                begin call
                  move: # (10) = var func (6)
                  move: # (11) = const null (-1)
                  move: # (12) = param params (3)
                end call: start 10, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0
        end scope ret values 0
      end then
    end if ret values 0
  end function: # (6), index 10
  set property: var _E (2) [const string "triggerEvent" (-65)] = # (6)


[81] var timers = {}

  new object 0: # (6)
  move: var timers (5) = # (6)


[83] function isCallable(f){

  begin function
    begin locals 6, stack 9
      0 _F (param)
      1 this (param)
      2 f (param)
      3 _E
      4 _G
      5 type
    end locals

[84] var type = typeOf(f)

    begin call method
      move: # (6) = var _E (3)
      move: # (7) = const string "typeOf" (-8)
      move: # (8) = param f (2)
    end call method: start 6, params 3, ret values 1
    move: var type (5) = # (6)


[85] return type === "function" || type === "object" || type === "userdata"

      move: # (6) = var type (5)
      move: # (7) = const string "function" (-67)
      # (6) = # (6) [logic ===] # (7)
      logic ||: # (6)
        move: # (6) = var type (5)
        move: # (7) = const string "object" (-48)
        # (6) = # (6) [logic ===] # (7)
      logic ||: # (6)
        move: # (6) = var type (5)
        move: # (7) = const string "userdata" (-68)
        # (6) = # (6) [logic ===] # (7)
    return: # (6), count 1
  end function: # (6), index 11
  set property: var _E (2) [const string "isCallable" (-66)] = # (6)


[88] function setTimeout(func, delay, count, priority){

  begin function
    begin locals 8, stack 12
      0 _F (param)
      1 this (param)
      2 func (param)
      3 delay (param)
      4 count (param)
      5 priority (param)
      6 _E
      7 _G
    end locals

[89] count = count || 1

    move: # (8) = param count (4)
    logic ||: # (8)
      move: # (8) = const number 1 (-4)
    move: param count (4) = # (8)


[90] count > 0 && functionOf(func) || return;

    begin pop
      move: # (8) = param count (4)
      move: # (9) = const number 0 (-5)
      # (8) = # (8) [logic >] # (9)
      logic &&: # (8)
        begin call method
          move: # (8) = var _E (6)
          move: # (9) = const string "functionOf" (-60)
          move: # (10) = param func (2)
        end call method: start 8, params 3, ret values 1
      logic ||: # (8)
        return: # (8), count 0
    end pop ret values 0


[91] timers[func] = {

    new object 5: # (8)

[92] nextTime = app.timeSec + delay

    get property: # (10) = var _E (6) [const string "app" (-71)]
    get property: # (10) = # (10) [const string "timeSec" (-72)]
    # (10) = # (10) [operator +] param delay (3)
    init property: # (8) [const string "nextTime" (-70)] = # (10)

[93] delay = delay

    init property: # (8) [const string "delay" (-73)] = param delay (3)

[94] func = func

    init property: # (8) [const string "func" (-74)] = param func (2)

[95] count = count

    init property: # (8) [const string "count" (-75)] = param count (4)

[96] priority = priority || 0

    move: # (10) = param priority (5)
    logic ||: # (10)
      move: # (10) = const number 0 (-5)
    init property: # (8) [const string "priority" (-76)] = # (10)

[91] timers[func] = {

    get upvalue: # (9) = var timers (5 1)
    set property: # (9) [param func (2)] = # (8)


[98] timers.sort {|a b| b.priority - a.priority }

    begin call method
      get upvalue: # (8) = var timers (5 1)
      move: # (9) = const string "sort" (-61)
      begin function
        begin locals 6, stack 9
          0 _F (param)
          1 this (param)
          2 a (param)
          3 b (param)
          4 _E
          5 _G
        end locals
          get property: # (6) = param b (3) [const string "priority" (-76)]
          get property: # (7) = param a (2) [const string "priority" (-76)]
          # (6) = # (6) [operator -] # (7)
        return: # (6), count 1
      end function: # (10), index 13
    end call method: start 8, params 3, ret values 0


[100] return func

    return: param func (2), count 1
  end function: # (6), index 12
  set property: var _E (2) [const string "setTimeout" (-69)] = # (6)


[103] function clearTimeout(t){

  begin function
    begin locals 5, stack 9
      0 _F (param)
      1 this (param)
      2 t (param)
      3 _E
      4 _G
    end locals

[104] delete timers[t]

    begin call method
      move: # (5) = var _G (4)
      move: # (6) = const string "__delete" (-64)
      get upvalue: # (7) = var timers (5 1)
      move: # (8) = param t (2)
    end call method: start 5, params 4, ret values 0
  end function: # (6), index 14
  set property: var _E (2) [const string "clearTimeout" (-77)] = # (6)


[107] HIGH_PRIORITY = 999999

  move: # (6) = const number 999999 (-6)
  set property: var _E (2) [const string "HIGH_PRIORITY" (-78)] = # (6)


[109] addEventListener("enterFrame", {||

  begin call method
    move: # (6) = var _E (2)
    move: # (7) = const string "addEventListener" (-59)
    move: # (8) = const string "enterFrame" (-79)
    begin function
      begin locals 9, stack 13
        0 _F (param)
        1 this (param)
        2 _E
        3 _G
        4 time
      end locals

[110] var time = app.timeSec

      get property: # (9) = var _E (2) [const string "app" (-71)]
      get property: var time (4) = # (9) [const string "timeSec" (-72)]

[111] for(var i, t in timers){

      begin scope
        begin locals 4
          5 i
          6 t
          7 #func
          8 #valid
        end locals




        begin call method
          get upvalue: # (9) = var timers (5 1)
          move: # (10) = const string "__iter" (-38)
        end call method: start 9, params 2, ret values 1
        move: var #func (7) = # (9)
        begin loop
          begin call
            move: # (9) = var #func (7)
            move: # (10) = const null (-1)
          end call: start 9, params 2, ret values 3
          move: var t (6) = # (11)
          move: var i (5) = # (10)
          move: var #valid (8) = # (9)

          begin if
            begin bool exp
              move: # (9) = var #valid (8)
              # (9) = [logic not] # (9)
            end bool exp
            begin then
              break
            end then
          end if ret values 0


[112] if(t.nextTime <= time){

          begin scope
            begin if
              begin bool exp
                get property: # (9) = var t (6) [const string "nextTime" (-70)]
                move: # (10) = var time (4)
                # (9) = # (9) [logic <=] # (10)
              end bool exp
              begin then

[113] t.nextTime = time + t.delay

                begin scope
                  get property: # (10) = var t (6) [const string "delay" (-73)]
                  # (9) = var time (4) [operator +] # (10)
                  set property: var t (6) [const string "nextTime" (-70)] = # (9)


[114] if(t.count === true){

                  begin if
                    begin bool exp
                      get property: # (9) = var t (6) [const string "count" (-75)]
                      move: # (10) = const true (-2)
                      # (9) = # (9) [logic ===] # (10)
                    end bool exp
                    begin then

[116] (t.func)()

                      begin scope
                        begin call
                          begin single value
                            get property: # (9) = var t (6) [const string "func" (-74)]
                          end single value
                          move: # (10) = const null (-1)
                        end call: start 9, params 2, ret values 0
                      end scope ret values 0
                    end then
                    begin else

[118] if(t.count <= 1){

                      begin scope
                        begin if
                          begin bool exp
                            get property: # (9) = var t (6) [const string "count" (-75)]
                            move: # (10) = const number 1 (-4)
                            # (9) = # (9) [logic <=] # (10)
                          end bool exp
                          begin then

[119] delete timers[i]

                            begin scope
                              begin call method
                                move: # (9) = var _G (3)
                                move: # (10) = const string "__delete" (-64)
                                get upvalue: # (11) = var timers (5 1)
                                move: # (12) = var i (5)
                              end call method: start 9, params 4, ret values 0
                            end scope ret values 0
                          end then
                          begin else

[121] t.count = t.count - 1

                            begin scope
                              get property: # (9) = var t (6) [const string "count" (-75)]
                              # (9) = # (9) [operator -] const number 1 (-4)
                              set property: var t (6) [const string "count" (-75)] = # (9)
                            end scope ret values 0
                          end else
                        end if ret values 0


[124] (t.func)()

                        begin call
                          begin single value
                            get property: # (9) = var t (6) [const string "func" (-74)]
                          end single value
                          move: # (10) = const null (-1)
                        end call: start 9, params 2, ret values 0
                      end scope ret values 0
                    end else
                  end if ret values 0
                end scope ret values 0
              end then
            end if ret values 0
          end scope ret values 0
        end loop ret values 0
      end scope ret values 0
    end function: # (9), index 15

[128] }, HIGH_PRIORITY+1)

    get property: # (10) = var _E (2) [const string "HIGH_PRIORITY" (-78)]
    # (10) = # (10) [operator +] const number 1 (-4)
  end call method: start 6, params 5, ret values 0


[130] function toArray(a){

  begin function
    begin locals 11, stack 15
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
      5 type
    end locals

[131] arrayOf(a) && return arr;

    begin pop
      begin call method
        move: # (11) = var _E (3)
        move: # (12) = const string "arrayOf" (-14)
        move: # (13) = param a (2)
      end call method: start 11, params 3, ret values 1
      logic &&: # (11)
          get property: # (11) = var _E (3) [const string "arr" (-81)]
        return: # (11), count 1
    end pop ret values 0


[132] var type = typeOf(a)

    begin call method
      move: # (11) = var _E (3)
      move: # (12) = const string "typeOf" (-8)
      move: # (13) = param a (2)
    end call method: start 11, params 3, ret values 1
    move: var type (5) = # (11)


[133] if(type == "object"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "object" (-48)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[134] var arr = []

        begin scope
          begin locals 1
            6 arr
          end locals
          new array 0: # (11)
          move: var arr (6) = # (11)


[135] for(var i, v in a){

          begin scope
            begin locals 4
              7 i
              8 v
              9 #func
              10 #valid
            end locals




            begin call method
              move: # (11) = param a (2)
              move: # (12) = const string "__iter" (-38)
            end call method: start 11, params 2, ret values 1
            move: var #func (9) = # (11)
            begin loop
              begin call
                move: # (11) = var #func (9)
                move: # (12) = const null (-1)
              end call: start 11, params 2, ret values 3
              move: var v (8) = # (13)
              move: var i (7) = # (12)
              move: var #valid (10) = # (11)

              begin if
                begin bool exp
                  move: # (11) = var #valid (10)
                  # (11) = [logic not] # (11)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[136] arr.push(v)

              begin scope
                begin call method
                  move: # (11) = var arr (6)
                  move: # (12) = const string "push" (-62)
                  move: # (13) = var v (8)
                end call method: start 11, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0


[138] return arr

          return: var arr (6), count 1
        end scope ret values 0
      end then
    end if ret values 0


[140] if(type == "null"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "null" (-82)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[141] return null

        begin scope
            move: # (11) = const null (-1)
          return: # (11), count 1
        end scope ret values 0
      end then
    end if ret values 0


[143] return [a]

      new array 1: # (11)
      begin call method
        move: # (12) = # (11)
        move: # (13) = const string "push" (-62)
        move: # (14) = param a (2)
      end call method: start 12, params 3, ret values 0
    return: # (11), count 1
  end function: # (6), index 16
  set property: var _E (2) [const string "toArray" (-80)] = # (6)


[146] function toObject(a){

  begin function
    begin locals 11, stack 15
      0 _F (param)
      1 this (param)
      2 a (param)
      3 _E
      4 _G
      5 type
    end locals

[147] objectOf(a) && return object;

    begin pop
      begin call method
        move: # (11) = var _E (3)
        move: # (12) = const string "objectOf" (-16)
        move: # (13) = param a (2)
      end call method: start 11, params 3, ret values 1
      logic &&: # (11)
          get property: # (11) = var _E (3) [const string "object" (-48)]
        return: # (11), count 1
    end pop ret values 0


[148] var type = typeOf(a)

    begin call method
      move: # (11) = var _E (3)
      move: # (12) = const string "typeOf" (-8)
      move: # (13) = param a (2)
    end call method: start 11, params 3, ret values 1
    move: var type (5) = # (11)


[149] if(type == "array"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "array" (-84)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[150] var object = {}

        begin scope
          begin locals 1
            6 object
          end locals
          new object 0: # (11)
          move: var object (6) = # (11)


[151] for(var i, v in a){

          begin scope
            begin locals 4
              7 i
              8 v
              9 #func
              10 #valid
            end locals




            begin call method
              move: # (11) = param a (2)
              move: # (12) = const string "__iter" (-38)
            end call method: start 11, params 2, ret values 1
            move: var #func (9) = # (11)
            begin loop
              begin call
                move: # (11) = var #func (9)
                move: # (12) = const null (-1)
              end call: start 11, params 2, ret values 3
              move: var v (8) = # (13)
              move: var i (7) = # (12)
              move: var #valid (10) = # (11)

              begin if
                begin bool exp
                  move: # (11) = var #valid (10)
                  # (11) = [logic not] # (11)
                end bool exp
                begin then
                  break
                end then
              end if ret values 0


[152] object.push(v)

              begin scope
                begin call method
                  move: # (11) = var object (6)
                  move: # (12) = const string "push" (-62)
                  move: # (13) = var v (8)
                end call method: start 11, params 3, ret values 0
              end scope ret values 0
            end loop ret values 0
          end scope ret values 0


[154] return object

          return: var object (6), count 1
        end scope ret values 0
      end then
    end if ret values 0


[156] if(type == "null"){

    begin if
      begin bool exp
        move: # (11) = var type (5)
        move: # (12) = const string "null" (-82)
        # (11) = # (11) [logic ==] # (12)
      end bool exp
      begin then

[157] return null

        begin scope
            move: # (11) = const null (-1)
          return: # (11), count 1
        end scope ret values 0
      end then
    end if ret values 0


[159] return {a}

      new object 1: # (11)
      begin call method
        move: # (12) = # (11)
        move: # (13) = const string "push" (-62)
        move: # (14) = param a (2)
      end call method: start 12, params 3, ret values 0
    return: # (11), count 1
  end function: # (6), index 17
  set property: var _E (2) [const string "toObject" (-83)] = # (6)


[162] function Object.deepClone(){

  begin function
    begin locals 9, stack 12
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
      4 t
    end locals

[163] var t = @clone()

    begin call method
      move: # (9) = param this (1)
      move: # (10) = const string "clone" (-85)
    end call method: start 9, params 2, ret values 1
    move: var t (4) = # (9)


[164] for(var k, v in t){

    begin scope
      begin locals 4
        5 k
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = var t (4)
        move: # (10) = const string "__iter" (-38)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var k (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[165] t[k] = v.deepClone()

        begin scope
          begin call method
            move: # (9) = var v (6)
            move: # (10) = const string "deepClone" (-86)
          end call method: start 9, params 2, ret values 1
          set property: var t (4) [var k (5)] = # (9)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[167] return t

    return: var t (4), count 1
  end function: # (6), index 18

[162] function Object.deepClone(){

  get property: # (7) = var _E (2) [const string "Object" (-29)]
  set property: # (7) [const string "deepClone" (-86)] = # (6)


[170] function Object.flip(){

  begin function
    begin locals 9, stack 12
      0 _F (param)
      1 this (param)
      2 _E
      3 _G
      4 r
    end locals

[171] var r = {}

    new object 0: # (9)
    move: var r (4) = # (9)


[172] for(var i, v in this){

    begin scope
      begin locals 4
        5 i
        6 v
        7 #func
        8 #valid
      end locals




      begin call method
        move: # (9) = param this (1)
        move: # (10) = const string "__iter" (-38)
      end call method: start 9, params 2, ret values 1
      move: var #func (7) = # (9)
      begin loop
        begin call
          move: # (9) = var #func (7)
          move: # (10) = const null (-1)
        end call: start 9, params 2, ret values 3
        move: var v (6) = # (11)
        move: var i (5) = # (10)
        move: var #valid (8) = # (9)

        begin if
          begin bool exp
            move: # (9) = var #valid (8)
            # (9) = [logic not] # (9)
          end bool exp
          begin then
            break
          end then
        end if ret values 0


[173] r[v] = i

        begin scope
          set property: var r (4) [var v (6)] = var i (5)
        end scope ret values 0
      end loop ret values 0
    end scope ret values 0


[175] return r

    return: var r (4), count 1
  end function: # (6), index 19

[170] function Object.flip(){

  get property: # (7) = var _E (2) [const string "Object" (-29)]
  set property: # (7) [const string "flip" (-87)] = # (6)


[178] function math.clamp(a, min, max){

  begin function
    begin locals 7, stack 9
      0 _F (param)
      1 this (param)
      2 a (param)
      3 min (param)
      4 max (param)
      5 _E
      6 _G
    end locals

[179] return a < min ? min : a > max ? max : a

      begin question
        begin bool exp
          move: # (7) = param a (2)
          move: # (8) = param min (3)
          # (7) = # (7) [logic <] # (8)
        end bool exp
        begin then value
          move: # (7) = param min (3)
        end then value
        begin else value
          begin question
            begin bool exp
              move: # (7) = param a (2)
              move: # (8) = param max (4)
              # (7) = # (7) [logic >] # (8)
            end bool exp
            begin then value
              move: # (7) = param max (4)
            end then value
            begin else value
              move: # (7) = param a (2)
            end else value
          end question ret values 1
        end else value
      end question ret values 1
    return: # (7), count 1
  end function: # (6), index 20

[178] function math.clamp(a, min, max){

  get property: # (7) = var _E (2) [const string "math" (-88)]
  set property: # (7) [const string "clamp" (-89)] = # (6)


[180] }

  return: var _E (2), count 1
end function: {main} (0), index 0
