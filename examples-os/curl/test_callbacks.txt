
[FILE] ../../examples-os/curl/test_callbacks.os
[9] var body = function(buf) {

begin function
  begin locals 8, stack 13
    0 _F (param)
    1 this (param)
    2 _E
    3 _G
    4 body
    5 header
    6 curl
    7 test
  end locals
  begin function
    begin locals 5, stack 8
      0 _F (param)
      1 this (param)
      2 buf (param)
      3 _E
      4 _G
    end locals

[10] print buf

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "print" (-4)
        move: # (7) = param buf (2)
      end call method: start 5, params 3, ret values 1
    return: # (5), count 1
  end function: var body (4), index 1


[13] var header = function(buf) {

  begin function
    begin locals 5, stack 8
      0 _F (param)
      1 this (param)
      2 buf (param)
      3 _E
      4 _G
    end locals

[14] print buf

      begin call method
        move: # (5) = var _E (3)
        move: # (6) = const string "print" (-4)
        move: # (7) = param buf (2)
      end call method: start 5, params 3, ret values 1
    return: # (5), count 1
  end function: var header (5), index 2


[17] var curl = Curl()

  begin call method
    move: # (8) = var _E (2)
    move: # (9) = const string "Curl" (-5)
  end call method: start 8, params 2, ret values 1
  move: var curl (6) = # (8)


[18] curl.options {

  begin call method
    move: # (8) = var curl (6)
    move: # (9) = const string "options" (-6)
    new object 3: # (10)

[19] url            = "http://www.python.org/"

    init property: # (10) [const string "url" (-7)] = const string "http://www.python.org/" (-8)

[20] writefunction  = body

    init property: # (10) [const string "writefunction" (-9)] = var body (4)

[21] headerfunction = header

    init property: # (10) [const string "headerfunction" (-10)] = var header (5)
  end call method: start 8, params 3, ret values 0


[23] curl.perform()

  begin call method
    move: # (8) = var curl (6)
    move: # (9) = const string "perform" (-11)
  end call method: start 8, params 2, ret values 0


[40] }.perform()

  begin call method

[31] Curl {

    begin call method
      move: # (8) = var _E (2)
      move: # (9) = const string "Curl" (-5)
      new object 3: # (10)

[32] url              = "http://slashdot.org/"

      init property: # (10) [const string "url" (-7)] = const string "http://slashdot.org/" (-12)

[33] noprogress       = false

      init property: # (10) [const string "noprogress" (-13)] = const false (-3)

[34] progressfunction = function(dltotal, dlnow, ultotal, ulnow) {

      begin function
        begin locals 8, stack 12
          0 _F (param)
          1 this (param)
          2 dltotal (param)
          3 dlnow (param)
          4 ultotal (param)
          5 ulnow (param)
          6 _E
          7 _G
        end locals

[35] print ("Total to download", dltotal)

        begin call method
          move: # (8) = var _E (6)
          move: # (9) = const string "print" (-4)
          move: # (10) = const string "Total to download" (-15)
          move: # (11) = param dltotal (2)
        end call method: start 8, params 4, ret values 0


[36] print ("Total downloaded", dlnow)

        begin call method
          move: # (8) = var _E (6)
          move: # (9) = const string "print" (-4)
          move: # (10) = const string "Total downloaded" (-16)
          move: # (11) = param dlnow (3)
        end call method: start 8, params 4, ret values 0


[37] print ("Total to upload", ultotal)

        begin call method
          move: # (8) = var _E (6)
          move: # (9) = const string "print" (-4)
          move: # (10) = const string "Total to upload" (-17)
          move: # (11) = param ultotal (4)
        end call method: start 8, params 4, ret values 0


[38] print ("Total uploaded", ulnow)

          begin call method
            move: # (8) = var _E (6)
            move: # (9) = const string "print" (-4)
            move: # (10) = const string "Total uploaded" (-18)
            move: # (11) = param ulnow (5)
          end call method: start 8, params 4, ret values 1
        return: # (8), count 1
      end function: # (12), index 3
      init property: # (10) [const string "progressfunction" (-14)] = # (12)
    end call method: start 8, params 3, ret values 1

[40] }.perform()

    move: # (9) = const string "perform" (-11)
  end call method: start 8, params 2, ret values 0


[49] var function test(debug_type, debug_msg) {

  begin function
    begin locals 6, stack 11
      0 _F (param)
      1 this (param)
      2 debug_type (param)
      3 debug_msg (param)
      4 _E
      5 _G
    end locals

[50] printf ("debug(%d): %s", debug_type, debug_msg)

      begin call method
        move: # (6) = var _E (4)
        move: # (7) = const string "printf" (-19)
        move: # (8) = const string "debug(%d): %s" (-20)
        move: # (9) = param debug_type (2)
        move: # (10) = param debug_msg (3)
      end call method: start 6, params 5, ret values 1
    return: # (6), count 1
  end function: var test (7), index 4


[57] }.perform()

  begin call method

[53] Curl {

    begin call method
      move: # (8) = var _E (2)
      move: # (9) = const string "Curl" (-5)
      new object 3: # (10)

[54] url           = "http://curl.haxx.se/"

      init property: # (10) [const string "url" (-7)] = const string "http://curl.haxx.se/" (-21)

[55] verbose       = true

      init property: # (10) [const string "verbose" (-22)] = const true (-2)

[56] debugfunction = test

      init property: # (10) [const string "debugfunction" (-23)] = var test (7)
    end call method: start 8, params 3, ret values 1

[57] }.perform()

    move: # (9) = const string "perform" (-11)
  end call method: start 8, params 2, ret values 0

  return: var _E (2), count 1
end function: {main} (0), index 0
